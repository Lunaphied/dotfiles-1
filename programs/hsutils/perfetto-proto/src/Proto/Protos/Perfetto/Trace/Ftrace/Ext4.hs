{- This file was auto-generated from protos/perfetto/trace/ftrace/ext4.proto by the proto-lens-protoc program. -}
{-# LANGUAGE ScopedTypeVariables, DataKinds, TypeFamilies, UndecidableInstances, GeneralizedNewtypeDeriving, MultiParamTypeClasses, FlexibleContexts, FlexibleInstances, PatternSynonyms, MagicHash, NoImplicitPrelude, DataKinds, BangPatterns, TypeApplications, OverloadedStrings, DerivingStrategies#-}
{-# OPTIONS_GHC -Wno-unused-imports#-}
{-# OPTIONS_GHC -Wno-duplicate-exports#-}
{-# OPTIONS_GHC -Wno-dodgy-exports#-}
module Proto.Protos.Perfetto.Trace.Ftrace.Ext4 (
        Ext4AllocDaBlocksFtraceEvent(), Ext4AllocateBlocksFtraceEvent(),
        Ext4AllocateInodeFtraceEvent(),
        Ext4BeginOrderedTruncateFtraceEvent(),
        Ext4CollapseRangeFtraceEvent(), Ext4DaReleaseSpaceFtraceEvent(),
        Ext4DaReserveSpaceFtraceEvent(),
        Ext4DaUpdateReserveSpaceFtraceEvent(),
        Ext4DaWriteBeginFtraceEvent(), Ext4DaWriteEndFtraceEvent(),
        Ext4DaWritePagesExtentFtraceEvent(), Ext4DaWritePagesFtraceEvent(),
        Ext4DirectIOEnterFtraceEvent(), Ext4DirectIOExitFtraceEvent(),
        Ext4DiscardBlocksFtraceEvent(),
        Ext4DiscardPreallocationsFtraceEvent(), Ext4DropInodeFtraceEvent(),
        Ext4EsCacheExtentFtraceEvent(),
        Ext4EsFindDelayedExtentRangeEnterFtraceEvent(),
        Ext4EsFindDelayedExtentRangeExitFtraceEvent(),
        Ext4EsInsertExtentFtraceEvent(),
        Ext4EsLookupExtentEnterFtraceEvent(),
        Ext4EsLookupExtentExitFtraceEvent(),
        Ext4EsRemoveExtentFtraceEvent(), Ext4EsShrinkCountFtraceEvent(),
        Ext4EsShrinkFtraceEvent(), Ext4EsShrinkScanEnterFtraceEvent(),
        Ext4EsShrinkScanExitFtraceEvent(), Ext4EvictInodeFtraceEvent(),
        Ext4ExtConvertToInitializedEnterFtraceEvent(),
        Ext4ExtConvertToInitializedFastpathFtraceEvent(),
        Ext4ExtHandleUnwrittenExtentsFtraceEvent(),
        Ext4ExtInCacheFtraceEvent(), Ext4ExtLoadExtentFtraceEvent(),
        Ext4ExtMapBlocksEnterFtraceEvent(),
        Ext4ExtMapBlocksExitFtraceEvent(), Ext4ExtPutInCacheFtraceEvent(),
        Ext4ExtRemoveSpaceDoneFtraceEvent(),
        Ext4ExtRemoveSpaceFtraceEvent(), Ext4ExtRmIdxFtraceEvent(),
        Ext4ExtRmLeafFtraceEvent(), Ext4ExtShowExtentFtraceEvent(),
        Ext4FallocateEnterFtraceEvent(), Ext4FallocateExitFtraceEvent(),
        Ext4FindDelallocRangeFtraceEvent(), Ext4ForgetFtraceEvent(),
        Ext4FreeBlocksFtraceEvent(), Ext4FreeInodeFtraceEvent(),
        Ext4GetImpliedClusterAllocExitFtraceEvent(),
        Ext4GetReservedClusterAllocFtraceEvent(),
        Ext4IndMapBlocksEnterFtraceEvent(),
        Ext4IndMapBlocksExitFtraceEvent(), Ext4InsertRangeFtraceEvent(),
        Ext4InvalidatepageFtraceEvent(), Ext4JournalStartFtraceEvent(),
        Ext4JournalStartReservedFtraceEvent(),
        Ext4JournalledInvalidatepageFtraceEvent(),
        Ext4JournalledWriteEndFtraceEvent(),
        Ext4LoadInodeBitmapFtraceEvent(), Ext4LoadInodeFtraceEvent(),
        Ext4MarkInodeDirtyFtraceEvent(), Ext4MbBitmapLoadFtraceEvent(),
        Ext4MbBuddyBitmapLoadFtraceEvent(),
        Ext4MbDiscardPreallocationsFtraceEvent(),
        Ext4MbNewGroupPaFtraceEvent(), Ext4MbNewInodePaFtraceEvent(),
        Ext4MbReleaseGroupPaFtraceEvent(),
        Ext4MbReleaseInodePaFtraceEvent(), Ext4MballocAllocFtraceEvent(),
        Ext4MballocDiscardFtraceEvent(), Ext4MballocFreeFtraceEvent(),
        Ext4MballocPreallocFtraceEvent(),
        Ext4OtherInodeUpdateTimeFtraceEvent(), Ext4PunchHoleFtraceEvent(),
        Ext4ReadBlockBitmapLoadFtraceEvent(), Ext4ReadpageFtraceEvent(),
        Ext4ReleasepageFtraceEvent(), Ext4RemoveBlocksFtraceEvent(),
        Ext4RequestBlocksFtraceEvent(), Ext4RequestInodeFtraceEvent(),
        Ext4SyncFileEnterFtraceEvent(), Ext4SyncFileExitFtraceEvent(),
        Ext4SyncFsFtraceEvent(), Ext4TrimAllFreeFtraceEvent(),
        Ext4TrimExtentFtraceEvent(), Ext4TruncateEnterFtraceEvent(),
        Ext4TruncateExitFtraceEvent(), Ext4UnlinkEnterFtraceEvent(),
        Ext4UnlinkExitFtraceEvent(), Ext4WriteBeginFtraceEvent(),
        Ext4WriteEndFtraceEvent(), Ext4WritepageFtraceEvent(),
        Ext4WritepagesFtraceEvent(), Ext4WritepagesResultFtraceEvent(),
        Ext4ZeroRangeFtraceEvent()
    ) where
import qualified Data.ProtoLens.Runtime.Control.DeepSeq as Control.DeepSeq
import qualified Data.ProtoLens.Runtime.Data.ProtoLens.Prism as Data.ProtoLens.Prism
import qualified Data.ProtoLens.Runtime.Prelude as Prelude
import qualified Data.ProtoLens.Runtime.Data.Int as Data.Int
import qualified Data.ProtoLens.Runtime.Data.Monoid as Data.Monoid
import qualified Data.ProtoLens.Runtime.Data.Word as Data.Word
import qualified Data.ProtoLens.Runtime.Data.ProtoLens as Data.ProtoLens
import qualified Data.ProtoLens.Runtime.Data.ProtoLens.Encoding.Bytes as Data.ProtoLens.Encoding.Bytes
import qualified Data.ProtoLens.Runtime.Data.ProtoLens.Encoding.Growing as Data.ProtoLens.Encoding.Growing
import qualified Data.ProtoLens.Runtime.Data.ProtoLens.Encoding.Parser.Unsafe as Data.ProtoLens.Encoding.Parser.Unsafe
import qualified Data.ProtoLens.Runtime.Data.ProtoLens.Encoding.Wire as Data.ProtoLens.Encoding.Wire
import qualified Data.ProtoLens.Runtime.Data.ProtoLens.Field as Data.ProtoLens.Field
import qualified Data.ProtoLens.Runtime.Data.ProtoLens.Message.Enum as Data.ProtoLens.Message.Enum
import qualified Data.ProtoLens.Runtime.Data.ProtoLens.Service.Types as Data.ProtoLens.Service.Types
import qualified Data.ProtoLens.Runtime.Lens.Family2 as Lens.Family2
import qualified Data.ProtoLens.Runtime.Lens.Family2.Unchecked as Lens.Family2.Unchecked
import qualified Data.ProtoLens.Runtime.Data.Text as Data.Text
import qualified Data.ProtoLens.Runtime.Data.Map as Data.Map
import qualified Data.ProtoLens.Runtime.Data.ByteString as Data.ByteString
import qualified Data.ProtoLens.Runtime.Data.ByteString.Char8 as Data.ByteString.Char8
import qualified Data.ProtoLens.Runtime.Data.Text.Encoding as Data.Text.Encoding
import qualified Data.ProtoLens.Runtime.Data.Vector as Data.Vector
import qualified Data.ProtoLens.Runtime.Data.Vector.Generic as Data.Vector.Generic
import qualified Data.ProtoLens.Runtime.Data.Vector.Unboxed as Data.Vector.Unboxed
import qualified Data.ProtoLens.Runtime.Text.Read as Text.Read
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4AllocDaBlocksFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4AllocDaBlocksFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4AllocDaBlocksFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4AllocDaBlocksFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dataBlocks' @:: Lens' Ext4AllocDaBlocksFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dataBlocks' @:: Lens' Ext4AllocDaBlocksFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.metaBlocks' @:: Lens' Ext4AllocDaBlocksFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'metaBlocks' @:: Lens' Ext4AllocDaBlocksFtraceEvent (Prelude.Maybe Data.Word.Word32)@ -}
data Ext4AllocDaBlocksFtraceEvent
  = Ext4AllocDaBlocksFtraceEvent'_constructor {_Ext4AllocDaBlocksFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                               _Ext4AllocDaBlocksFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                               _Ext4AllocDaBlocksFtraceEvent'dataBlocks :: !(Prelude.Maybe Data.Word.Word32),
                                               _Ext4AllocDaBlocksFtraceEvent'metaBlocks :: !(Prelude.Maybe Data.Word.Word32),
                                               _Ext4AllocDaBlocksFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4AllocDaBlocksFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4AllocDaBlocksFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4AllocDaBlocksFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4AllocDaBlocksFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4AllocDaBlocksFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4AllocDaBlocksFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4AllocDaBlocksFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4AllocDaBlocksFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4AllocDaBlocksFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4AllocDaBlocksFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4AllocDaBlocksFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4AllocDaBlocksFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4AllocDaBlocksFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4AllocDaBlocksFtraceEvent "dataBlocks" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4AllocDaBlocksFtraceEvent'dataBlocks
           (\ x__ y__
              -> x__ {_Ext4AllocDaBlocksFtraceEvent'dataBlocks = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4AllocDaBlocksFtraceEvent "maybe'dataBlocks" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4AllocDaBlocksFtraceEvent'dataBlocks
           (\ x__ y__
              -> x__ {_Ext4AllocDaBlocksFtraceEvent'dataBlocks = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4AllocDaBlocksFtraceEvent "metaBlocks" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4AllocDaBlocksFtraceEvent'metaBlocks
           (\ x__ y__
              -> x__ {_Ext4AllocDaBlocksFtraceEvent'metaBlocks = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4AllocDaBlocksFtraceEvent "maybe'metaBlocks" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4AllocDaBlocksFtraceEvent'metaBlocks
           (\ x__ y__
              -> x__ {_Ext4AllocDaBlocksFtraceEvent'metaBlocks = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4AllocDaBlocksFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4AllocDaBlocksFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \\FSExt4AllocDaBlocksFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\US\n\
      \\vdata_blocks\CAN\ETX \SOH(\rR\n\
      \dataBlocks\DC2\US\n\
      \\vmeta_blocks\CAN\EOT \SOH(\rR\n\
      \metaBlocks"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4AllocDaBlocksFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4AllocDaBlocksFtraceEvent
        dataBlocks__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "data_blocks"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dataBlocks")) ::
              Data.ProtoLens.FieldDescriptor Ext4AllocDaBlocksFtraceEvent
        metaBlocks__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "meta_blocks"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'metaBlocks")) ::
              Data.ProtoLens.FieldDescriptor Ext4AllocDaBlocksFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, dataBlocks__field_descriptor),
           (Data.ProtoLens.Tag 4, metaBlocks__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4AllocDaBlocksFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__ {_Ext4AllocDaBlocksFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4AllocDaBlocksFtraceEvent'_constructor
        {_Ext4AllocDaBlocksFtraceEvent'dev = Prelude.Nothing,
         _Ext4AllocDaBlocksFtraceEvent'ino = Prelude.Nothing,
         _Ext4AllocDaBlocksFtraceEvent'dataBlocks = Prelude.Nothing,
         _Ext4AllocDaBlocksFtraceEvent'metaBlocks = Prelude.Nothing,
         _Ext4AllocDaBlocksFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4AllocDaBlocksFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4AllocDaBlocksFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "data_blocks"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"dataBlocks") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "meta_blocks"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"metaBlocks") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "Ext4AllocDaBlocksFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view
                          (Data.ProtoLens.Field.field @"maybe'dataBlocks") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view
                             (Data.ProtoLens.Field.field @"maybe'metaBlocks") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                      (Data.ProtoLens.Encoding.Wire.buildFieldSet
                         (Lens.Family2.view Data.ProtoLens.unknownFields _x)))))
instance Control.DeepSeq.NFData Ext4AllocDaBlocksFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4AllocDaBlocksFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4AllocDaBlocksFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4AllocDaBlocksFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4AllocDaBlocksFtraceEvent'dataBlocks x__)
                      (Control.DeepSeq.deepseq
                         (_Ext4AllocDaBlocksFtraceEvent'metaBlocks x__) ()))))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4AllocateBlocksFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4AllocateBlocksFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4AllocateBlocksFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4AllocateBlocksFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.block' @:: Lens' Ext4AllocateBlocksFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'block' @:: Lens' Ext4AllocateBlocksFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.len' @:: Lens' Ext4AllocateBlocksFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'len' @:: Lens' Ext4AllocateBlocksFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.logical' @:: Lens' Ext4AllocateBlocksFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'logical' @:: Lens' Ext4AllocateBlocksFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.lleft' @:: Lens' Ext4AllocateBlocksFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'lleft' @:: Lens' Ext4AllocateBlocksFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.lright' @:: Lens' Ext4AllocateBlocksFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'lright' @:: Lens' Ext4AllocateBlocksFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.goal' @:: Lens' Ext4AllocateBlocksFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'goal' @:: Lens' Ext4AllocateBlocksFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.pleft' @:: Lens' Ext4AllocateBlocksFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'pleft' @:: Lens' Ext4AllocateBlocksFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.pright' @:: Lens' Ext4AllocateBlocksFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'pright' @:: Lens' Ext4AllocateBlocksFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.flags' @:: Lens' Ext4AllocateBlocksFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'flags' @:: Lens' Ext4AllocateBlocksFtraceEvent (Prelude.Maybe Data.Word.Word32)@ -}
data Ext4AllocateBlocksFtraceEvent
  = Ext4AllocateBlocksFtraceEvent'_constructor {_Ext4AllocateBlocksFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                                _Ext4AllocateBlocksFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                                _Ext4AllocateBlocksFtraceEvent'block :: !(Prelude.Maybe Data.Word.Word64),
                                                _Ext4AllocateBlocksFtraceEvent'len :: !(Prelude.Maybe Data.Word.Word32),
                                                _Ext4AllocateBlocksFtraceEvent'logical :: !(Prelude.Maybe Data.Word.Word32),
                                                _Ext4AllocateBlocksFtraceEvent'lleft :: !(Prelude.Maybe Data.Word.Word32),
                                                _Ext4AllocateBlocksFtraceEvent'lright :: !(Prelude.Maybe Data.Word.Word32),
                                                _Ext4AllocateBlocksFtraceEvent'goal :: !(Prelude.Maybe Data.Word.Word64),
                                                _Ext4AllocateBlocksFtraceEvent'pleft :: !(Prelude.Maybe Data.Word.Word64),
                                                _Ext4AllocateBlocksFtraceEvent'pright :: !(Prelude.Maybe Data.Word.Word64),
                                                _Ext4AllocateBlocksFtraceEvent'flags :: !(Prelude.Maybe Data.Word.Word32),
                                                _Ext4AllocateBlocksFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4AllocateBlocksFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4AllocateBlocksFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4AllocateBlocksFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4AllocateBlocksFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4AllocateBlocksFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4AllocateBlocksFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4AllocateBlocksFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4AllocateBlocksFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4AllocateBlocksFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4AllocateBlocksFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4AllocateBlocksFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4AllocateBlocksFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4AllocateBlocksFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4AllocateBlocksFtraceEvent "block" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4AllocateBlocksFtraceEvent'block
           (\ x__ y__ -> x__ {_Ext4AllocateBlocksFtraceEvent'block = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4AllocateBlocksFtraceEvent "maybe'block" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4AllocateBlocksFtraceEvent'block
           (\ x__ y__ -> x__ {_Ext4AllocateBlocksFtraceEvent'block = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4AllocateBlocksFtraceEvent "len" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4AllocateBlocksFtraceEvent'len
           (\ x__ y__ -> x__ {_Ext4AllocateBlocksFtraceEvent'len = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4AllocateBlocksFtraceEvent "maybe'len" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4AllocateBlocksFtraceEvent'len
           (\ x__ y__ -> x__ {_Ext4AllocateBlocksFtraceEvent'len = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4AllocateBlocksFtraceEvent "logical" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4AllocateBlocksFtraceEvent'logical
           (\ x__ y__ -> x__ {_Ext4AllocateBlocksFtraceEvent'logical = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4AllocateBlocksFtraceEvent "maybe'logical" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4AllocateBlocksFtraceEvent'logical
           (\ x__ y__ -> x__ {_Ext4AllocateBlocksFtraceEvent'logical = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4AllocateBlocksFtraceEvent "lleft" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4AllocateBlocksFtraceEvent'lleft
           (\ x__ y__ -> x__ {_Ext4AllocateBlocksFtraceEvent'lleft = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4AllocateBlocksFtraceEvent "maybe'lleft" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4AllocateBlocksFtraceEvent'lleft
           (\ x__ y__ -> x__ {_Ext4AllocateBlocksFtraceEvent'lleft = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4AllocateBlocksFtraceEvent "lright" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4AllocateBlocksFtraceEvent'lright
           (\ x__ y__ -> x__ {_Ext4AllocateBlocksFtraceEvent'lright = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4AllocateBlocksFtraceEvent "maybe'lright" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4AllocateBlocksFtraceEvent'lright
           (\ x__ y__ -> x__ {_Ext4AllocateBlocksFtraceEvent'lright = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4AllocateBlocksFtraceEvent "goal" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4AllocateBlocksFtraceEvent'goal
           (\ x__ y__ -> x__ {_Ext4AllocateBlocksFtraceEvent'goal = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4AllocateBlocksFtraceEvent "maybe'goal" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4AllocateBlocksFtraceEvent'goal
           (\ x__ y__ -> x__ {_Ext4AllocateBlocksFtraceEvent'goal = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4AllocateBlocksFtraceEvent "pleft" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4AllocateBlocksFtraceEvent'pleft
           (\ x__ y__ -> x__ {_Ext4AllocateBlocksFtraceEvent'pleft = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4AllocateBlocksFtraceEvent "maybe'pleft" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4AllocateBlocksFtraceEvent'pleft
           (\ x__ y__ -> x__ {_Ext4AllocateBlocksFtraceEvent'pleft = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4AllocateBlocksFtraceEvent "pright" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4AllocateBlocksFtraceEvent'pright
           (\ x__ y__ -> x__ {_Ext4AllocateBlocksFtraceEvent'pright = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4AllocateBlocksFtraceEvent "maybe'pright" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4AllocateBlocksFtraceEvent'pright
           (\ x__ y__ -> x__ {_Ext4AllocateBlocksFtraceEvent'pright = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4AllocateBlocksFtraceEvent "flags" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4AllocateBlocksFtraceEvent'flags
           (\ x__ y__ -> x__ {_Ext4AllocateBlocksFtraceEvent'flags = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4AllocateBlocksFtraceEvent "maybe'flags" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4AllocateBlocksFtraceEvent'flags
           (\ x__ y__ -> x__ {_Ext4AllocateBlocksFtraceEvent'flags = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4AllocateBlocksFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4AllocateBlocksFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \\GSExt4AllocateBlocksFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DC4\n\
      \\ENQblock\CAN\ETX \SOH(\EOTR\ENQblock\DC2\DLE\n\
      \\ETXlen\CAN\EOT \SOH(\rR\ETXlen\DC2\CAN\n\
      \\alogical\CAN\ENQ \SOH(\rR\alogical\DC2\DC4\n\
      \\ENQlleft\CAN\ACK \SOH(\rR\ENQlleft\DC2\SYN\n\
      \\ACKlright\CAN\a \SOH(\rR\ACKlright\DC2\DC2\n\
      \\EOTgoal\CAN\b \SOH(\EOTR\EOTgoal\DC2\DC4\n\
      \\ENQpleft\CAN\t \SOH(\EOTR\ENQpleft\DC2\SYN\n\
      \\ACKpright\CAN\n\
      \ \SOH(\EOTR\ACKpright\DC2\DC4\n\
      \\ENQflags\CAN\v \SOH(\rR\ENQflags"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4AllocateBlocksFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4AllocateBlocksFtraceEvent
        block__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "block"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'block")) ::
              Data.ProtoLens.FieldDescriptor Ext4AllocateBlocksFtraceEvent
        len__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "len"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'len")) ::
              Data.ProtoLens.FieldDescriptor Ext4AllocateBlocksFtraceEvent
        logical__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "logical"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'logical")) ::
              Data.ProtoLens.FieldDescriptor Ext4AllocateBlocksFtraceEvent
        lleft__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "lleft"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'lleft")) ::
              Data.ProtoLens.FieldDescriptor Ext4AllocateBlocksFtraceEvent
        lright__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "lright"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'lright")) ::
              Data.ProtoLens.FieldDescriptor Ext4AllocateBlocksFtraceEvent
        goal__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "goal"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'goal")) ::
              Data.ProtoLens.FieldDescriptor Ext4AllocateBlocksFtraceEvent
        pleft__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "pleft"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'pleft")) ::
              Data.ProtoLens.FieldDescriptor Ext4AllocateBlocksFtraceEvent
        pright__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "pright"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'pright")) ::
              Data.ProtoLens.FieldDescriptor Ext4AllocateBlocksFtraceEvent
        flags__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "flags"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'flags")) ::
              Data.ProtoLens.FieldDescriptor Ext4AllocateBlocksFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, block__field_descriptor),
           (Data.ProtoLens.Tag 4, len__field_descriptor),
           (Data.ProtoLens.Tag 5, logical__field_descriptor),
           (Data.ProtoLens.Tag 6, lleft__field_descriptor),
           (Data.ProtoLens.Tag 7, lright__field_descriptor),
           (Data.ProtoLens.Tag 8, goal__field_descriptor),
           (Data.ProtoLens.Tag 9, pleft__field_descriptor),
           (Data.ProtoLens.Tag 10, pright__field_descriptor),
           (Data.ProtoLens.Tag 11, flags__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4AllocateBlocksFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__ {_Ext4AllocateBlocksFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4AllocateBlocksFtraceEvent'_constructor
        {_Ext4AllocateBlocksFtraceEvent'dev = Prelude.Nothing,
         _Ext4AllocateBlocksFtraceEvent'ino = Prelude.Nothing,
         _Ext4AllocateBlocksFtraceEvent'block = Prelude.Nothing,
         _Ext4AllocateBlocksFtraceEvent'len = Prelude.Nothing,
         _Ext4AllocateBlocksFtraceEvent'logical = Prelude.Nothing,
         _Ext4AllocateBlocksFtraceEvent'lleft = Prelude.Nothing,
         _Ext4AllocateBlocksFtraceEvent'lright = Prelude.Nothing,
         _Ext4AllocateBlocksFtraceEvent'goal = Prelude.Nothing,
         _Ext4AllocateBlocksFtraceEvent'pleft = Prelude.Nothing,
         _Ext4AllocateBlocksFtraceEvent'pright = Prelude.Nothing,
         _Ext4AllocateBlocksFtraceEvent'flags = Prelude.Nothing,
         _Ext4AllocateBlocksFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4AllocateBlocksFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4AllocateBlocksFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "block"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"block") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "len"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"len") y x)
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "logical"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"logical") y x)
                        48
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "lleft"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"lleft") y x)
                        56
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "lright"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"lright") y x)
                        64
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "goal"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"goal") y x)
                        72
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "pleft"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"pleft") y x)
                        80
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "pright"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"pright") y x)
                        88
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "flags"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"flags") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "Ext4AllocateBlocksFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'block") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'len") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'logical") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral
                                      _v))
                         ((Data.Monoid.<>)
                            (case
                                 Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'lleft") _x
                             of
                               Prelude.Nothing -> Data.Monoid.mempty
                               (Prelude.Just _v)
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 48)
                                      ((Prelude..)
                                         Data.ProtoLens.Encoding.Bytes.putVarInt
                                         Prelude.fromIntegral _v))
                            ((Data.Monoid.<>)
                               (case
                                    Lens.Family2.view
                                      (Data.ProtoLens.Field.field @"maybe'lright") _x
                                of
                                  Prelude.Nothing -> Data.Monoid.mempty
                                  (Prelude.Just _v)
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt 56)
                                         ((Prelude..)
                                            Data.ProtoLens.Encoding.Bytes.putVarInt
                                            Prelude.fromIntegral _v))
                               ((Data.Monoid.<>)
                                  (case
                                       Lens.Family2.view
                                         (Data.ProtoLens.Field.field @"maybe'goal") _x
                                   of
                                     Prelude.Nothing -> Data.Monoid.mempty
                                     (Prelude.Just _v)
                                       -> (Data.Monoid.<>)
                                            (Data.ProtoLens.Encoding.Bytes.putVarInt 64)
                                            (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                                  ((Data.Monoid.<>)
                                     (case
                                          Lens.Family2.view
                                            (Data.ProtoLens.Field.field @"maybe'pleft") _x
                                      of
                                        Prelude.Nothing -> Data.Monoid.mempty
                                        (Prelude.Just _v)
                                          -> (Data.Monoid.<>)
                                               (Data.ProtoLens.Encoding.Bytes.putVarInt 72)
                                               (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                                     ((Data.Monoid.<>)
                                        (case
                                             Lens.Family2.view
                                               (Data.ProtoLens.Field.field @"maybe'pright") _x
                                         of
                                           Prelude.Nothing -> Data.Monoid.mempty
                                           (Prelude.Just _v)
                                             -> (Data.Monoid.<>)
                                                  (Data.ProtoLens.Encoding.Bytes.putVarInt 80)
                                                  (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                                        ((Data.Monoid.<>)
                                           (case
                                                Lens.Family2.view
                                                  (Data.ProtoLens.Field.field @"maybe'flags") _x
                                            of
                                              Prelude.Nothing -> Data.Monoid.mempty
                                              (Prelude.Just _v)
                                                -> (Data.Monoid.<>)
                                                     (Data.ProtoLens.Encoding.Bytes.putVarInt 88)
                                                     ((Prelude..)
                                                        Data.ProtoLens.Encoding.Bytes.putVarInt
                                                        Prelude.fromIntegral _v))
                                           (Data.ProtoLens.Encoding.Wire.buildFieldSet
                                              (Lens.Family2.view
                                                 Data.ProtoLens.unknownFields _x))))))))))))
instance Control.DeepSeq.NFData Ext4AllocateBlocksFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4AllocateBlocksFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4AllocateBlocksFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4AllocateBlocksFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4AllocateBlocksFtraceEvent'block x__)
                      (Control.DeepSeq.deepseq
                         (_Ext4AllocateBlocksFtraceEvent'len x__)
                         (Control.DeepSeq.deepseq
                            (_Ext4AllocateBlocksFtraceEvent'logical x__)
                            (Control.DeepSeq.deepseq
                               (_Ext4AllocateBlocksFtraceEvent'lleft x__)
                               (Control.DeepSeq.deepseq
                                  (_Ext4AllocateBlocksFtraceEvent'lright x__)
                                  (Control.DeepSeq.deepseq
                                     (_Ext4AllocateBlocksFtraceEvent'goal x__)
                                     (Control.DeepSeq.deepseq
                                        (_Ext4AllocateBlocksFtraceEvent'pleft x__)
                                        (Control.DeepSeq.deepseq
                                           (_Ext4AllocateBlocksFtraceEvent'pright x__)
                                           (Control.DeepSeq.deepseq
                                              (_Ext4AllocateBlocksFtraceEvent'flags x__)
                                              ())))))))))))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4AllocateInodeFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4AllocateInodeFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4AllocateInodeFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4AllocateInodeFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dir' @:: Lens' Ext4AllocateInodeFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dir' @:: Lens' Ext4AllocateInodeFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.mode' @:: Lens' Ext4AllocateInodeFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'mode' @:: Lens' Ext4AllocateInodeFtraceEvent (Prelude.Maybe Data.Word.Word32)@ -}
data Ext4AllocateInodeFtraceEvent
  = Ext4AllocateInodeFtraceEvent'_constructor {_Ext4AllocateInodeFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                               _Ext4AllocateInodeFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                               _Ext4AllocateInodeFtraceEvent'dir :: !(Prelude.Maybe Data.Word.Word64),
                                               _Ext4AllocateInodeFtraceEvent'mode :: !(Prelude.Maybe Data.Word.Word32),
                                               _Ext4AllocateInodeFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4AllocateInodeFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4AllocateInodeFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4AllocateInodeFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4AllocateInodeFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4AllocateInodeFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4AllocateInodeFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4AllocateInodeFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4AllocateInodeFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4AllocateInodeFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4AllocateInodeFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4AllocateInodeFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4AllocateInodeFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4AllocateInodeFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4AllocateInodeFtraceEvent "dir" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4AllocateInodeFtraceEvent'dir
           (\ x__ y__ -> x__ {_Ext4AllocateInodeFtraceEvent'dir = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4AllocateInodeFtraceEvent "maybe'dir" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4AllocateInodeFtraceEvent'dir
           (\ x__ y__ -> x__ {_Ext4AllocateInodeFtraceEvent'dir = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4AllocateInodeFtraceEvent "mode" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4AllocateInodeFtraceEvent'mode
           (\ x__ y__ -> x__ {_Ext4AllocateInodeFtraceEvent'mode = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4AllocateInodeFtraceEvent "maybe'mode" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4AllocateInodeFtraceEvent'mode
           (\ x__ y__ -> x__ {_Ext4AllocateInodeFtraceEvent'mode = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4AllocateInodeFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4AllocateInodeFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \\FSExt4AllocateInodeFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DLE\n\
      \\ETXdir\CAN\ETX \SOH(\EOTR\ETXdir\DC2\DC2\n\
      \\EOTmode\CAN\EOT \SOH(\rR\EOTmode"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4AllocateInodeFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4AllocateInodeFtraceEvent
        dir__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dir"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dir")) ::
              Data.ProtoLens.FieldDescriptor Ext4AllocateInodeFtraceEvent
        mode__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "mode"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'mode")) ::
              Data.ProtoLens.FieldDescriptor Ext4AllocateInodeFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, dir__field_descriptor),
           (Data.ProtoLens.Tag 4, mode__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4AllocateInodeFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__ {_Ext4AllocateInodeFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4AllocateInodeFtraceEvent'_constructor
        {_Ext4AllocateInodeFtraceEvent'dev = Prelude.Nothing,
         _Ext4AllocateInodeFtraceEvent'ino = Prelude.Nothing,
         _Ext4AllocateInodeFtraceEvent'dir = Prelude.Nothing,
         _Ext4AllocateInodeFtraceEvent'mode = Prelude.Nothing,
         _Ext4AllocateInodeFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4AllocateInodeFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4AllocateInodeFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dir"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dir") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "mode"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"mode") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "Ext4AllocateInodeFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dir") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'mode") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                      (Data.ProtoLens.Encoding.Wire.buildFieldSet
                         (Lens.Family2.view Data.ProtoLens.unknownFields _x)))))
instance Control.DeepSeq.NFData Ext4AllocateInodeFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4AllocateInodeFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4AllocateInodeFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4AllocateInodeFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4AllocateInodeFtraceEvent'dir x__)
                      (Control.DeepSeq.deepseq
                         (_Ext4AllocateInodeFtraceEvent'mode x__) ()))))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4BeginOrderedTruncateFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4BeginOrderedTruncateFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4BeginOrderedTruncateFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4BeginOrderedTruncateFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.newSize' @:: Lens' Ext4BeginOrderedTruncateFtraceEvent Data.Int.Int64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'newSize' @:: Lens' Ext4BeginOrderedTruncateFtraceEvent (Prelude.Maybe Data.Int.Int64)@ -}
data Ext4BeginOrderedTruncateFtraceEvent
  = Ext4BeginOrderedTruncateFtraceEvent'_constructor {_Ext4BeginOrderedTruncateFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                                      _Ext4BeginOrderedTruncateFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                                      _Ext4BeginOrderedTruncateFtraceEvent'newSize :: !(Prelude.Maybe Data.Int.Int64),
                                                      _Ext4BeginOrderedTruncateFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4BeginOrderedTruncateFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4BeginOrderedTruncateFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4BeginOrderedTruncateFtraceEvent'dev
           (\ x__ y__
              -> x__ {_Ext4BeginOrderedTruncateFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4BeginOrderedTruncateFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4BeginOrderedTruncateFtraceEvent'dev
           (\ x__ y__
              -> x__ {_Ext4BeginOrderedTruncateFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4BeginOrderedTruncateFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4BeginOrderedTruncateFtraceEvent'ino
           (\ x__ y__
              -> x__ {_Ext4BeginOrderedTruncateFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4BeginOrderedTruncateFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4BeginOrderedTruncateFtraceEvent'ino
           (\ x__ y__
              -> x__ {_Ext4BeginOrderedTruncateFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4BeginOrderedTruncateFtraceEvent "newSize" Data.Int.Int64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4BeginOrderedTruncateFtraceEvent'newSize
           (\ x__ y__
              -> x__ {_Ext4BeginOrderedTruncateFtraceEvent'newSize = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4BeginOrderedTruncateFtraceEvent "maybe'newSize" (Prelude.Maybe Data.Int.Int64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4BeginOrderedTruncateFtraceEvent'newSize
           (\ x__ y__
              -> x__ {_Ext4BeginOrderedTruncateFtraceEvent'newSize = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4BeginOrderedTruncateFtraceEvent where
  messageName _
    = Data.Text.pack
        "perfetto.protos.Ext4BeginOrderedTruncateFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \#Ext4BeginOrderedTruncateFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\EM\n\
      \\bnew_size\CAN\ETX \SOH(\ETXR\anewSize"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4BeginOrderedTruncateFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4BeginOrderedTruncateFtraceEvent
        newSize__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "new_size"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'newSize")) ::
              Data.ProtoLens.FieldDescriptor Ext4BeginOrderedTruncateFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, newSize__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4BeginOrderedTruncateFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__ {_Ext4BeginOrderedTruncateFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4BeginOrderedTruncateFtraceEvent'_constructor
        {_Ext4BeginOrderedTruncateFtraceEvent'dev = Prelude.Nothing,
         _Ext4BeginOrderedTruncateFtraceEvent'ino = Prelude.Nothing,
         _Ext4BeginOrderedTruncateFtraceEvent'newSize = Prelude.Nothing,
         _Ext4BeginOrderedTruncateFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4BeginOrderedTruncateFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4BeginOrderedTruncateFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "new_size"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"newSize") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage)
          "Ext4BeginOrderedTruncateFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'newSize") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   (Data.ProtoLens.Encoding.Wire.buildFieldSet
                      (Lens.Family2.view Data.ProtoLens.unknownFields _x))))
instance Control.DeepSeq.NFData Ext4BeginOrderedTruncateFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4BeginOrderedTruncateFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4BeginOrderedTruncateFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4BeginOrderedTruncateFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4BeginOrderedTruncateFtraceEvent'newSize x__) ())))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4CollapseRangeFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4CollapseRangeFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4CollapseRangeFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4CollapseRangeFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.offset' @:: Lens' Ext4CollapseRangeFtraceEvent Data.Int.Int64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'offset' @:: Lens' Ext4CollapseRangeFtraceEvent (Prelude.Maybe Data.Int.Int64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.len' @:: Lens' Ext4CollapseRangeFtraceEvent Data.Int.Int64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'len' @:: Lens' Ext4CollapseRangeFtraceEvent (Prelude.Maybe Data.Int.Int64)@ -}
data Ext4CollapseRangeFtraceEvent
  = Ext4CollapseRangeFtraceEvent'_constructor {_Ext4CollapseRangeFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                               _Ext4CollapseRangeFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                               _Ext4CollapseRangeFtraceEvent'offset :: !(Prelude.Maybe Data.Int.Int64),
                                               _Ext4CollapseRangeFtraceEvent'len :: !(Prelude.Maybe Data.Int.Int64),
                                               _Ext4CollapseRangeFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4CollapseRangeFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4CollapseRangeFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4CollapseRangeFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4CollapseRangeFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4CollapseRangeFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4CollapseRangeFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4CollapseRangeFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4CollapseRangeFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4CollapseRangeFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4CollapseRangeFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4CollapseRangeFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4CollapseRangeFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4CollapseRangeFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4CollapseRangeFtraceEvent "offset" Data.Int.Int64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4CollapseRangeFtraceEvent'offset
           (\ x__ y__ -> x__ {_Ext4CollapseRangeFtraceEvent'offset = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4CollapseRangeFtraceEvent "maybe'offset" (Prelude.Maybe Data.Int.Int64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4CollapseRangeFtraceEvent'offset
           (\ x__ y__ -> x__ {_Ext4CollapseRangeFtraceEvent'offset = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4CollapseRangeFtraceEvent "len" Data.Int.Int64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4CollapseRangeFtraceEvent'len
           (\ x__ y__ -> x__ {_Ext4CollapseRangeFtraceEvent'len = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4CollapseRangeFtraceEvent "maybe'len" (Prelude.Maybe Data.Int.Int64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4CollapseRangeFtraceEvent'len
           (\ x__ y__ -> x__ {_Ext4CollapseRangeFtraceEvent'len = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4CollapseRangeFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4CollapseRangeFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \\FSExt4CollapseRangeFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\SYN\n\
      \\ACKoffset\CAN\ETX \SOH(\ETXR\ACKoffset\DC2\DLE\n\
      \\ETXlen\CAN\EOT \SOH(\ETXR\ETXlen"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4CollapseRangeFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4CollapseRangeFtraceEvent
        offset__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "offset"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'offset")) ::
              Data.ProtoLens.FieldDescriptor Ext4CollapseRangeFtraceEvent
        len__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "len"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'len")) ::
              Data.ProtoLens.FieldDescriptor Ext4CollapseRangeFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, offset__field_descriptor),
           (Data.ProtoLens.Tag 4, len__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4CollapseRangeFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__ {_Ext4CollapseRangeFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4CollapseRangeFtraceEvent'_constructor
        {_Ext4CollapseRangeFtraceEvent'dev = Prelude.Nothing,
         _Ext4CollapseRangeFtraceEvent'ino = Prelude.Nothing,
         _Ext4CollapseRangeFtraceEvent'offset = Prelude.Nothing,
         _Ext4CollapseRangeFtraceEvent'len = Prelude.Nothing,
         _Ext4CollapseRangeFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4CollapseRangeFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4CollapseRangeFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "offset"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"offset") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "len"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"len") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "Ext4CollapseRangeFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'offset") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'len") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                      (Data.ProtoLens.Encoding.Wire.buildFieldSet
                         (Lens.Family2.view Data.ProtoLens.unknownFields _x)))))
instance Control.DeepSeq.NFData Ext4CollapseRangeFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4CollapseRangeFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4CollapseRangeFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4CollapseRangeFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4CollapseRangeFtraceEvent'offset x__)
                      (Control.DeepSeq.deepseq
                         (_Ext4CollapseRangeFtraceEvent'len x__) ()))))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4DaReleaseSpaceFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4DaReleaseSpaceFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4DaReleaseSpaceFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4DaReleaseSpaceFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.iBlocks' @:: Lens' Ext4DaReleaseSpaceFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'iBlocks' @:: Lens' Ext4DaReleaseSpaceFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.freedBlocks' @:: Lens' Ext4DaReleaseSpaceFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'freedBlocks' @:: Lens' Ext4DaReleaseSpaceFtraceEvent (Prelude.Maybe Data.Int.Int32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.reservedDataBlocks' @:: Lens' Ext4DaReleaseSpaceFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'reservedDataBlocks' @:: Lens' Ext4DaReleaseSpaceFtraceEvent (Prelude.Maybe Data.Int.Int32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.reservedMetaBlocks' @:: Lens' Ext4DaReleaseSpaceFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'reservedMetaBlocks' @:: Lens' Ext4DaReleaseSpaceFtraceEvent (Prelude.Maybe Data.Int.Int32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.allocatedMetaBlocks' @:: Lens' Ext4DaReleaseSpaceFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'allocatedMetaBlocks' @:: Lens' Ext4DaReleaseSpaceFtraceEvent (Prelude.Maybe Data.Int.Int32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.mode' @:: Lens' Ext4DaReleaseSpaceFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'mode' @:: Lens' Ext4DaReleaseSpaceFtraceEvent (Prelude.Maybe Data.Word.Word32)@ -}
data Ext4DaReleaseSpaceFtraceEvent
  = Ext4DaReleaseSpaceFtraceEvent'_constructor {_Ext4DaReleaseSpaceFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                                _Ext4DaReleaseSpaceFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                                _Ext4DaReleaseSpaceFtraceEvent'iBlocks :: !(Prelude.Maybe Data.Word.Word64),
                                                _Ext4DaReleaseSpaceFtraceEvent'freedBlocks :: !(Prelude.Maybe Data.Int.Int32),
                                                _Ext4DaReleaseSpaceFtraceEvent'reservedDataBlocks :: !(Prelude.Maybe Data.Int.Int32),
                                                _Ext4DaReleaseSpaceFtraceEvent'reservedMetaBlocks :: !(Prelude.Maybe Data.Int.Int32),
                                                _Ext4DaReleaseSpaceFtraceEvent'allocatedMetaBlocks :: !(Prelude.Maybe Data.Int.Int32),
                                                _Ext4DaReleaseSpaceFtraceEvent'mode :: !(Prelude.Maybe Data.Word.Word32),
                                                _Ext4DaReleaseSpaceFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4DaReleaseSpaceFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4DaReleaseSpaceFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaReleaseSpaceFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4DaReleaseSpaceFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4DaReleaseSpaceFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaReleaseSpaceFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4DaReleaseSpaceFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4DaReleaseSpaceFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaReleaseSpaceFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4DaReleaseSpaceFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4DaReleaseSpaceFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaReleaseSpaceFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4DaReleaseSpaceFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4DaReleaseSpaceFtraceEvent "iBlocks" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaReleaseSpaceFtraceEvent'iBlocks
           (\ x__ y__ -> x__ {_Ext4DaReleaseSpaceFtraceEvent'iBlocks = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4DaReleaseSpaceFtraceEvent "maybe'iBlocks" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaReleaseSpaceFtraceEvent'iBlocks
           (\ x__ y__ -> x__ {_Ext4DaReleaseSpaceFtraceEvent'iBlocks = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4DaReleaseSpaceFtraceEvent "freedBlocks" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaReleaseSpaceFtraceEvent'freedBlocks
           (\ x__ y__
              -> x__ {_Ext4DaReleaseSpaceFtraceEvent'freedBlocks = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4DaReleaseSpaceFtraceEvent "maybe'freedBlocks" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaReleaseSpaceFtraceEvent'freedBlocks
           (\ x__ y__
              -> x__ {_Ext4DaReleaseSpaceFtraceEvent'freedBlocks = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4DaReleaseSpaceFtraceEvent "reservedDataBlocks" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaReleaseSpaceFtraceEvent'reservedDataBlocks
           (\ x__ y__
              -> x__ {_Ext4DaReleaseSpaceFtraceEvent'reservedDataBlocks = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4DaReleaseSpaceFtraceEvent "maybe'reservedDataBlocks" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaReleaseSpaceFtraceEvent'reservedDataBlocks
           (\ x__ y__
              -> x__ {_Ext4DaReleaseSpaceFtraceEvent'reservedDataBlocks = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4DaReleaseSpaceFtraceEvent "reservedMetaBlocks" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaReleaseSpaceFtraceEvent'reservedMetaBlocks
           (\ x__ y__
              -> x__ {_Ext4DaReleaseSpaceFtraceEvent'reservedMetaBlocks = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4DaReleaseSpaceFtraceEvent "maybe'reservedMetaBlocks" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaReleaseSpaceFtraceEvent'reservedMetaBlocks
           (\ x__ y__
              -> x__ {_Ext4DaReleaseSpaceFtraceEvent'reservedMetaBlocks = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4DaReleaseSpaceFtraceEvent "allocatedMetaBlocks" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaReleaseSpaceFtraceEvent'allocatedMetaBlocks
           (\ x__ y__
              -> x__ {_Ext4DaReleaseSpaceFtraceEvent'allocatedMetaBlocks = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4DaReleaseSpaceFtraceEvent "maybe'allocatedMetaBlocks" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaReleaseSpaceFtraceEvent'allocatedMetaBlocks
           (\ x__ y__
              -> x__ {_Ext4DaReleaseSpaceFtraceEvent'allocatedMetaBlocks = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4DaReleaseSpaceFtraceEvent "mode" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaReleaseSpaceFtraceEvent'mode
           (\ x__ y__ -> x__ {_Ext4DaReleaseSpaceFtraceEvent'mode = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4DaReleaseSpaceFtraceEvent "maybe'mode" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaReleaseSpaceFtraceEvent'mode
           (\ x__ y__ -> x__ {_Ext4DaReleaseSpaceFtraceEvent'mode = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4DaReleaseSpaceFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4DaReleaseSpaceFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \\GSExt4DaReleaseSpaceFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\EM\n\
      \\bi_blocks\CAN\ETX \SOH(\EOTR\aiBlocks\DC2!\n\
      \\ffreed_blocks\CAN\EOT \SOH(\ENQR\vfreedBlocks\DC20\n\
      \\DC4reserved_data_blocks\CAN\ENQ \SOH(\ENQR\DC2reservedDataBlocks\DC20\n\
      \\DC4reserved_meta_blocks\CAN\ACK \SOH(\ENQR\DC2reservedMetaBlocks\DC22\n\
      \\NAKallocated_meta_blocks\CAN\a \SOH(\ENQR\DC3allocatedMetaBlocks\DC2\DC2\n\
      \\EOTmode\CAN\b \SOH(\rR\EOTmode"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4DaReleaseSpaceFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4DaReleaseSpaceFtraceEvent
        iBlocks__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "i_blocks"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'iBlocks")) ::
              Data.ProtoLens.FieldDescriptor Ext4DaReleaseSpaceFtraceEvent
        freedBlocks__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "freed_blocks"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'freedBlocks")) ::
              Data.ProtoLens.FieldDescriptor Ext4DaReleaseSpaceFtraceEvent
        reservedDataBlocks__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "reserved_data_blocks"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'reservedDataBlocks")) ::
              Data.ProtoLens.FieldDescriptor Ext4DaReleaseSpaceFtraceEvent
        reservedMetaBlocks__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "reserved_meta_blocks"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'reservedMetaBlocks")) ::
              Data.ProtoLens.FieldDescriptor Ext4DaReleaseSpaceFtraceEvent
        allocatedMetaBlocks__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "allocated_meta_blocks"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'allocatedMetaBlocks")) ::
              Data.ProtoLens.FieldDescriptor Ext4DaReleaseSpaceFtraceEvent
        mode__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "mode"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'mode")) ::
              Data.ProtoLens.FieldDescriptor Ext4DaReleaseSpaceFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, iBlocks__field_descriptor),
           (Data.ProtoLens.Tag 4, freedBlocks__field_descriptor),
           (Data.ProtoLens.Tag 5, reservedDataBlocks__field_descriptor),
           (Data.ProtoLens.Tag 6, reservedMetaBlocks__field_descriptor),
           (Data.ProtoLens.Tag 7, allocatedMetaBlocks__field_descriptor),
           (Data.ProtoLens.Tag 8, mode__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4DaReleaseSpaceFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__ {_Ext4DaReleaseSpaceFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4DaReleaseSpaceFtraceEvent'_constructor
        {_Ext4DaReleaseSpaceFtraceEvent'dev = Prelude.Nothing,
         _Ext4DaReleaseSpaceFtraceEvent'ino = Prelude.Nothing,
         _Ext4DaReleaseSpaceFtraceEvent'iBlocks = Prelude.Nothing,
         _Ext4DaReleaseSpaceFtraceEvent'freedBlocks = Prelude.Nothing,
         _Ext4DaReleaseSpaceFtraceEvent'reservedDataBlocks = Prelude.Nothing,
         _Ext4DaReleaseSpaceFtraceEvent'reservedMetaBlocks = Prelude.Nothing,
         _Ext4DaReleaseSpaceFtraceEvent'allocatedMetaBlocks = Prelude.Nothing,
         _Ext4DaReleaseSpaceFtraceEvent'mode = Prelude.Nothing,
         _Ext4DaReleaseSpaceFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4DaReleaseSpaceFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4DaReleaseSpaceFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "i_blocks"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"iBlocks") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "freed_blocks"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"freedBlocks") y x)
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "reserved_data_blocks"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"reservedDataBlocks") y x)
                        48
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "reserved_meta_blocks"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"reservedMetaBlocks") y x)
                        56
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "allocated_meta_blocks"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"allocatedMetaBlocks") y x)
                        64
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "mode"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"mode") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "Ext4DaReleaseSpaceFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'iBlocks") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view
                             (Data.ProtoLens.Field.field @"maybe'freedBlocks") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view
                                (Data.ProtoLens.Field.field @"maybe'reservedDataBlocks") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral
                                      _v))
                         ((Data.Monoid.<>)
                            (case
                                 Lens.Family2.view
                                   (Data.ProtoLens.Field.field @"maybe'reservedMetaBlocks") _x
                             of
                               Prelude.Nothing -> Data.Monoid.mempty
                               (Prelude.Just _v)
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 48)
                                      ((Prelude..)
                                         Data.ProtoLens.Encoding.Bytes.putVarInt
                                         Prelude.fromIntegral _v))
                            ((Data.Monoid.<>)
                               (case
                                    Lens.Family2.view
                                      (Data.ProtoLens.Field.field @"maybe'allocatedMetaBlocks") _x
                                of
                                  Prelude.Nothing -> Data.Monoid.mempty
                                  (Prelude.Just _v)
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt 56)
                                         ((Prelude..)
                                            Data.ProtoLens.Encoding.Bytes.putVarInt
                                            Prelude.fromIntegral _v))
                               ((Data.Monoid.<>)
                                  (case
                                       Lens.Family2.view
                                         (Data.ProtoLens.Field.field @"maybe'mode") _x
                                   of
                                     Prelude.Nothing -> Data.Monoid.mempty
                                     (Prelude.Just _v)
                                       -> (Data.Monoid.<>)
                                            (Data.ProtoLens.Encoding.Bytes.putVarInt 64)
                                            ((Prelude..)
                                               Data.ProtoLens.Encoding.Bytes.putVarInt
                                               Prelude.fromIntegral _v))
                                  (Data.ProtoLens.Encoding.Wire.buildFieldSet
                                     (Lens.Family2.view Data.ProtoLens.unknownFields _x)))))))))
instance Control.DeepSeq.NFData Ext4DaReleaseSpaceFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4DaReleaseSpaceFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4DaReleaseSpaceFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4DaReleaseSpaceFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4DaReleaseSpaceFtraceEvent'iBlocks x__)
                      (Control.DeepSeq.deepseq
                         (_Ext4DaReleaseSpaceFtraceEvent'freedBlocks x__)
                         (Control.DeepSeq.deepseq
                            (_Ext4DaReleaseSpaceFtraceEvent'reservedDataBlocks x__)
                            (Control.DeepSeq.deepseq
                               (_Ext4DaReleaseSpaceFtraceEvent'reservedMetaBlocks x__)
                               (Control.DeepSeq.deepseq
                                  (_Ext4DaReleaseSpaceFtraceEvent'allocatedMetaBlocks x__)
                                  (Control.DeepSeq.deepseq
                                     (_Ext4DaReleaseSpaceFtraceEvent'mode x__) ()))))))))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4DaReserveSpaceFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4DaReserveSpaceFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4DaReserveSpaceFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4DaReserveSpaceFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.iBlocks' @:: Lens' Ext4DaReserveSpaceFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'iBlocks' @:: Lens' Ext4DaReserveSpaceFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.reservedDataBlocks' @:: Lens' Ext4DaReserveSpaceFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'reservedDataBlocks' @:: Lens' Ext4DaReserveSpaceFtraceEvent (Prelude.Maybe Data.Int.Int32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.reservedMetaBlocks' @:: Lens' Ext4DaReserveSpaceFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'reservedMetaBlocks' @:: Lens' Ext4DaReserveSpaceFtraceEvent (Prelude.Maybe Data.Int.Int32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.mode' @:: Lens' Ext4DaReserveSpaceFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'mode' @:: Lens' Ext4DaReserveSpaceFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.mdNeeded' @:: Lens' Ext4DaReserveSpaceFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'mdNeeded' @:: Lens' Ext4DaReserveSpaceFtraceEvent (Prelude.Maybe Data.Int.Int32)@ -}
data Ext4DaReserveSpaceFtraceEvent
  = Ext4DaReserveSpaceFtraceEvent'_constructor {_Ext4DaReserveSpaceFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                                _Ext4DaReserveSpaceFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                                _Ext4DaReserveSpaceFtraceEvent'iBlocks :: !(Prelude.Maybe Data.Word.Word64),
                                                _Ext4DaReserveSpaceFtraceEvent'reservedDataBlocks :: !(Prelude.Maybe Data.Int.Int32),
                                                _Ext4DaReserveSpaceFtraceEvent'reservedMetaBlocks :: !(Prelude.Maybe Data.Int.Int32),
                                                _Ext4DaReserveSpaceFtraceEvent'mode :: !(Prelude.Maybe Data.Word.Word32),
                                                _Ext4DaReserveSpaceFtraceEvent'mdNeeded :: !(Prelude.Maybe Data.Int.Int32),
                                                _Ext4DaReserveSpaceFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4DaReserveSpaceFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4DaReserveSpaceFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaReserveSpaceFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4DaReserveSpaceFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4DaReserveSpaceFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaReserveSpaceFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4DaReserveSpaceFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4DaReserveSpaceFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaReserveSpaceFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4DaReserveSpaceFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4DaReserveSpaceFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaReserveSpaceFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4DaReserveSpaceFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4DaReserveSpaceFtraceEvent "iBlocks" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaReserveSpaceFtraceEvent'iBlocks
           (\ x__ y__ -> x__ {_Ext4DaReserveSpaceFtraceEvent'iBlocks = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4DaReserveSpaceFtraceEvent "maybe'iBlocks" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaReserveSpaceFtraceEvent'iBlocks
           (\ x__ y__ -> x__ {_Ext4DaReserveSpaceFtraceEvent'iBlocks = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4DaReserveSpaceFtraceEvent "reservedDataBlocks" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaReserveSpaceFtraceEvent'reservedDataBlocks
           (\ x__ y__
              -> x__ {_Ext4DaReserveSpaceFtraceEvent'reservedDataBlocks = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4DaReserveSpaceFtraceEvent "maybe'reservedDataBlocks" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaReserveSpaceFtraceEvent'reservedDataBlocks
           (\ x__ y__
              -> x__ {_Ext4DaReserveSpaceFtraceEvent'reservedDataBlocks = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4DaReserveSpaceFtraceEvent "reservedMetaBlocks" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaReserveSpaceFtraceEvent'reservedMetaBlocks
           (\ x__ y__
              -> x__ {_Ext4DaReserveSpaceFtraceEvent'reservedMetaBlocks = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4DaReserveSpaceFtraceEvent "maybe'reservedMetaBlocks" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaReserveSpaceFtraceEvent'reservedMetaBlocks
           (\ x__ y__
              -> x__ {_Ext4DaReserveSpaceFtraceEvent'reservedMetaBlocks = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4DaReserveSpaceFtraceEvent "mode" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaReserveSpaceFtraceEvent'mode
           (\ x__ y__ -> x__ {_Ext4DaReserveSpaceFtraceEvent'mode = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4DaReserveSpaceFtraceEvent "maybe'mode" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaReserveSpaceFtraceEvent'mode
           (\ x__ y__ -> x__ {_Ext4DaReserveSpaceFtraceEvent'mode = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4DaReserveSpaceFtraceEvent "mdNeeded" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaReserveSpaceFtraceEvent'mdNeeded
           (\ x__ y__ -> x__ {_Ext4DaReserveSpaceFtraceEvent'mdNeeded = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4DaReserveSpaceFtraceEvent "maybe'mdNeeded" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaReserveSpaceFtraceEvent'mdNeeded
           (\ x__ y__ -> x__ {_Ext4DaReserveSpaceFtraceEvent'mdNeeded = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4DaReserveSpaceFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4DaReserveSpaceFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \\GSExt4DaReserveSpaceFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\EM\n\
      \\bi_blocks\CAN\ETX \SOH(\EOTR\aiBlocks\DC20\n\
      \\DC4reserved_data_blocks\CAN\EOT \SOH(\ENQR\DC2reservedDataBlocks\DC20\n\
      \\DC4reserved_meta_blocks\CAN\ENQ \SOH(\ENQR\DC2reservedMetaBlocks\DC2\DC2\n\
      \\EOTmode\CAN\ACK \SOH(\rR\EOTmode\DC2\ESC\n\
      \\tmd_needed\CAN\a \SOH(\ENQR\bmdNeeded"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4DaReserveSpaceFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4DaReserveSpaceFtraceEvent
        iBlocks__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "i_blocks"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'iBlocks")) ::
              Data.ProtoLens.FieldDescriptor Ext4DaReserveSpaceFtraceEvent
        reservedDataBlocks__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "reserved_data_blocks"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'reservedDataBlocks")) ::
              Data.ProtoLens.FieldDescriptor Ext4DaReserveSpaceFtraceEvent
        reservedMetaBlocks__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "reserved_meta_blocks"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'reservedMetaBlocks")) ::
              Data.ProtoLens.FieldDescriptor Ext4DaReserveSpaceFtraceEvent
        mode__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "mode"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'mode")) ::
              Data.ProtoLens.FieldDescriptor Ext4DaReserveSpaceFtraceEvent
        mdNeeded__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "md_needed"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'mdNeeded")) ::
              Data.ProtoLens.FieldDescriptor Ext4DaReserveSpaceFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, iBlocks__field_descriptor),
           (Data.ProtoLens.Tag 4, reservedDataBlocks__field_descriptor),
           (Data.ProtoLens.Tag 5, reservedMetaBlocks__field_descriptor),
           (Data.ProtoLens.Tag 6, mode__field_descriptor),
           (Data.ProtoLens.Tag 7, mdNeeded__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4DaReserveSpaceFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__ {_Ext4DaReserveSpaceFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4DaReserveSpaceFtraceEvent'_constructor
        {_Ext4DaReserveSpaceFtraceEvent'dev = Prelude.Nothing,
         _Ext4DaReserveSpaceFtraceEvent'ino = Prelude.Nothing,
         _Ext4DaReserveSpaceFtraceEvent'iBlocks = Prelude.Nothing,
         _Ext4DaReserveSpaceFtraceEvent'reservedDataBlocks = Prelude.Nothing,
         _Ext4DaReserveSpaceFtraceEvent'reservedMetaBlocks = Prelude.Nothing,
         _Ext4DaReserveSpaceFtraceEvent'mode = Prelude.Nothing,
         _Ext4DaReserveSpaceFtraceEvent'mdNeeded = Prelude.Nothing,
         _Ext4DaReserveSpaceFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4DaReserveSpaceFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4DaReserveSpaceFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "i_blocks"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"iBlocks") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "reserved_data_blocks"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"reservedDataBlocks") y x)
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "reserved_meta_blocks"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"reservedMetaBlocks") y x)
                        48
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "mode"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"mode") y x)
                        56
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "md_needed"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"mdNeeded") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "Ext4DaReserveSpaceFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'iBlocks") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view
                             (Data.ProtoLens.Field.field @"maybe'reservedDataBlocks") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view
                                (Data.ProtoLens.Field.field @"maybe'reservedMetaBlocks") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral
                                      _v))
                         ((Data.Monoid.<>)
                            (case
                                 Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'mode") _x
                             of
                               Prelude.Nothing -> Data.Monoid.mempty
                               (Prelude.Just _v)
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 48)
                                      ((Prelude..)
                                         Data.ProtoLens.Encoding.Bytes.putVarInt
                                         Prelude.fromIntegral _v))
                            ((Data.Monoid.<>)
                               (case
                                    Lens.Family2.view
                                      (Data.ProtoLens.Field.field @"maybe'mdNeeded") _x
                                of
                                  Prelude.Nothing -> Data.Monoid.mempty
                                  (Prelude.Just _v)
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt 56)
                                         ((Prelude..)
                                            Data.ProtoLens.Encoding.Bytes.putVarInt
                                            Prelude.fromIntegral _v))
                               (Data.ProtoLens.Encoding.Wire.buildFieldSet
                                  (Lens.Family2.view Data.ProtoLens.unknownFields _x))))))))
instance Control.DeepSeq.NFData Ext4DaReserveSpaceFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4DaReserveSpaceFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4DaReserveSpaceFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4DaReserveSpaceFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4DaReserveSpaceFtraceEvent'iBlocks x__)
                      (Control.DeepSeq.deepseq
                         (_Ext4DaReserveSpaceFtraceEvent'reservedDataBlocks x__)
                         (Control.DeepSeq.deepseq
                            (_Ext4DaReserveSpaceFtraceEvent'reservedMetaBlocks x__)
                            (Control.DeepSeq.deepseq
                               (_Ext4DaReserveSpaceFtraceEvent'mode x__)
                               (Control.DeepSeq.deepseq
                                  (_Ext4DaReserveSpaceFtraceEvent'mdNeeded x__) ())))))))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4DaUpdateReserveSpaceFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4DaUpdateReserveSpaceFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4DaUpdateReserveSpaceFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4DaUpdateReserveSpaceFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.iBlocks' @:: Lens' Ext4DaUpdateReserveSpaceFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'iBlocks' @:: Lens' Ext4DaUpdateReserveSpaceFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.usedBlocks' @:: Lens' Ext4DaUpdateReserveSpaceFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'usedBlocks' @:: Lens' Ext4DaUpdateReserveSpaceFtraceEvent (Prelude.Maybe Data.Int.Int32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.reservedDataBlocks' @:: Lens' Ext4DaUpdateReserveSpaceFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'reservedDataBlocks' @:: Lens' Ext4DaUpdateReserveSpaceFtraceEvent (Prelude.Maybe Data.Int.Int32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.reservedMetaBlocks' @:: Lens' Ext4DaUpdateReserveSpaceFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'reservedMetaBlocks' @:: Lens' Ext4DaUpdateReserveSpaceFtraceEvent (Prelude.Maybe Data.Int.Int32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.allocatedMetaBlocks' @:: Lens' Ext4DaUpdateReserveSpaceFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'allocatedMetaBlocks' @:: Lens' Ext4DaUpdateReserveSpaceFtraceEvent (Prelude.Maybe Data.Int.Int32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.quotaClaim' @:: Lens' Ext4DaUpdateReserveSpaceFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'quotaClaim' @:: Lens' Ext4DaUpdateReserveSpaceFtraceEvent (Prelude.Maybe Data.Int.Int32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.mode' @:: Lens' Ext4DaUpdateReserveSpaceFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'mode' @:: Lens' Ext4DaUpdateReserveSpaceFtraceEvent (Prelude.Maybe Data.Word.Word32)@ -}
data Ext4DaUpdateReserveSpaceFtraceEvent
  = Ext4DaUpdateReserveSpaceFtraceEvent'_constructor {_Ext4DaUpdateReserveSpaceFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                                      _Ext4DaUpdateReserveSpaceFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                                      _Ext4DaUpdateReserveSpaceFtraceEvent'iBlocks :: !(Prelude.Maybe Data.Word.Word64),
                                                      _Ext4DaUpdateReserveSpaceFtraceEvent'usedBlocks :: !(Prelude.Maybe Data.Int.Int32),
                                                      _Ext4DaUpdateReserveSpaceFtraceEvent'reservedDataBlocks :: !(Prelude.Maybe Data.Int.Int32),
                                                      _Ext4DaUpdateReserveSpaceFtraceEvent'reservedMetaBlocks :: !(Prelude.Maybe Data.Int.Int32),
                                                      _Ext4DaUpdateReserveSpaceFtraceEvent'allocatedMetaBlocks :: !(Prelude.Maybe Data.Int.Int32),
                                                      _Ext4DaUpdateReserveSpaceFtraceEvent'quotaClaim :: !(Prelude.Maybe Data.Int.Int32),
                                                      _Ext4DaUpdateReserveSpaceFtraceEvent'mode :: !(Prelude.Maybe Data.Word.Word32),
                                                      _Ext4DaUpdateReserveSpaceFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4DaUpdateReserveSpaceFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4DaUpdateReserveSpaceFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaUpdateReserveSpaceFtraceEvent'dev
           (\ x__ y__
              -> x__ {_Ext4DaUpdateReserveSpaceFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4DaUpdateReserveSpaceFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaUpdateReserveSpaceFtraceEvent'dev
           (\ x__ y__
              -> x__ {_Ext4DaUpdateReserveSpaceFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4DaUpdateReserveSpaceFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaUpdateReserveSpaceFtraceEvent'ino
           (\ x__ y__
              -> x__ {_Ext4DaUpdateReserveSpaceFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4DaUpdateReserveSpaceFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaUpdateReserveSpaceFtraceEvent'ino
           (\ x__ y__
              -> x__ {_Ext4DaUpdateReserveSpaceFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4DaUpdateReserveSpaceFtraceEvent "iBlocks" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaUpdateReserveSpaceFtraceEvent'iBlocks
           (\ x__ y__
              -> x__ {_Ext4DaUpdateReserveSpaceFtraceEvent'iBlocks = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4DaUpdateReserveSpaceFtraceEvent "maybe'iBlocks" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaUpdateReserveSpaceFtraceEvent'iBlocks
           (\ x__ y__
              -> x__ {_Ext4DaUpdateReserveSpaceFtraceEvent'iBlocks = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4DaUpdateReserveSpaceFtraceEvent "usedBlocks" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaUpdateReserveSpaceFtraceEvent'usedBlocks
           (\ x__ y__
              -> x__ {_Ext4DaUpdateReserveSpaceFtraceEvent'usedBlocks = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4DaUpdateReserveSpaceFtraceEvent "maybe'usedBlocks" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaUpdateReserveSpaceFtraceEvent'usedBlocks
           (\ x__ y__
              -> x__ {_Ext4DaUpdateReserveSpaceFtraceEvent'usedBlocks = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4DaUpdateReserveSpaceFtraceEvent "reservedDataBlocks" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaUpdateReserveSpaceFtraceEvent'reservedDataBlocks
           (\ x__ y__
              -> x__
                   {_Ext4DaUpdateReserveSpaceFtraceEvent'reservedDataBlocks = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4DaUpdateReserveSpaceFtraceEvent "maybe'reservedDataBlocks" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaUpdateReserveSpaceFtraceEvent'reservedDataBlocks
           (\ x__ y__
              -> x__
                   {_Ext4DaUpdateReserveSpaceFtraceEvent'reservedDataBlocks = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4DaUpdateReserveSpaceFtraceEvent "reservedMetaBlocks" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaUpdateReserveSpaceFtraceEvent'reservedMetaBlocks
           (\ x__ y__
              -> x__
                   {_Ext4DaUpdateReserveSpaceFtraceEvent'reservedMetaBlocks = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4DaUpdateReserveSpaceFtraceEvent "maybe'reservedMetaBlocks" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaUpdateReserveSpaceFtraceEvent'reservedMetaBlocks
           (\ x__ y__
              -> x__
                   {_Ext4DaUpdateReserveSpaceFtraceEvent'reservedMetaBlocks = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4DaUpdateReserveSpaceFtraceEvent "allocatedMetaBlocks" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaUpdateReserveSpaceFtraceEvent'allocatedMetaBlocks
           (\ x__ y__
              -> x__
                   {_Ext4DaUpdateReserveSpaceFtraceEvent'allocatedMetaBlocks = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4DaUpdateReserveSpaceFtraceEvent "maybe'allocatedMetaBlocks" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaUpdateReserveSpaceFtraceEvent'allocatedMetaBlocks
           (\ x__ y__
              -> x__
                   {_Ext4DaUpdateReserveSpaceFtraceEvent'allocatedMetaBlocks = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4DaUpdateReserveSpaceFtraceEvent "quotaClaim" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaUpdateReserveSpaceFtraceEvent'quotaClaim
           (\ x__ y__
              -> x__ {_Ext4DaUpdateReserveSpaceFtraceEvent'quotaClaim = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4DaUpdateReserveSpaceFtraceEvent "maybe'quotaClaim" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaUpdateReserveSpaceFtraceEvent'quotaClaim
           (\ x__ y__
              -> x__ {_Ext4DaUpdateReserveSpaceFtraceEvent'quotaClaim = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4DaUpdateReserveSpaceFtraceEvent "mode" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaUpdateReserveSpaceFtraceEvent'mode
           (\ x__ y__
              -> x__ {_Ext4DaUpdateReserveSpaceFtraceEvent'mode = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4DaUpdateReserveSpaceFtraceEvent "maybe'mode" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaUpdateReserveSpaceFtraceEvent'mode
           (\ x__ y__
              -> x__ {_Ext4DaUpdateReserveSpaceFtraceEvent'mode = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4DaUpdateReserveSpaceFtraceEvent where
  messageName _
    = Data.Text.pack
        "perfetto.protos.Ext4DaUpdateReserveSpaceFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \#Ext4DaUpdateReserveSpaceFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\EM\n\
      \\bi_blocks\CAN\ETX \SOH(\EOTR\aiBlocks\DC2\US\n\
      \\vused_blocks\CAN\EOT \SOH(\ENQR\n\
      \usedBlocks\DC20\n\
      \\DC4reserved_data_blocks\CAN\ENQ \SOH(\ENQR\DC2reservedDataBlocks\DC20\n\
      \\DC4reserved_meta_blocks\CAN\ACK \SOH(\ENQR\DC2reservedMetaBlocks\DC22\n\
      \\NAKallocated_meta_blocks\CAN\a \SOH(\ENQR\DC3allocatedMetaBlocks\DC2\US\n\
      \\vquota_claim\CAN\b \SOH(\ENQR\n\
      \quotaClaim\DC2\DC2\n\
      \\EOTmode\CAN\t \SOH(\rR\EOTmode"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4DaUpdateReserveSpaceFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4DaUpdateReserveSpaceFtraceEvent
        iBlocks__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "i_blocks"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'iBlocks")) ::
              Data.ProtoLens.FieldDescriptor Ext4DaUpdateReserveSpaceFtraceEvent
        usedBlocks__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "used_blocks"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'usedBlocks")) ::
              Data.ProtoLens.FieldDescriptor Ext4DaUpdateReserveSpaceFtraceEvent
        reservedDataBlocks__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "reserved_data_blocks"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'reservedDataBlocks")) ::
              Data.ProtoLens.FieldDescriptor Ext4DaUpdateReserveSpaceFtraceEvent
        reservedMetaBlocks__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "reserved_meta_blocks"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'reservedMetaBlocks")) ::
              Data.ProtoLens.FieldDescriptor Ext4DaUpdateReserveSpaceFtraceEvent
        allocatedMetaBlocks__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "allocated_meta_blocks"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'allocatedMetaBlocks")) ::
              Data.ProtoLens.FieldDescriptor Ext4DaUpdateReserveSpaceFtraceEvent
        quotaClaim__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "quota_claim"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'quotaClaim")) ::
              Data.ProtoLens.FieldDescriptor Ext4DaUpdateReserveSpaceFtraceEvent
        mode__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "mode"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'mode")) ::
              Data.ProtoLens.FieldDescriptor Ext4DaUpdateReserveSpaceFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, iBlocks__field_descriptor),
           (Data.ProtoLens.Tag 4, usedBlocks__field_descriptor),
           (Data.ProtoLens.Tag 5, reservedDataBlocks__field_descriptor),
           (Data.ProtoLens.Tag 6, reservedMetaBlocks__field_descriptor),
           (Data.ProtoLens.Tag 7, allocatedMetaBlocks__field_descriptor),
           (Data.ProtoLens.Tag 8, quotaClaim__field_descriptor),
           (Data.ProtoLens.Tag 9, mode__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4DaUpdateReserveSpaceFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__ {_Ext4DaUpdateReserveSpaceFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4DaUpdateReserveSpaceFtraceEvent'_constructor
        {_Ext4DaUpdateReserveSpaceFtraceEvent'dev = Prelude.Nothing,
         _Ext4DaUpdateReserveSpaceFtraceEvent'ino = Prelude.Nothing,
         _Ext4DaUpdateReserveSpaceFtraceEvent'iBlocks = Prelude.Nothing,
         _Ext4DaUpdateReserveSpaceFtraceEvent'usedBlocks = Prelude.Nothing,
         _Ext4DaUpdateReserveSpaceFtraceEvent'reservedDataBlocks = Prelude.Nothing,
         _Ext4DaUpdateReserveSpaceFtraceEvent'reservedMetaBlocks = Prelude.Nothing,
         _Ext4DaUpdateReserveSpaceFtraceEvent'allocatedMetaBlocks = Prelude.Nothing,
         _Ext4DaUpdateReserveSpaceFtraceEvent'quotaClaim = Prelude.Nothing,
         _Ext4DaUpdateReserveSpaceFtraceEvent'mode = Prelude.Nothing,
         _Ext4DaUpdateReserveSpaceFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4DaUpdateReserveSpaceFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4DaUpdateReserveSpaceFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "i_blocks"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"iBlocks") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "used_blocks"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"usedBlocks") y x)
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "reserved_data_blocks"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"reservedDataBlocks") y x)
                        48
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "reserved_meta_blocks"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"reservedMetaBlocks") y x)
                        56
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "allocated_meta_blocks"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"allocatedMetaBlocks") y x)
                        64
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "quota_claim"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"quotaClaim") y x)
                        72
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "mode"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"mode") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage)
          "Ext4DaUpdateReserveSpaceFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'iBlocks") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view
                             (Data.ProtoLens.Field.field @"maybe'usedBlocks") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view
                                (Data.ProtoLens.Field.field @"maybe'reservedDataBlocks") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral
                                      _v))
                         ((Data.Monoid.<>)
                            (case
                                 Lens.Family2.view
                                   (Data.ProtoLens.Field.field @"maybe'reservedMetaBlocks") _x
                             of
                               Prelude.Nothing -> Data.Monoid.mempty
                               (Prelude.Just _v)
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 48)
                                      ((Prelude..)
                                         Data.ProtoLens.Encoding.Bytes.putVarInt
                                         Prelude.fromIntegral _v))
                            ((Data.Monoid.<>)
                               (case
                                    Lens.Family2.view
                                      (Data.ProtoLens.Field.field @"maybe'allocatedMetaBlocks") _x
                                of
                                  Prelude.Nothing -> Data.Monoid.mempty
                                  (Prelude.Just _v)
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt 56)
                                         ((Prelude..)
                                            Data.ProtoLens.Encoding.Bytes.putVarInt
                                            Prelude.fromIntegral _v))
                               ((Data.Monoid.<>)
                                  (case
                                       Lens.Family2.view
                                         (Data.ProtoLens.Field.field @"maybe'quotaClaim") _x
                                   of
                                     Prelude.Nothing -> Data.Monoid.mempty
                                     (Prelude.Just _v)
                                       -> (Data.Monoid.<>)
                                            (Data.ProtoLens.Encoding.Bytes.putVarInt 64)
                                            ((Prelude..)
                                               Data.ProtoLens.Encoding.Bytes.putVarInt
                                               Prelude.fromIntegral _v))
                                  ((Data.Monoid.<>)
                                     (case
                                          Lens.Family2.view
                                            (Data.ProtoLens.Field.field @"maybe'mode") _x
                                      of
                                        Prelude.Nothing -> Data.Monoid.mempty
                                        (Prelude.Just _v)
                                          -> (Data.Monoid.<>)
                                               (Data.ProtoLens.Encoding.Bytes.putVarInt 72)
                                               ((Prelude..)
                                                  Data.ProtoLens.Encoding.Bytes.putVarInt
                                                  Prelude.fromIntegral _v))
                                     (Data.ProtoLens.Encoding.Wire.buildFieldSet
                                        (Lens.Family2.view Data.ProtoLens.unknownFields _x))))))))))
instance Control.DeepSeq.NFData Ext4DaUpdateReserveSpaceFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4DaUpdateReserveSpaceFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4DaUpdateReserveSpaceFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4DaUpdateReserveSpaceFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4DaUpdateReserveSpaceFtraceEvent'iBlocks x__)
                      (Control.DeepSeq.deepseq
                         (_Ext4DaUpdateReserveSpaceFtraceEvent'usedBlocks x__)
                         (Control.DeepSeq.deepseq
                            (_Ext4DaUpdateReserveSpaceFtraceEvent'reservedDataBlocks x__)
                            (Control.DeepSeq.deepseq
                               (_Ext4DaUpdateReserveSpaceFtraceEvent'reservedMetaBlocks x__)
                               (Control.DeepSeq.deepseq
                                  (_Ext4DaUpdateReserveSpaceFtraceEvent'allocatedMetaBlocks x__)
                                  (Control.DeepSeq.deepseq
                                     (_Ext4DaUpdateReserveSpaceFtraceEvent'quotaClaim x__)
                                     (Control.DeepSeq.deepseq
                                        (_Ext4DaUpdateReserveSpaceFtraceEvent'mode x__) ())))))))))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4DaWriteBeginFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4DaWriteBeginFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4DaWriteBeginFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4DaWriteBeginFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.pos' @:: Lens' Ext4DaWriteBeginFtraceEvent Data.Int.Int64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'pos' @:: Lens' Ext4DaWriteBeginFtraceEvent (Prelude.Maybe Data.Int.Int64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.len' @:: Lens' Ext4DaWriteBeginFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'len' @:: Lens' Ext4DaWriteBeginFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.flags' @:: Lens' Ext4DaWriteBeginFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'flags' @:: Lens' Ext4DaWriteBeginFtraceEvent (Prelude.Maybe Data.Word.Word32)@ -}
data Ext4DaWriteBeginFtraceEvent
  = Ext4DaWriteBeginFtraceEvent'_constructor {_Ext4DaWriteBeginFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                              _Ext4DaWriteBeginFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                              _Ext4DaWriteBeginFtraceEvent'pos :: !(Prelude.Maybe Data.Int.Int64),
                                              _Ext4DaWriteBeginFtraceEvent'len :: !(Prelude.Maybe Data.Word.Word32),
                                              _Ext4DaWriteBeginFtraceEvent'flags :: !(Prelude.Maybe Data.Word.Word32),
                                              _Ext4DaWriteBeginFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4DaWriteBeginFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4DaWriteBeginFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaWriteBeginFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4DaWriteBeginFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4DaWriteBeginFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaWriteBeginFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4DaWriteBeginFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4DaWriteBeginFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaWriteBeginFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4DaWriteBeginFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4DaWriteBeginFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaWriteBeginFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4DaWriteBeginFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4DaWriteBeginFtraceEvent "pos" Data.Int.Int64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaWriteBeginFtraceEvent'pos
           (\ x__ y__ -> x__ {_Ext4DaWriteBeginFtraceEvent'pos = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4DaWriteBeginFtraceEvent "maybe'pos" (Prelude.Maybe Data.Int.Int64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaWriteBeginFtraceEvent'pos
           (\ x__ y__ -> x__ {_Ext4DaWriteBeginFtraceEvent'pos = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4DaWriteBeginFtraceEvent "len" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaWriteBeginFtraceEvent'len
           (\ x__ y__ -> x__ {_Ext4DaWriteBeginFtraceEvent'len = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4DaWriteBeginFtraceEvent "maybe'len" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaWriteBeginFtraceEvent'len
           (\ x__ y__ -> x__ {_Ext4DaWriteBeginFtraceEvent'len = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4DaWriteBeginFtraceEvent "flags" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaWriteBeginFtraceEvent'flags
           (\ x__ y__ -> x__ {_Ext4DaWriteBeginFtraceEvent'flags = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4DaWriteBeginFtraceEvent "maybe'flags" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaWriteBeginFtraceEvent'flags
           (\ x__ y__ -> x__ {_Ext4DaWriteBeginFtraceEvent'flags = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4DaWriteBeginFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4DaWriteBeginFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \\ESCExt4DaWriteBeginFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DLE\n\
      \\ETXpos\CAN\ETX \SOH(\ETXR\ETXpos\DC2\DLE\n\
      \\ETXlen\CAN\EOT \SOH(\rR\ETXlen\DC2\DC4\n\
      \\ENQflags\CAN\ENQ \SOH(\rR\ENQflags"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4DaWriteBeginFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4DaWriteBeginFtraceEvent
        pos__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "pos"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'pos")) ::
              Data.ProtoLens.FieldDescriptor Ext4DaWriteBeginFtraceEvent
        len__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "len"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'len")) ::
              Data.ProtoLens.FieldDescriptor Ext4DaWriteBeginFtraceEvent
        flags__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "flags"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'flags")) ::
              Data.ProtoLens.FieldDescriptor Ext4DaWriteBeginFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, pos__field_descriptor),
           (Data.ProtoLens.Tag 4, len__field_descriptor),
           (Data.ProtoLens.Tag 5, flags__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4DaWriteBeginFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__ {_Ext4DaWriteBeginFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4DaWriteBeginFtraceEvent'_constructor
        {_Ext4DaWriteBeginFtraceEvent'dev = Prelude.Nothing,
         _Ext4DaWriteBeginFtraceEvent'ino = Prelude.Nothing,
         _Ext4DaWriteBeginFtraceEvent'pos = Prelude.Nothing,
         _Ext4DaWriteBeginFtraceEvent'len = Prelude.Nothing,
         _Ext4DaWriteBeginFtraceEvent'flags = Prelude.Nothing,
         _Ext4DaWriteBeginFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4DaWriteBeginFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4DaWriteBeginFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "pos"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"pos") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "len"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"len") y x)
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "flags"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"flags") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "Ext4DaWriteBeginFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'pos") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'len") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'flags") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral
                                      _v))
                         (Data.ProtoLens.Encoding.Wire.buildFieldSet
                            (Lens.Family2.view Data.ProtoLens.unknownFields _x))))))
instance Control.DeepSeq.NFData Ext4DaWriteBeginFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4DaWriteBeginFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4DaWriteBeginFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4DaWriteBeginFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4DaWriteBeginFtraceEvent'pos x__)
                      (Control.DeepSeq.deepseq
                         (_Ext4DaWriteBeginFtraceEvent'len x__)
                         (Control.DeepSeq.deepseq
                            (_Ext4DaWriteBeginFtraceEvent'flags x__) ())))))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4DaWriteEndFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4DaWriteEndFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4DaWriteEndFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4DaWriteEndFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.pos' @:: Lens' Ext4DaWriteEndFtraceEvent Data.Int.Int64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'pos' @:: Lens' Ext4DaWriteEndFtraceEvent (Prelude.Maybe Data.Int.Int64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.len' @:: Lens' Ext4DaWriteEndFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'len' @:: Lens' Ext4DaWriteEndFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.copied' @:: Lens' Ext4DaWriteEndFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'copied' @:: Lens' Ext4DaWriteEndFtraceEvent (Prelude.Maybe Data.Word.Word32)@ -}
data Ext4DaWriteEndFtraceEvent
  = Ext4DaWriteEndFtraceEvent'_constructor {_Ext4DaWriteEndFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                            _Ext4DaWriteEndFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                            _Ext4DaWriteEndFtraceEvent'pos :: !(Prelude.Maybe Data.Int.Int64),
                                            _Ext4DaWriteEndFtraceEvent'len :: !(Prelude.Maybe Data.Word.Word32),
                                            _Ext4DaWriteEndFtraceEvent'copied :: !(Prelude.Maybe Data.Word.Word32),
                                            _Ext4DaWriteEndFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4DaWriteEndFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4DaWriteEndFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaWriteEndFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4DaWriteEndFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4DaWriteEndFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaWriteEndFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4DaWriteEndFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4DaWriteEndFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaWriteEndFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4DaWriteEndFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4DaWriteEndFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaWriteEndFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4DaWriteEndFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4DaWriteEndFtraceEvent "pos" Data.Int.Int64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaWriteEndFtraceEvent'pos
           (\ x__ y__ -> x__ {_Ext4DaWriteEndFtraceEvent'pos = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4DaWriteEndFtraceEvent "maybe'pos" (Prelude.Maybe Data.Int.Int64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaWriteEndFtraceEvent'pos
           (\ x__ y__ -> x__ {_Ext4DaWriteEndFtraceEvent'pos = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4DaWriteEndFtraceEvent "len" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaWriteEndFtraceEvent'len
           (\ x__ y__ -> x__ {_Ext4DaWriteEndFtraceEvent'len = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4DaWriteEndFtraceEvent "maybe'len" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaWriteEndFtraceEvent'len
           (\ x__ y__ -> x__ {_Ext4DaWriteEndFtraceEvent'len = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4DaWriteEndFtraceEvent "copied" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaWriteEndFtraceEvent'copied
           (\ x__ y__ -> x__ {_Ext4DaWriteEndFtraceEvent'copied = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4DaWriteEndFtraceEvent "maybe'copied" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaWriteEndFtraceEvent'copied
           (\ x__ y__ -> x__ {_Ext4DaWriteEndFtraceEvent'copied = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4DaWriteEndFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4DaWriteEndFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \\EMExt4DaWriteEndFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DLE\n\
      \\ETXpos\CAN\ETX \SOH(\ETXR\ETXpos\DC2\DLE\n\
      \\ETXlen\CAN\EOT \SOH(\rR\ETXlen\DC2\SYN\n\
      \\ACKcopied\CAN\ENQ \SOH(\rR\ACKcopied"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4DaWriteEndFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4DaWriteEndFtraceEvent
        pos__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "pos"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'pos")) ::
              Data.ProtoLens.FieldDescriptor Ext4DaWriteEndFtraceEvent
        len__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "len"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'len")) ::
              Data.ProtoLens.FieldDescriptor Ext4DaWriteEndFtraceEvent
        copied__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "copied"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'copied")) ::
              Data.ProtoLens.FieldDescriptor Ext4DaWriteEndFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, pos__field_descriptor),
           (Data.ProtoLens.Tag 4, len__field_descriptor),
           (Data.ProtoLens.Tag 5, copied__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4DaWriteEndFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__ {_Ext4DaWriteEndFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4DaWriteEndFtraceEvent'_constructor
        {_Ext4DaWriteEndFtraceEvent'dev = Prelude.Nothing,
         _Ext4DaWriteEndFtraceEvent'ino = Prelude.Nothing,
         _Ext4DaWriteEndFtraceEvent'pos = Prelude.Nothing,
         _Ext4DaWriteEndFtraceEvent'len = Prelude.Nothing,
         _Ext4DaWriteEndFtraceEvent'copied = Prelude.Nothing,
         _Ext4DaWriteEndFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4DaWriteEndFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4DaWriteEndFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "pos"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"pos") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "len"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"len") y x)
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "copied"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"copied") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "Ext4DaWriteEndFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'pos") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'len") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'copied") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral
                                      _v))
                         (Data.ProtoLens.Encoding.Wire.buildFieldSet
                            (Lens.Family2.view Data.ProtoLens.unknownFields _x))))))
instance Control.DeepSeq.NFData Ext4DaWriteEndFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4DaWriteEndFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4DaWriteEndFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4DaWriteEndFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4DaWriteEndFtraceEvent'pos x__)
                      (Control.DeepSeq.deepseq
                         (_Ext4DaWriteEndFtraceEvent'len x__)
                         (Control.DeepSeq.deepseq
                            (_Ext4DaWriteEndFtraceEvent'copied x__) ())))))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4DaWritePagesExtentFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4DaWritePagesExtentFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4DaWritePagesExtentFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4DaWritePagesExtentFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.lblk' @:: Lens' Ext4DaWritePagesExtentFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'lblk' @:: Lens' Ext4DaWritePagesExtentFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.len' @:: Lens' Ext4DaWritePagesExtentFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'len' @:: Lens' Ext4DaWritePagesExtentFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.flags' @:: Lens' Ext4DaWritePagesExtentFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'flags' @:: Lens' Ext4DaWritePagesExtentFtraceEvent (Prelude.Maybe Data.Word.Word32)@ -}
data Ext4DaWritePagesExtentFtraceEvent
  = Ext4DaWritePagesExtentFtraceEvent'_constructor {_Ext4DaWritePagesExtentFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                                    _Ext4DaWritePagesExtentFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                                    _Ext4DaWritePagesExtentFtraceEvent'lblk :: !(Prelude.Maybe Data.Word.Word64),
                                                    _Ext4DaWritePagesExtentFtraceEvent'len :: !(Prelude.Maybe Data.Word.Word32),
                                                    _Ext4DaWritePagesExtentFtraceEvent'flags :: !(Prelude.Maybe Data.Word.Word32),
                                                    _Ext4DaWritePagesExtentFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4DaWritePagesExtentFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4DaWritePagesExtentFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaWritePagesExtentFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4DaWritePagesExtentFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4DaWritePagesExtentFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaWritePagesExtentFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4DaWritePagesExtentFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4DaWritePagesExtentFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaWritePagesExtentFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4DaWritePagesExtentFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4DaWritePagesExtentFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaWritePagesExtentFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4DaWritePagesExtentFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4DaWritePagesExtentFtraceEvent "lblk" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaWritePagesExtentFtraceEvent'lblk
           (\ x__ y__ -> x__ {_Ext4DaWritePagesExtentFtraceEvent'lblk = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4DaWritePagesExtentFtraceEvent "maybe'lblk" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaWritePagesExtentFtraceEvent'lblk
           (\ x__ y__ -> x__ {_Ext4DaWritePagesExtentFtraceEvent'lblk = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4DaWritePagesExtentFtraceEvent "len" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaWritePagesExtentFtraceEvent'len
           (\ x__ y__ -> x__ {_Ext4DaWritePagesExtentFtraceEvent'len = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4DaWritePagesExtentFtraceEvent "maybe'len" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaWritePagesExtentFtraceEvent'len
           (\ x__ y__ -> x__ {_Ext4DaWritePagesExtentFtraceEvent'len = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4DaWritePagesExtentFtraceEvent "flags" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaWritePagesExtentFtraceEvent'flags
           (\ x__ y__
              -> x__ {_Ext4DaWritePagesExtentFtraceEvent'flags = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4DaWritePagesExtentFtraceEvent "maybe'flags" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaWritePagesExtentFtraceEvent'flags
           (\ x__ y__
              -> x__ {_Ext4DaWritePagesExtentFtraceEvent'flags = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4DaWritePagesExtentFtraceEvent where
  messageName _
    = Data.Text.pack
        "perfetto.protos.Ext4DaWritePagesExtentFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \!Ext4DaWritePagesExtentFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DC2\n\
      \\EOTlblk\CAN\ETX \SOH(\EOTR\EOTlblk\DC2\DLE\n\
      \\ETXlen\CAN\EOT \SOH(\rR\ETXlen\DC2\DC4\n\
      \\ENQflags\CAN\ENQ \SOH(\rR\ENQflags"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4DaWritePagesExtentFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4DaWritePagesExtentFtraceEvent
        lblk__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "lblk"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'lblk")) ::
              Data.ProtoLens.FieldDescriptor Ext4DaWritePagesExtentFtraceEvent
        len__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "len"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'len")) ::
              Data.ProtoLens.FieldDescriptor Ext4DaWritePagesExtentFtraceEvent
        flags__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "flags"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'flags")) ::
              Data.ProtoLens.FieldDescriptor Ext4DaWritePagesExtentFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, lblk__field_descriptor),
           (Data.ProtoLens.Tag 4, len__field_descriptor),
           (Data.ProtoLens.Tag 5, flags__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4DaWritePagesExtentFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__ {_Ext4DaWritePagesExtentFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4DaWritePagesExtentFtraceEvent'_constructor
        {_Ext4DaWritePagesExtentFtraceEvent'dev = Prelude.Nothing,
         _Ext4DaWritePagesExtentFtraceEvent'ino = Prelude.Nothing,
         _Ext4DaWritePagesExtentFtraceEvent'lblk = Prelude.Nothing,
         _Ext4DaWritePagesExtentFtraceEvent'len = Prelude.Nothing,
         _Ext4DaWritePagesExtentFtraceEvent'flags = Prelude.Nothing,
         _Ext4DaWritePagesExtentFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4DaWritePagesExtentFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4DaWritePagesExtentFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "lblk"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"lblk") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "len"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"len") y x)
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "flags"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"flags") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage)
          "Ext4DaWritePagesExtentFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'lblk") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'len") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'flags") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral
                                      _v))
                         (Data.ProtoLens.Encoding.Wire.buildFieldSet
                            (Lens.Family2.view Data.ProtoLens.unknownFields _x))))))
instance Control.DeepSeq.NFData Ext4DaWritePagesExtentFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4DaWritePagesExtentFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4DaWritePagesExtentFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4DaWritePagesExtentFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4DaWritePagesExtentFtraceEvent'lblk x__)
                      (Control.DeepSeq.deepseq
                         (_Ext4DaWritePagesExtentFtraceEvent'len x__)
                         (Control.DeepSeq.deepseq
                            (_Ext4DaWritePagesExtentFtraceEvent'flags x__) ())))))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4DaWritePagesFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4DaWritePagesFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4DaWritePagesFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4DaWritePagesFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.firstPage' @:: Lens' Ext4DaWritePagesFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'firstPage' @:: Lens' Ext4DaWritePagesFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.nrToWrite' @:: Lens' Ext4DaWritePagesFtraceEvent Data.Int.Int64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'nrToWrite' @:: Lens' Ext4DaWritePagesFtraceEvent (Prelude.Maybe Data.Int.Int64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.syncMode' @:: Lens' Ext4DaWritePagesFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'syncMode' @:: Lens' Ext4DaWritePagesFtraceEvent (Prelude.Maybe Data.Int.Int32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.bBlocknr' @:: Lens' Ext4DaWritePagesFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'bBlocknr' @:: Lens' Ext4DaWritePagesFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.bSize' @:: Lens' Ext4DaWritePagesFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'bSize' @:: Lens' Ext4DaWritePagesFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.bState' @:: Lens' Ext4DaWritePagesFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'bState' @:: Lens' Ext4DaWritePagesFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ioDone' @:: Lens' Ext4DaWritePagesFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ioDone' @:: Lens' Ext4DaWritePagesFtraceEvent (Prelude.Maybe Data.Int.Int32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.pagesWritten' @:: Lens' Ext4DaWritePagesFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'pagesWritten' @:: Lens' Ext4DaWritePagesFtraceEvent (Prelude.Maybe Data.Int.Int32)@ -}
data Ext4DaWritePagesFtraceEvent
  = Ext4DaWritePagesFtraceEvent'_constructor {_Ext4DaWritePagesFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                              _Ext4DaWritePagesFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                              _Ext4DaWritePagesFtraceEvent'firstPage :: !(Prelude.Maybe Data.Word.Word64),
                                              _Ext4DaWritePagesFtraceEvent'nrToWrite :: !(Prelude.Maybe Data.Int.Int64),
                                              _Ext4DaWritePagesFtraceEvent'syncMode :: !(Prelude.Maybe Data.Int.Int32),
                                              _Ext4DaWritePagesFtraceEvent'bBlocknr :: !(Prelude.Maybe Data.Word.Word64),
                                              _Ext4DaWritePagesFtraceEvent'bSize :: !(Prelude.Maybe Data.Word.Word32),
                                              _Ext4DaWritePagesFtraceEvent'bState :: !(Prelude.Maybe Data.Word.Word32),
                                              _Ext4DaWritePagesFtraceEvent'ioDone :: !(Prelude.Maybe Data.Int.Int32),
                                              _Ext4DaWritePagesFtraceEvent'pagesWritten :: !(Prelude.Maybe Data.Int.Int32),
                                              _Ext4DaWritePagesFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4DaWritePagesFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4DaWritePagesFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaWritePagesFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4DaWritePagesFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4DaWritePagesFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaWritePagesFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4DaWritePagesFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4DaWritePagesFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaWritePagesFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4DaWritePagesFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4DaWritePagesFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaWritePagesFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4DaWritePagesFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4DaWritePagesFtraceEvent "firstPage" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaWritePagesFtraceEvent'firstPage
           (\ x__ y__ -> x__ {_Ext4DaWritePagesFtraceEvent'firstPage = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4DaWritePagesFtraceEvent "maybe'firstPage" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaWritePagesFtraceEvent'firstPage
           (\ x__ y__ -> x__ {_Ext4DaWritePagesFtraceEvent'firstPage = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4DaWritePagesFtraceEvent "nrToWrite" Data.Int.Int64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaWritePagesFtraceEvent'nrToWrite
           (\ x__ y__ -> x__ {_Ext4DaWritePagesFtraceEvent'nrToWrite = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4DaWritePagesFtraceEvent "maybe'nrToWrite" (Prelude.Maybe Data.Int.Int64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaWritePagesFtraceEvent'nrToWrite
           (\ x__ y__ -> x__ {_Ext4DaWritePagesFtraceEvent'nrToWrite = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4DaWritePagesFtraceEvent "syncMode" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaWritePagesFtraceEvent'syncMode
           (\ x__ y__ -> x__ {_Ext4DaWritePagesFtraceEvent'syncMode = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4DaWritePagesFtraceEvent "maybe'syncMode" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaWritePagesFtraceEvent'syncMode
           (\ x__ y__ -> x__ {_Ext4DaWritePagesFtraceEvent'syncMode = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4DaWritePagesFtraceEvent "bBlocknr" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaWritePagesFtraceEvent'bBlocknr
           (\ x__ y__ -> x__ {_Ext4DaWritePagesFtraceEvent'bBlocknr = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4DaWritePagesFtraceEvent "maybe'bBlocknr" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaWritePagesFtraceEvent'bBlocknr
           (\ x__ y__ -> x__ {_Ext4DaWritePagesFtraceEvent'bBlocknr = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4DaWritePagesFtraceEvent "bSize" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaWritePagesFtraceEvent'bSize
           (\ x__ y__ -> x__ {_Ext4DaWritePagesFtraceEvent'bSize = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4DaWritePagesFtraceEvent "maybe'bSize" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaWritePagesFtraceEvent'bSize
           (\ x__ y__ -> x__ {_Ext4DaWritePagesFtraceEvent'bSize = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4DaWritePagesFtraceEvent "bState" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaWritePagesFtraceEvent'bState
           (\ x__ y__ -> x__ {_Ext4DaWritePagesFtraceEvent'bState = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4DaWritePagesFtraceEvent "maybe'bState" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaWritePagesFtraceEvent'bState
           (\ x__ y__ -> x__ {_Ext4DaWritePagesFtraceEvent'bState = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4DaWritePagesFtraceEvent "ioDone" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaWritePagesFtraceEvent'ioDone
           (\ x__ y__ -> x__ {_Ext4DaWritePagesFtraceEvent'ioDone = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4DaWritePagesFtraceEvent "maybe'ioDone" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaWritePagesFtraceEvent'ioDone
           (\ x__ y__ -> x__ {_Ext4DaWritePagesFtraceEvent'ioDone = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4DaWritePagesFtraceEvent "pagesWritten" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaWritePagesFtraceEvent'pagesWritten
           (\ x__ y__
              -> x__ {_Ext4DaWritePagesFtraceEvent'pagesWritten = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4DaWritePagesFtraceEvent "maybe'pagesWritten" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DaWritePagesFtraceEvent'pagesWritten
           (\ x__ y__
              -> x__ {_Ext4DaWritePagesFtraceEvent'pagesWritten = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4DaWritePagesFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4DaWritePagesFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \\ESCExt4DaWritePagesFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\GS\n\
      \\n\
      \first_page\CAN\ETX \SOH(\EOTR\tfirstPage\DC2\RS\n\
      \\vnr_to_write\CAN\EOT \SOH(\ETXR\tnrToWrite\DC2\ESC\n\
      \\tsync_mode\CAN\ENQ \SOH(\ENQR\bsyncMode\DC2\ESC\n\
      \\tb_blocknr\CAN\ACK \SOH(\EOTR\bbBlocknr\DC2\NAK\n\
      \\ACKb_size\CAN\a \SOH(\rR\ENQbSize\DC2\ETB\n\
      \\ab_state\CAN\b \SOH(\rR\ACKbState\DC2\ETB\n\
      \\aio_done\CAN\t \SOH(\ENQR\ACKioDone\DC2#\n\
      \\rpages_written\CAN\n\
      \ \SOH(\ENQR\fpagesWritten"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4DaWritePagesFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4DaWritePagesFtraceEvent
        firstPage__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "first_page"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'firstPage")) ::
              Data.ProtoLens.FieldDescriptor Ext4DaWritePagesFtraceEvent
        nrToWrite__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "nr_to_write"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'nrToWrite")) ::
              Data.ProtoLens.FieldDescriptor Ext4DaWritePagesFtraceEvent
        syncMode__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "sync_mode"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'syncMode")) ::
              Data.ProtoLens.FieldDescriptor Ext4DaWritePagesFtraceEvent
        bBlocknr__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "b_blocknr"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'bBlocknr")) ::
              Data.ProtoLens.FieldDescriptor Ext4DaWritePagesFtraceEvent
        bSize__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "b_size"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'bSize")) ::
              Data.ProtoLens.FieldDescriptor Ext4DaWritePagesFtraceEvent
        bState__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "b_state"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'bState")) ::
              Data.ProtoLens.FieldDescriptor Ext4DaWritePagesFtraceEvent
        ioDone__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "io_done"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ioDone")) ::
              Data.ProtoLens.FieldDescriptor Ext4DaWritePagesFtraceEvent
        pagesWritten__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "pages_written"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'pagesWritten")) ::
              Data.ProtoLens.FieldDescriptor Ext4DaWritePagesFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, firstPage__field_descriptor),
           (Data.ProtoLens.Tag 4, nrToWrite__field_descriptor),
           (Data.ProtoLens.Tag 5, syncMode__field_descriptor),
           (Data.ProtoLens.Tag 6, bBlocknr__field_descriptor),
           (Data.ProtoLens.Tag 7, bSize__field_descriptor),
           (Data.ProtoLens.Tag 8, bState__field_descriptor),
           (Data.ProtoLens.Tag 9, ioDone__field_descriptor),
           (Data.ProtoLens.Tag 10, pagesWritten__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4DaWritePagesFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__ {_Ext4DaWritePagesFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4DaWritePagesFtraceEvent'_constructor
        {_Ext4DaWritePagesFtraceEvent'dev = Prelude.Nothing,
         _Ext4DaWritePagesFtraceEvent'ino = Prelude.Nothing,
         _Ext4DaWritePagesFtraceEvent'firstPage = Prelude.Nothing,
         _Ext4DaWritePagesFtraceEvent'nrToWrite = Prelude.Nothing,
         _Ext4DaWritePagesFtraceEvent'syncMode = Prelude.Nothing,
         _Ext4DaWritePagesFtraceEvent'bBlocknr = Prelude.Nothing,
         _Ext4DaWritePagesFtraceEvent'bSize = Prelude.Nothing,
         _Ext4DaWritePagesFtraceEvent'bState = Prelude.Nothing,
         _Ext4DaWritePagesFtraceEvent'ioDone = Prelude.Nothing,
         _Ext4DaWritePagesFtraceEvent'pagesWritten = Prelude.Nothing,
         _Ext4DaWritePagesFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4DaWritePagesFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4DaWritePagesFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "first_page"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"firstPage") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "nr_to_write"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"nrToWrite") y x)
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "sync_mode"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"syncMode") y x)
                        48
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "b_blocknr"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"bBlocknr") y x)
                        56
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "b_size"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"bSize") y x)
                        64
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "b_state"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"bState") y x)
                        72
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "io_done"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ioDone") y x)
                        80
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "pages_written"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"pagesWritten") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "Ext4DaWritePagesFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view
                          (Data.ProtoLens.Field.field @"maybe'firstPage") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view
                             (Data.ProtoLens.Field.field @"maybe'nrToWrite") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'syncMode") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral
                                      _v))
                         ((Data.Monoid.<>)
                            (case
                                 Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'bBlocknr") _x
                             of
                               Prelude.Nothing -> Data.Monoid.mempty
                               (Prelude.Just _v)
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 48)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                            ((Data.Monoid.<>)
                               (case
                                    Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'bSize") _x
                                of
                                  Prelude.Nothing -> Data.Monoid.mempty
                                  (Prelude.Just _v)
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt 56)
                                         ((Prelude..)
                                            Data.ProtoLens.Encoding.Bytes.putVarInt
                                            Prelude.fromIntegral _v))
                               ((Data.Monoid.<>)
                                  (case
                                       Lens.Family2.view
                                         (Data.ProtoLens.Field.field @"maybe'bState") _x
                                   of
                                     Prelude.Nothing -> Data.Monoid.mempty
                                     (Prelude.Just _v)
                                       -> (Data.Monoid.<>)
                                            (Data.ProtoLens.Encoding.Bytes.putVarInt 64)
                                            ((Prelude..)
                                               Data.ProtoLens.Encoding.Bytes.putVarInt
                                               Prelude.fromIntegral _v))
                                  ((Data.Monoid.<>)
                                     (case
                                          Lens.Family2.view
                                            (Data.ProtoLens.Field.field @"maybe'ioDone") _x
                                      of
                                        Prelude.Nothing -> Data.Monoid.mempty
                                        (Prelude.Just _v)
                                          -> (Data.Monoid.<>)
                                               (Data.ProtoLens.Encoding.Bytes.putVarInt 72)
                                               ((Prelude..)
                                                  Data.ProtoLens.Encoding.Bytes.putVarInt
                                                  Prelude.fromIntegral _v))
                                     ((Data.Monoid.<>)
                                        (case
                                             Lens.Family2.view
                                               (Data.ProtoLens.Field.field @"maybe'pagesWritten") _x
                                         of
                                           Prelude.Nothing -> Data.Monoid.mempty
                                           (Prelude.Just _v)
                                             -> (Data.Monoid.<>)
                                                  (Data.ProtoLens.Encoding.Bytes.putVarInt 80)
                                                  ((Prelude..)
                                                     Data.ProtoLens.Encoding.Bytes.putVarInt
                                                     Prelude.fromIntegral _v))
                                        (Data.ProtoLens.Encoding.Wire.buildFieldSet
                                           (Lens.Family2.view
                                              Data.ProtoLens.unknownFields _x)))))))))))
instance Control.DeepSeq.NFData Ext4DaWritePagesFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4DaWritePagesFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4DaWritePagesFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4DaWritePagesFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4DaWritePagesFtraceEvent'firstPage x__)
                      (Control.DeepSeq.deepseq
                         (_Ext4DaWritePagesFtraceEvent'nrToWrite x__)
                         (Control.DeepSeq.deepseq
                            (_Ext4DaWritePagesFtraceEvent'syncMode x__)
                            (Control.DeepSeq.deepseq
                               (_Ext4DaWritePagesFtraceEvent'bBlocknr x__)
                               (Control.DeepSeq.deepseq
                                  (_Ext4DaWritePagesFtraceEvent'bSize x__)
                                  (Control.DeepSeq.deepseq
                                     (_Ext4DaWritePagesFtraceEvent'bState x__)
                                     (Control.DeepSeq.deepseq
                                        (_Ext4DaWritePagesFtraceEvent'ioDone x__)
                                        (Control.DeepSeq.deepseq
                                           (_Ext4DaWritePagesFtraceEvent'pagesWritten x__)
                                           ()))))))))))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4DirectIOEnterFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4DirectIOEnterFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4DirectIOEnterFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4DirectIOEnterFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.pos' @:: Lens' Ext4DirectIOEnterFtraceEvent Data.Int.Int64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'pos' @:: Lens' Ext4DirectIOEnterFtraceEvent (Prelude.Maybe Data.Int.Int64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.len' @:: Lens' Ext4DirectIOEnterFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'len' @:: Lens' Ext4DirectIOEnterFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.rw' @:: Lens' Ext4DirectIOEnterFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'rw' @:: Lens' Ext4DirectIOEnterFtraceEvent (Prelude.Maybe Data.Int.Int32)@ -}
data Ext4DirectIOEnterFtraceEvent
  = Ext4DirectIOEnterFtraceEvent'_constructor {_Ext4DirectIOEnterFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                               _Ext4DirectIOEnterFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                               _Ext4DirectIOEnterFtraceEvent'pos :: !(Prelude.Maybe Data.Int.Int64),
                                               _Ext4DirectIOEnterFtraceEvent'len :: !(Prelude.Maybe Data.Word.Word64),
                                               _Ext4DirectIOEnterFtraceEvent'rw :: !(Prelude.Maybe Data.Int.Int32),
                                               _Ext4DirectIOEnterFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4DirectIOEnterFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4DirectIOEnterFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DirectIOEnterFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4DirectIOEnterFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4DirectIOEnterFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DirectIOEnterFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4DirectIOEnterFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4DirectIOEnterFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DirectIOEnterFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4DirectIOEnterFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4DirectIOEnterFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DirectIOEnterFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4DirectIOEnterFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4DirectIOEnterFtraceEvent "pos" Data.Int.Int64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DirectIOEnterFtraceEvent'pos
           (\ x__ y__ -> x__ {_Ext4DirectIOEnterFtraceEvent'pos = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4DirectIOEnterFtraceEvent "maybe'pos" (Prelude.Maybe Data.Int.Int64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DirectIOEnterFtraceEvent'pos
           (\ x__ y__ -> x__ {_Ext4DirectIOEnterFtraceEvent'pos = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4DirectIOEnterFtraceEvent "len" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DirectIOEnterFtraceEvent'len
           (\ x__ y__ -> x__ {_Ext4DirectIOEnterFtraceEvent'len = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4DirectIOEnterFtraceEvent "maybe'len" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DirectIOEnterFtraceEvent'len
           (\ x__ y__ -> x__ {_Ext4DirectIOEnterFtraceEvent'len = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4DirectIOEnterFtraceEvent "rw" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DirectIOEnterFtraceEvent'rw
           (\ x__ y__ -> x__ {_Ext4DirectIOEnterFtraceEvent'rw = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4DirectIOEnterFtraceEvent "maybe'rw" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DirectIOEnterFtraceEvent'rw
           (\ x__ y__ -> x__ {_Ext4DirectIOEnterFtraceEvent'rw = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4DirectIOEnterFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4DirectIOEnterFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \\FSExt4DirectIOEnterFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DLE\n\
      \\ETXpos\CAN\ETX \SOH(\ETXR\ETXpos\DC2\DLE\n\
      \\ETXlen\CAN\EOT \SOH(\EOTR\ETXlen\DC2\SO\n\
      \\STXrw\CAN\ENQ \SOH(\ENQR\STXrw"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4DirectIOEnterFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4DirectIOEnterFtraceEvent
        pos__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "pos"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'pos")) ::
              Data.ProtoLens.FieldDescriptor Ext4DirectIOEnterFtraceEvent
        len__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "len"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'len")) ::
              Data.ProtoLens.FieldDescriptor Ext4DirectIOEnterFtraceEvent
        rw__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "rw"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'rw")) ::
              Data.ProtoLens.FieldDescriptor Ext4DirectIOEnterFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, pos__field_descriptor),
           (Data.ProtoLens.Tag 4, len__field_descriptor),
           (Data.ProtoLens.Tag 5, rw__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4DirectIOEnterFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__ {_Ext4DirectIOEnterFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4DirectIOEnterFtraceEvent'_constructor
        {_Ext4DirectIOEnterFtraceEvent'dev = Prelude.Nothing,
         _Ext4DirectIOEnterFtraceEvent'ino = Prelude.Nothing,
         _Ext4DirectIOEnterFtraceEvent'pos = Prelude.Nothing,
         _Ext4DirectIOEnterFtraceEvent'len = Prelude.Nothing,
         _Ext4DirectIOEnterFtraceEvent'rw = Prelude.Nothing,
         _Ext4DirectIOEnterFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4DirectIOEnterFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4DirectIOEnterFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "pos"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"pos") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "len"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"len") y x)
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "rw"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"rw") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "Ext4DirectIOEnterFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'pos") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'len") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'rw") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral
                                      _v))
                         (Data.ProtoLens.Encoding.Wire.buildFieldSet
                            (Lens.Family2.view Data.ProtoLens.unknownFields _x))))))
instance Control.DeepSeq.NFData Ext4DirectIOEnterFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4DirectIOEnterFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4DirectIOEnterFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4DirectIOEnterFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4DirectIOEnterFtraceEvent'pos x__)
                      (Control.DeepSeq.deepseq
                         (_Ext4DirectIOEnterFtraceEvent'len x__)
                         (Control.DeepSeq.deepseq
                            (_Ext4DirectIOEnterFtraceEvent'rw x__) ())))))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4DirectIOExitFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4DirectIOExitFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4DirectIOExitFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4DirectIOExitFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.pos' @:: Lens' Ext4DirectIOExitFtraceEvent Data.Int.Int64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'pos' @:: Lens' Ext4DirectIOExitFtraceEvent (Prelude.Maybe Data.Int.Int64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.len' @:: Lens' Ext4DirectIOExitFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'len' @:: Lens' Ext4DirectIOExitFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.rw' @:: Lens' Ext4DirectIOExitFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'rw' @:: Lens' Ext4DirectIOExitFtraceEvent (Prelude.Maybe Data.Int.Int32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ret' @:: Lens' Ext4DirectIOExitFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ret' @:: Lens' Ext4DirectIOExitFtraceEvent (Prelude.Maybe Data.Int.Int32)@ -}
data Ext4DirectIOExitFtraceEvent
  = Ext4DirectIOExitFtraceEvent'_constructor {_Ext4DirectIOExitFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                              _Ext4DirectIOExitFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                              _Ext4DirectIOExitFtraceEvent'pos :: !(Prelude.Maybe Data.Int.Int64),
                                              _Ext4DirectIOExitFtraceEvent'len :: !(Prelude.Maybe Data.Word.Word64),
                                              _Ext4DirectIOExitFtraceEvent'rw :: !(Prelude.Maybe Data.Int.Int32),
                                              _Ext4DirectIOExitFtraceEvent'ret :: !(Prelude.Maybe Data.Int.Int32),
                                              _Ext4DirectIOExitFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4DirectIOExitFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4DirectIOExitFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DirectIOExitFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4DirectIOExitFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4DirectIOExitFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DirectIOExitFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4DirectIOExitFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4DirectIOExitFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DirectIOExitFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4DirectIOExitFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4DirectIOExitFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DirectIOExitFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4DirectIOExitFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4DirectIOExitFtraceEvent "pos" Data.Int.Int64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DirectIOExitFtraceEvent'pos
           (\ x__ y__ -> x__ {_Ext4DirectIOExitFtraceEvent'pos = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4DirectIOExitFtraceEvent "maybe'pos" (Prelude.Maybe Data.Int.Int64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DirectIOExitFtraceEvent'pos
           (\ x__ y__ -> x__ {_Ext4DirectIOExitFtraceEvent'pos = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4DirectIOExitFtraceEvent "len" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DirectIOExitFtraceEvent'len
           (\ x__ y__ -> x__ {_Ext4DirectIOExitFtraceEvent'len = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4DirectIOExitFtraceEvent "maybe'len" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DirectIOExitFtraceEvent'len
           (\ x__ y__ -> x__ {_Ext4DirectIOExitFtraceEvent'len = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4DirectIOExitFtraceEvent "rw" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DirectIOExitFtraceEvent'rw
           (\ x__ y__ -> x__ {_Ext4DirectIOExitFtraceEvent'rw = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4DirectIOExitFtraceEvent "maybe'rw" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DirectIOExitFtraceEvent'rw
           (\ x__ y__ -> x__ {_Ext4DirectIOExitFtraceEvent'rw = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4DirectIOExitFtraceEvent "ret" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DirectIOExitFtraceEvent'ret
           (\ x__ y__ -> x__ {_Ext4DirectIOExitFtraceEvent'ret = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4DirectIOExitFtraceEvent "maybe'ret" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DirectIOExitFtraceEvent'ret
           (\ x__ y__ -> x__ {_Ext4DirectIOExitFtraceEvent'ret = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4DirectIOExitFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4DirectIOExitFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \\ESCExt4DirectIOExitFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DLE\n\
      \\ETXpos\CAN\ETX \SOH(\ETXR\ETXpos\DC2\DLE\n\
      \\ETXlen\CAN\EOT \SOH(\EOTR\ETXlen\DC2\SO\n\
      \\STXrw\CAN\ENQ \SOH(\ENQR\STXrw\DC2\DLE\n\
      \\ETXret\CAN\ACK \SOH(\ENQR\ETXret"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4DirectIOExitFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4DirectIOExitFtraceEvent
        pos__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "pos"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'pos")) ::
              Data.ProtoLens.FieldDescriptor Ext4DirectIOExitFtraceEvent
        len__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "len"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'len")) ::
              Data.ProtoLens.FieldDescriptor Ext4DirectIOExitFtraceEvent
        rw__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "rw"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'rw")) ::
              Data.ProtoLens.FieldDescriptor Ext4DirectIOExitFtraceEvent
        ret__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ret"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ret")) ::
              Data.ProtoLens.FieldDescriptor Ext4DirectIOExitFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, pos__field_descriptor),
           (Data.ProtoLens.Tag 4, len__field_descriptor),
           (Data.ProtoLens.Tag 5, rw__field_descriptor),
           (Data.ProtoLens.Tag 6, ret__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4DirectIOExitFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__ {_Ext4DirectIOExitFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4DirectIOExitFtraceEvent'_constructor
        {_Ext4DirectIOExitFtraceEvent'dev = Prelude.Nothing,
         _Ext4DirectIOExitFtraceEvent'ino = Prelude.Nothing,
         _Ext4DirectIOExitFtraceEvent'pos = Prelude.Nothing,
         _Ext4DirectIOExitFtraceEvent'len = Prelude.Nothing,
         _Ext4DirectIOExitFtraceEvent'rw = Prelude.Nothing,
         _Ext4DirectIOExitFtraceEvent'ret = Prelude.Nothing,
         _Ext4DirectIOExitFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4DirectIOExitFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4DirectIOExitFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "pos"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"pos") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "len"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"len") y x)
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "rw"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"rw") y x)
                        48
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "ret"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ret") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "Ext4DirectIOExitFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'pos") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'len") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'rw") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral
                                      _v))
                         ((Data.Monoid.<>)
                            (case
                                 Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ret") _x
                             of
                               Prelude.Nothing -> Data.Monoid.mempty
                               (Prelude.Just _v)
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 48)
                                      ((Prelude..)
                                         Data.ProtoLens.Encoding.Bytes.putVarInt
                                         Prelude.fromIntegral _v))
                            (Data.ProtoLens.Encoding.Wire.buildFieldSet
                               (Lens.Family2.view Data.ProtoLens.unknownFields _x)))))))
instance Control.DeepSeq.NFData Ext4DirectIOExitFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4DirectIOExitFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4DirectIOExitFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4DirectIOExitFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4DirectIOExitFtraceEvent'pos x__)
                      (Control.DeepSeq.deepseq
                         (_Ext4DirectIOExitFtraceEvent'len x__)
                         (Control.DeepSeq.deepseq
                            (_Ext4DirectIOExitFtraceEvent'rw x__)
                            (Control.DeepSeq.deepseq
                               (_Ext4DirectIOExitFtraceEvent'ret x__) ()))))))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4DiscardBlocksFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4DiscardBlocksFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.blk' @:: Lens' Ext4DiscardBlocksFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'blk' @:: Lens' Ext4DiscardBlocksFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.count' @:: Lens' Ext4DiscardBlocksFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'count' @:: Lens' Ext4DiscardBlocksFtraceEvent (Prelude.Maybe Data.Word.Word64)@ -}
data Ext4DiscardBlocksFtraceEvent
  = Ext4DiscardBlocksFtraceEvent'_constructor {_Ext4DiscardBlocksFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                               _Ext4DiscardBlocksFtraceEvent'blk :: !(Prelude.Maybe Data.Word.Word64),
                                               _Ext4DiscardBlocksFtraceEvent'count :: !(Prelude.Maybe Data.Word.Word64),
                                               _Ext4DiscardBlocksFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4DiscardBlocksFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4DiscardBlocksFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DiscardBlocksFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4DiscardBlocksFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4DiscardBlocksFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DiscardBlocksFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4DiscardBlocksFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4DiscardBlocksFtraceEvent "blk" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DiscardBlocksFtraceEvent'blk
           (\ x__ y__ -> x__ {_Ext4DiscardBlocksFtraceEvent'blk = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4DiscardBlocksFtraceEvent "maybe'blk" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DiscardBlocksFtraceEvent'blk
           (\ x__ y__ -> x__ {_Ext4DiscardBlocksFtraceEvent'blk = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4DiscardBlocksFtraceEvent "count" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DiscardBlocksFtraceEvent'count
           (\ x__ y__ -> x__ {_Ext4DiscardBlocksFtraceEvent'count = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4DiscardBlocksFtraceEvent "maybe'count" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DiscardBlocksFtraceEvent'count
           (\ x__ y__ -> x__ {_Ext4DiscardBlocksFtraceEvent'count = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4DiscardBlocksFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4DiscardBlocksFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \\FSExt4DiscardBlocksFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXblk\CAN\STX \SOH(\EOTR\ETXblk\DC2\DC4\n\
      \\ENQcount\CAN\ETX \SOH(\EOTR\ENQcount"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4DiscardBlocksFtraceEvent
        blk__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "blk"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'blk")) ::
              Data.ProtoLens.FieldDescriptor Ext4DiscardBlocksFtraceEvent
        count__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "count"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'count")) ::
              Data.ProtoLens.FieldDescriptor Ext4DiscardBlocksFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, blk__field_descriptor),
           (Data.ProtoLens.Tag 3, count__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4DiscardBlocksFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__ {_Ext4DiscardBlocksFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4DiscardBlocksFtraceEvent'_constructor
        {_Ext4DiscardBlocksFtraceEvent'dev = Prelude.Nothing,
         _Ext4DiscardBlocksFtraceEvent'blk = Prelude.Nothing,
         _Ext4DiscardBlocksFtraceEvent'count = Prelude.Nothing,
         _Ext4DiscardBlocksFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4DiscardBlocksFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4DiscardBlocksFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "blk"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"blk") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "count"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"count") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "Ext4DiscardBlocksFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'blk") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'count") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                   (Data.ProtoLens.Encoding.Wire.buildFieldSet
                      (Lens.Family2.view Data.ProtoLens.unknownFields _x))))
instance Control.DeepSeq.NFData Ext4DiscardBlocksFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4DiscardBlocksFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4DiscardBlocksFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4DiscardBlocksFtraceEvent'blk x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4DiscardBlocksFtraceEvent'count x__) ())))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4DiscardPreallocationsFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4DiscardPreallocationsFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4DiscardPreallocationsFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4DiscardPreallocationsFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.len' @:: Lens' Ext4DiscardPreallocationsFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'len' @:: Lens' Ext4DiscardPreallocationsFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.needed' @:: Lens' Ext4DiscardPreallocationsFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'needed' @:: Lens' Ext4DiscardPreallocationsFtraceEvent (Prelude.Maybe Data.Word.Word32)@ -}
data Ext4DiscardPreallocationsFtraceEvent
  = Ext4DiscardPreallocationsFtraceEvent'_constructor {_Ext4DiscardPreallocationsFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                                       _Ext4DiscardPreallocationsFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                                       _Ext4DiscardPreallocationsFtraceEvent'len :: !(Prelude.Maybe Data.Word.Word32),
                                                       _Ext4DiscardPreallocationsFtraceEvent'needed :: !(Prelude.Maybe Data.Word.Word32),
                                                       _Ext4DiscardPreallocationsFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4DiscardPreallocationsFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4DiscardPreallocationsFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DiscardPreallocationsFtraceEvent'dev
           (\ x__ y__
              -> x__ {_Ext4DiscardPreallocationsFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4DiscardPreallocationsFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DiscardPreallocationsFtraceEvent'dev
           (\ x__ y__
              -> x__ {_Ext4DiscardPreallocationsFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4DiscardPreallocationsFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DiscardPreallocationsFtraceEvent'ino
           (\ x__ y__
              -> x__ {_Ext4DiscardPreallocationsFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4DiscardPreallocationsFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DiscardPreallocationsFtraceEvent'ino
           (\ x__ y__
              -> x__ {_Ext4DiscardPreallocationsFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4DiscardPreallocationsFtraceEvent "len" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DiscardPreallocationsFtraceEvent'len
           (\ x__ y__
              -> x__ {_Ext4DiscardPreallocationsFtraceEvent'len = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4DiscardPreallocationsFtraceEvent "maybe'len" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DiscardPreallocationsFtraceEvent'len
           (\ x__ y__
              -> x__ {_Ext4DiscardPreallocationsFtraceEvent'len = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4DiscardPreallocationsFtraceEvent "needed" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DiscardPreallocationsFtraceEvent'needed
           (\ x__ y__
              -> x__ {_Ext4DiscardPreallocationsFtraceEvent'needed = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4DiscardPreallocationsFtraceEvent "maybe'needed" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DiscardPreallocationsFtraceEvent'needed
           (\ x__ y__
              -> x__ {_Ext4DiscardPreallocationsFtraceEvent'needed = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4DiscardPreallocationsFtraceEvent where
  messageName _
    = Data.Text.pack
        "perfetto.protos.Ext4DiscardPreallocationsFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \$Ext4DiscardPreallocationsFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DLE\n\
      \\ETXlen\CAN\ETX \SOH(\rR\ETXlen\DC2\SYN\n\
      \\ACKneeded\CAN\EOT \SOH(\rR\ACKneeded"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4DiscardPreallocationsFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4DiscardPreallocationsFtraceEvent
        len__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "len"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'len")) ::
              Data.ProtoLens.FieldDescriptor Ext4DiscardPreallocationsFtraceEvent
        needed__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "needed"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'needed")) ::
              Data.ProtoLens.FieldDescriptor Ext4DiscardPreallocationsFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, len__field_descriptor),
           (Data.ProtoLens.Tag 4, needed__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4DiscardPreallocationsFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__
                {_Ext4DiscardPreallocationsFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4DiscardPreallocationsFtraceEvent'_constructor
        {_Ext4DiscardPreallocationsFtraceEvent'dev = Prelude.Nothing,
         _Ext4DiscardPreallocationsFtraceEvent'ino = Prelude.Nothing,
         _Ext4DiscardPreallocationsFtraceEvent'len = Prelude.Nothing,
         _Ext4DiscardPreallocationsFtraceEvent'needed = Prelude.Nothing,
         _Ext4DiscardPreallocationsFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4DiscardPreallocationsFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4DiscardPreallocationsFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "len"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"len") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "needed"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"needed") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage)
          "Ext4DiscardPreallocationsFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'len") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'needed") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                      (Data.ProtoLens.Encoding.Wire.buildFieldSet
                         (Lens.Family2.view Data.ProtoLens.unknownFields _x)))))
instance Control.DeepSeq.NFData Ext4DiscardPreallocationsFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4DiscardPreallocationsFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4DiscardPreallocationsFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4DiscardPreallocationsFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4DiscardPreallocationsFtraceEvent'len x__)
                      (Control.DeepSeq.deepseq
                         (_Ext4DiscardPreallocationsFtraceEvent'needed x__) ()))))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4DropInodeFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4DropInodeFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4DropInodeFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4DropInodeFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.drop' @:: Lens' Ext4DropInodeFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'drop' @:: Lens' Ext4DropInodeFtraceEvent (Prelude.Maybe Data.Int.Int32)@ -}
data Ext4DropInodeFtraceEvent
  = Ext4DropInodeFtraceEvent'_constructor {_Ext4DropInodeFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                           _Ext4DropInodeFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                           _Ext4DropInodeFtraceEvent'drop :: !(Prelude.Maybe Data.Int.Int32),
                                           _Ext4DropInodeFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4DropInodeFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4DropInodeFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DropInodeFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4DropInodeFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4DropInodeFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DropInodeFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4DropInodeFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4DropInodeFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DropInodeFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4DropInodeFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4DropInodeFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DropInodeFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4DropInodeFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4DropInodeFtraceEvent "drop" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DropInodeFtraceEvent'drop
           (\ x__ y__ -> x__ {_Ext4DropInodeFtraceEvent'drop = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4DropInodeFtraceEvent "maybe'drop" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4DropInodeFtraceEvent'drop
           (\ x__ y__ -> x__ {_Ext4DropInodeFtraceEvent'drop = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4DropInodeFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4DropInodeFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \\CANExt4DropInodeFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DC2\n\
      \\EOTdrop\CAN\ETX \SOH(\ENQR\EOTdrop"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4DropInodeFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4DropInodeFtraceEvent
        drop__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "drop"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'drop")) ::
              Data.ProtoLens.FieldDescriptor Ext4DropInodeFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, drop__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4DropInodeFtraceEvent'_unknownFields
        (\ x__ y__ -> x__ {_Ext4DropInodeFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4DropInodeFtraceEvent'_constructor
        {_Ext4DropInodeFtraceEvent'dev = Prelude.Nothing,
         _Ext4DropInodeFtraceEvent'ino = Prelude.Nothing,
         _Ext4DropInodeFtraceEvent'drop = Prelude.Nothing,
         _Ext4DropInodeFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4DropInodeFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4DropInodeFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "drop"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"drop") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "Ext4DropInodeFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'drop") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   (Data.ProtoLens.Encoding.Wire.buildFieldSet
                      (Lens.Family2.view Data.ProtoLens.unknownFields _x))))
instance Control.DeepSeq.NFData Ext4DropInodeFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4DropInodeFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4DropInodeFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4DropInodeFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq (_Ext4DropInodeFtraceEvent'drop x__) ())))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4EsCacheExtentFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4EsCacheExtentFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4EsCacheExtentFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4EsCacheExtentFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.lblk' @:: Lens' Ext4EsCacheExtentFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'lblk' @:: Lens' Ext4EsCacheExtentFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.len' @:: Lens' Ext4EsCacheExtentFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'len' @:: Lens' Ext4EsCacheExtentFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.pblk' @:: Lens' Ext4EsCacheExtentFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'pblk' @:: Lens' Ext4EsCacheExtentFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.status' @:: Lens' Ext4EsCacheExtentFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'status' @:: Lens' Ext4EsCacheExtentFtraceEvent (Prelude.Maybe Data.Word.Word32)@ -}
data Ext4EsCacheExtentFtraceEvent
  = Ext4EsCacheExtentFtraceEvent'_constructor {_Ext4EsCacheExtentFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                               _Ext4EsCacheExtentFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                               _Ext4EsCacheExtentFtraceEvent'lblk :: !(Prelude.Maybe Data.Word.Word32),
                                               _Ext4EsCacheExtentFtraceEvent'len :: !(Prelude.Maybe Data.Word.Word32),
                                               _Ext4EsCacheExtentFtraceEvent'pblk :: !(Prelude.Maybe Data.Word.Word64),
                                               _Ext4EsCacheExtentFtraceEvent'status :: !(Prelude.Maybe Data.Word.Word32),
                                               _Ext4EsCacheExtentFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4EsCacheExtentFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4EsCacheExtentFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsCacheExtentFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4EsCacheExtentFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4EsCacheExtentFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsCacheExtentFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4EsCacheExtentFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4EsCacheExtentFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsCacheExtentFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4EsCacheExtentFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4EsCacheExtentFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsCacheExtentFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4EsCacheExtentFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4EsCacheExtentFtraceEvent "lblk" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsCacheExtentFtraceEvent'lblk
           (\ x__ y__ -> x__ {_Ext4EsCacheExtentFtraceEvent'lblk = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4EsCacheExtentFtraceEvent "maybe'lblk" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsCacheExtentFtraceEvent'lblk
           (\ x__ y__ -> x__ {_Ext4EsCacheExtentFtraceEvent'lblk = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4EsCacheExtentFtraceEvent "len" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsCacheExtentFtraceEvent'len
           (\ x__ y__ -> x__ {_Ext4EsCacheExtentFtraceEvent'len = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4EsCacheExtentFtraceEvent "maybe'len" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsCacheExtentFtraceEvent'len
           (\ x__ y__ -> x__ {_Ext4EsCacheExtentFtraceEvent'len = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4EsCacheExtentFtraceEvent "pblk" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsCacheExtentFtraceEvent'pblk
           (\ x__ y__ -> x__ {_Ext4EsCacheExtentFtraceEvent'pblk = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4EsCacheExtentFtraceEvent "maybe'pblk" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsCacheExtentFtraceEvent'pblk
           (\ x__ y__ -> x__ {_Ext4EsCacheExtentFtraceEvent'pblk = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4EsCacheExtentFtraceEvent "status" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsCacheExtentFtraceEvent'status
           (\ x__ y__ -> x__ {_Ext4EsCacheExtentFtraceEvent'status = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4EsCacheExtentFtraceEvent "maybe'status" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsCacheExtentFtraceEvent'status
           (\ x__ y__ -> x__ {_Ext4EsCacheExtentFtraceEvent'status = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4EsCacheExtentFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4EsCacheExtentFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \\FSExt4EsCacheExtentFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DC2\n\
      \\EOTlblk\CAN\ETX \SOH(\rR\EOTlblk\DC2\DLE\n\
      \\ETXlen\CAN\EOT \SOH(\rR\ETXlen\DC2\DC2\n\
      \\EOTpblk\CAN\ENQ \SOH(\EOTR\EOTpblk\DC2\SYN\n\
      \\ACKstatus\CAN\ACK \SOH(\rR\ACKstatus"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4EsCacheExtentFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4EsCacheExtentFtraceEvent
        lblk__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "lblk"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'lblk")) ::
              Data.ProtoLens.FieldDescriptor Ext4EsCacheExtentFtraceEvent
        len__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "len"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'len")) ::
              Data.ProtoLens.FieldDescriptor Ext4EsCacheExtentFtraceEvent
        pblk__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "pblk"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'pblk")) ::
              Data.ProtoLens.FieldDescriptor Ext4EsCacheExtentFtraceEvent
        status__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "status"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'status")) ::
              Data.ProtoLens.FieldDescriptor Ext4EsCacheExtentFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, lblk__field_descriptor),
           (Data.ProtoLens.Tag 4, len__field_descriptor),
           (Data.ProtoLens.Tag 5, pblk__field_descriptor),
           (Data.ProtoLens.Tag 6, status__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4EsCacheExtentFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__ {_Ext4EsCacheExtentFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4EsCacheExtentFtraceEvent'_constructor
        {_Ext4EsCacheExtentFtraceEvent'dev = Prelude.Nothing,
         _Ext4EsCacheExtentFtraceEvent'ino = Prelude.Nothing,
         _Ext4EsCacheExtentFtraceEvent'lblk = Prelude.Nothing,
         _Ext4EsCacheExtentFtraceEvent'len = Prelude.Nothing,
         _Ext4EsCacheExtentFtraceEvent'pblk = Prelude.Nothing,
         _Ext4EsCacheExtentFtraceEvent'status = Prelude.Nothing,
         _Ext4EsCacheExtentFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4EsCacheExtentFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4EsCacheExtentFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "lblk"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"lblk") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "len"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"len") y x)
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "pblk"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"pblk") y x)
                        48
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "status"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"status") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "Ext4EsCacheExtentFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'lblk") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'len") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'pblk") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                         ((Data.Monoid.<>)
                            (case
                                 Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'status") _x
                             of
                               Prelude.Nothing -> Data.Monoid.mempty
                               (Prelude.Just _v)
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 48)
                                      ((Prelude..)
                                         Data.ProtoLens.Encoding.Bytes.putVarInt
                                         Prelude.fromIntegral _v))
                            (Data.ProtoLens.Encoding.Wire.buildFieldSet
                               (Lens.Family2.view Data.ProtoLens.unknownFields _x)))))))
instance Control.DeepSeq.NFData Ext4EsCacheExtentFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4EsCacheExtentFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4EsCacheExtentFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4EsCacheExtentFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4EsCacheExtentFtraceEvent'lblk x__)
                      (Control.DeepSeq.deepseq
                         (_Ext4EsCacheExtentFtraceEvent'len x__)
                         (Control.DeepSeq.deepseq
                            (_Ext4EsCacheExtentFtraceEvent'pblk x__)
                            (Control.DeepSeq.deepseq
                               (_Ext4EsCacheExtentFtraceEvent'status x__) ()))))))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4EsFindDelayedExtentRangeEnterFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4EsFindDelayedExtentRangeEnterFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4EsFindDelayedExtentRangeEnterFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4EsFindDelayedExtentRangeEnterFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.lblk' @:: Lens' Ext4EsFindDelayedExtentRangeEnterFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'lblk' @:: Lens' Ext4EsFindDelayedExtentRangeEnterFtraceEvent (Prelude.Maybe Data.Word.Word32)@ -}
data Ext4EsFindDelayedExtentRangeEnterFtraceEvent
  = Ext4EsFindDelayedExtentRangeEnterFtraceEvent'_constructor {_Ext4EsFindDelayedExtentRangeEnterFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                                               _Ext4EsFindDelayedExtentRangeEnterFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                                               _Ext4EsFindDelayedExtentRangeEnterFtraceEvent'lblk :: !(Prelude.Maybe Data.Word.Word32),
                                                               _Ext4EsFindDelayedExtentRangeEnterFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4EsFindDelayedExtentRangeEnterFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4EsFindDelayedExtentRangeEnterFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsFindDelayedExtentRangeEnterFtraceEvent'dev
           (\ x__ y__
              -> x__ {_Ext4EsFindDelayedExtentRangeEnterFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4EsFindDelayedExtentRangeEnterFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsFindDelayedExtentRangeEnterFtraceEvent'dev
           (\ x__ y__
              -> x__ {_Ext4EsFindDelayedExtentRangeEnterFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4EsFindDelayedExtentRangeEnterFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsFindDelayedExtentRangeEnterFtraceEvent'ino
           (\ x__ y__
              -> x__ {_Ext4EsFindDelayedExtentRangeEnterFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4EsFindDelayedExtentRangeEnterFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsFindDelayedExtentRangeEnterFtraceEvent'ino
           (\ x__ y__
              -> x__ {_Ext4EsFindDelayedExtentRangeEnterFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4EsFindDelayedExtentRangeEnterFtraceEvent "lblk" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsFindDelayedExtentRangeEnterFtraceEvent'lblk
           (\ x__ y__
              -> x__ {_Ext4EsFindDelayedExtentRangeEnterFtraceEvent'lblk = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4EsFindDelayedExtentRangeEnterFtraceEvent "maybe'lblk" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsFindDelayedExtentRangeEnterFtraceEvent'lblk
           (\ x__ y__
              -> x__ {_Ext4EsFindDelayedExtentRangeEnterFtraceEvent'lblk = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4EsFindDelayedExtentRangeEnterFtraceEvent where
  messageName _
    = Data.Text.pack
        "perfetto.protos.Ext4EsFindDelayedExtentRangeEnterFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \,Ext4EsFindDelayedExtentRangeEnterFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DC2\n\
      \\EOTlblk\CAN\ETX \SOH(\rR\EOTlblk"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4EsFindDelayedExtentRangeEnterFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4EsFindDelayedExtentRangeEnterFtraceEvent
        lblk__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "lblk"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'lblk")) ::
              Data.ProtoLens.FieldDescriptor Ext4EsFindDelayedExtentRangeEnterFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, lblk__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4EsFindDelayedExtentRangeEnterFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__
                {_Ext4EsFindDelayedExtentRangeEnterFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4EsFindDelayedExtentRangeEnterFtraceEvent'_constructor
        {_Ext4EsFindDelayedExtentRangeEnterFtraceEvent'dev = Prelude.Nothing,
         _Ext4EsFindDelayedExtentRangeEnterFtraceEvent'ino = Prelude.Nothing,
         _Ext4EsFindDelayedExtentRangeEnterFtraceEvent'lblk = Prelude.Nothing,
         _Ext4EsFindDelayedExtentRangeEnterFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4EsFindDelayedExtentRangeEnterFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4EsFindDelayedExtentRangeEnterFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "lblk"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"lblk") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage)
          "Ext4EsFindDelayedExtentRangeEnterFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'lblk") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   (Data.ProtoLens.Encoding.Wire.buildFieldSet
                      (Lens.Family2.view Data.ProtoLens.unknownFields _x))))
instance Control.DeepSeq.NFData Ext4EsFindDelayedExtentRangeEnterFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4EsFindDelayedExtentRangeEnterFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4EsFindDelayedExtentRangeEnterFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4EsFindDelayedExtentRangeEnterFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4EsFindDelayedExtentRangeEnterFtraceEvent'lblk x__) ())))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4EsFindDelayedExtentRangeExitFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4EsFindDelayedExtentRangeExitFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4EsFindDelayedExtentRangeExitFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4EsFindDelayedExtentRangeExitFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.lblk' @:: Lens' Ext4EsFindDelayedExtentRangeExitFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'lblk' @:: Lens' Ext4EsFindDelayedExtentRangeExitFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.len' @:: Lens' Ext4EsFindDelayedExtentRangeExitFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'len' @:: Lens' Ext4EsFindDelayedExtentRangeExitFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.pblk' @:: Lens' Ext4EsFindDelayedExtentRangeExitFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'pblk' @:: Lens' Ext4EsFindDelayedExtentRangeExitFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.status' @:: Lens' Ext4EsFindDelayedExtentRangeExitFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'status' @:: Lens' Ext4EsFindDelayedExtentRangeExitFtraceEvent (Prelude.Maybe Data.Word.Word64)@ -}
data Ext4EsFindDelayedExtentRangeExitFtraceEvent
  = Ext4EsFindDelayedExtentRangeExitFtraceEvent'_constructor {_Ext4EsFindDelayedExtentRangeExitFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                                              _Ext4EsFindDelayedExtentRangeExitFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                                              _Ext4EsFindDelayedExtentRangeExitFtraceEvent'lblk :: !(Prelude.Maybe Data.Word.Word32),
                                                              _Ext4EsFindDelayedExtentRangeExitFtraceEvent'len :: !(Prelude.Maybe Data.Word.Word32),
                                                              _Ext4EsFindDelayedExtentRangeExitFtraceEvent'pblk :: !(Prelude.Maybe Data.Word.Word64),
                                                              _Ext4EsFindDelayedExtentRangeExitFtraceEvent'status :: !(Prelude.Maybe Data.Word.Word64),
                                                              _Ext4EsFindDelayedExtentRangeExitFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4EsFindDelayedExtentRangeExitFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4EsFindDelayedExtentRangeExitFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsFindDelayedExtentRangeExitFtraceEvent'dev
           (\ x__ y__
              -> x__ {_Ext4EsFindDelayedExtentRangeExitFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4EsFindDelayedExtentRangeExitFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsFindDelayedExtentRangeExitFtraceEvent'dev
           (\ x__ y__
              -> x__ {_Ext4EsFindDelayedExtentRangeExitFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4EsFindDelayedExtentRangeExitFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsFindDelayedExtentRangeExitFtraceEvent'ino
           (\ x__ y__
              -> x__ {_Ext4EsFindDelayedExtentRangeExitFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4EsFindDelayedExtentRangeExitFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsFindDelayedExtentRangeExitFtraceEvent'ino
           (\ x__ y__
              -> x__ {_Ext4EsFindDelayedExtentRangeExitFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4EsFindDelayedExtentRangeExitFtraceEvent "lblk" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsFindDelayedExtentRangeExitFtraceEvent'lblk
           (\ x__ y__
              -> x__ {_Ext4EsFindDelayedExtentRangeExitFtraceEvent'lblk = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4EsFindDelayedExtentRangeExitFtraceEvent "maybe'lblk" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsFindDelayedExtentRangeExitFtraceEvent'lblk
           (\ x__ y__
              -> x__ {_Ext4EsFindDelayedExtentRangeExitFtraceEvent'lblk = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4EsFindDelayedExtentRangeExitFtraceEvent "len" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsFindDelayedExtentRangeExitFtraceEvent'len
           (\ x__ y__
              -> x__ {_Ext4EsFindDelayedExtentRangeExitFtraceEvent'len = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4EsFindDelayedExtentRangeExitFtraceEvent "maybe'len" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsFindDelayedExtentRangeExitFtraceEvent'len
           (\ x__ y__
              -> x__ {_Ext4EsFindDelayedExtentRangeExitFtraceEvent'len = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4EsFindDelayedExtentRangeExitFtraceEvent "pblk" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsFindDelayedExtentRangeExitFtraceEvent'pblk
           (\ x__ y__
              -> x__ {_Ext4EsFindDelayedExtentRangeExitFtraceEvent'pblk = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4EsFindDelayedExtentRangeExitFtraceEvent "maybe'pblk" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsFindDelayedExtentRangeExitFtraceEvent'pblk
           (\ x__ y__
              -> x__ {_Ext4EsFindDelayedExtentRangeExitFtraceEvent'pblk = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4EsFindDelayedExtentRangeExitFtraceEvent "status" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsFindDelayedExtentRangeExitFtraceEvent'status
           (\ x__ y__
              -> x__
                   {_Ext4EsFindDelayedExtentRangeExitFtraceEvent'status = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4EsFindDelayedExtentRangeExitFtraceEvent "maybe'status" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsFindDelayedExtentRangeExitFtraceEvent'status
           (\ x__ y__
              -> x__
                   {_Ext4EsFindDelayedExtentRangeExitFtraceEvent'status = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4EsFindDelayedExtentRangeExitFtraceEvent where
  messageName _
    = Data.Text.pack
        "perfetto.protos.Ext4EsFindDelayedExtentRangeExitFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \+Ext4EsFindDelayedExtentRangeExitFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DC2\n\
      \\EOTlblk\CAN\ETX \SOH(\rR\EOTlblk\DC2\DLE\n\
      \\ETXlen\CAN\EOT \SOH(\rR\ETXlen\DC2\DC2\n\
      \\EOTpblk\CAN\ENQ \SOH(\EOTR\EOTpblk\DC2\SYN\n\
      \\ACKstatus\CAN\ACK \SOH(\EOTR\ACKstatus"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4EsFindDelayedExtentRangeExitFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4EsFindDelayedExtentRangeExitFtraceEvent
        lblk__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "lblk"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'lblk")) ::
              Data.ProtoLens.FieldDescriptor Ext4EsFindDelayedExtentRangeExitFtraceEvent
        len__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "len"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'len")) ::
              Data.ProtoLens.FieldDescriptor Ext4EsFindDelayedExtentRangeExitFtraceEvent
        pblk__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "pblk"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'pblk")) ::
              Data.ProtoLens.FieldDescriptor Ext4EsFindDelayedExtentRangeExitFtraceEvent
        status__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "status"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'status")) ::
              Data.ProtoLens.FieldDescriptor Ext4EsFindDelayedExtentRangeExitFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, lblk__field_descriptor),
           (Data.ProtoLens.Tag 4, len__field_descriptor),
           (Data.ProtoLens.Tag 5, pblk__field_descriptor),
           (Data.ProtoLens.Tag 6, status__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4EsFindDelayedExtentRangeExitFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__
                {_Ext4EsFindDelayedExtentRangeExitFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4EsFindDelayedExtentRangeExitFtraceEvent'_constructor
        {_Ext4EsFindDelayedExtentRangeExitFtraceEvent'dev = Prelude.Nothing,
         _Ext4EsFindDelayedExtentRangeExitFtraceEvent'ino = Prelude.Nothing,
         _Ext4EsFindDelayedExtentRangeExitFtraceEvent'lblk = Prelude.Nothing,
         _Ext4EsFindDelayedExtentRangeExitFtraceEvent'len = Prelude.Nothing,
         _Ext4EsFindDelayedExtentRangeExitFtraceEvent'pblk = Prelude.Nothing,
         _Ext4EsFindDelayedExtentRangeExitFtraceEvent'status = Prelude.Nothing,
         _Ext4EsFindDelayedExtentRangeExitFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4EsFindDelayedExtentRangeExitFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4EsFindDelayedExtentRangeExitFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "lblk"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"lblk") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "len"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"len") y x)
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "pblk"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"pblk") y x)
                        48
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "status"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"status") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage)
          "Ext4EsFindDelayedExtentRangeExitFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'lblk") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'len") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'pblk") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                         ((Data.Monoid.<>)
                            (case
                                 Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'status") _x
                             of
                               Prelude.Nothing -> Data.Monoid.mempty
                               (Prelude.Just _v)
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 48)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                            (Data.ProtoLens.Encoding.Wire.buildFieldSet
                               (Lens.Family2.view Data.ProtoLens.unknownFields _x)))))))
instance Control.DeepSeq.NFData Ext4EsFindDelayedExtentRangeExitFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4EsFindDelayedExtentRangeExitFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4EsFindDelayedExtentRangeExitFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4EsFindDelayedExtentRangeExitFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4EsFindDelayedExtentRangeExitFtraceEvent'lblk x__)
                      (Control.DeepSeq.deepseq
                         (_Ext4EsFindDelayedExtentRangeExitFtraceEvent'len x__)
                         (Control.DeepSeq.deepseq
                            (_Ext4EsFindDelayedExtentRangeExitFtraceEvent'pblk x__)
                            (Control.DeepSeq.deepseq
                               (_Ext4EsFindDelayedExtentRangeExitFtraceEvent'status x__) ()))))))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4EsInsertExtentFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4EsInsertExtentFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4EsInsertExtentFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4EsInsertExtentFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.lblk' @:: Lens' Ext4EsInsertExtentFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'lblk' @:: Lens' Ext4EsInsertExtentFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.len' @:: Lens' Ext4EsInsertExtentFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'len' @:: Lens' Ext4EsInsertExtentFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.pblk' @:: Lens' Ext4EsInsertExtentFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'pblk' @:: Lens' Ext4EsInsertExtentFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.status' @:: Lens' Ext4EsInsertExtentFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'status' @:: Lens' Ext4EsInsertExtentFtraceEvent (Prelude.Maybe Data.Word.Word64)@ -}
data Ext4EsInsertExtentFtraceEvent
  = Ext4EsInsertExtentFtraceEvent'_constructor {_Ext4EsInsertExtentFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                                _Ext4EsInsertExtentFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                                _Ext4EsInsertExtentFtraceEvent'lblk :: !(Prelude.Maybe Data.Word.Word32),
                                                _Ext4EsInsertExtentFtraceEvent'len :: !(Prelude.Maybe Data.Word.Word32),
                                                _Ext4EsInsertExtentFtraceEvent'pblk :: !(Prelude.Maybe Data.Word.Word64),
                                                _Ext4EsInsertExtentFtraceEvent'status :: !(Prelude.Maybe Data.Word.Word64),
                                                _Ext4EsInsertExtentFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4EsInsertExtentFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4EsInsertExtentFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsInsertExtentFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4EsInsertExtentFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4EsInsertExtentFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsInsertExtentFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4EsInsertExtentFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4EsInsertExtentFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsInsertExtentFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4EsInsertExtentFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4EsInsertExtentFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsInsertExtentFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4EsInsertExtentFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4EsInsertExtentFtraceEvent "lblk" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsInsertExtentFtraceEvent'lblk
           (\ x__ y__ -> x__ {_Ext4EsInsertExtentFtraceEvent'lblk = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4EsInsertExtentFtraceEvent "maybe'lblk" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsInsertExtentFtraceEvent'lblk
           (\ x__ y__ -> x__ {_Ext4EsInsertExtentFtraceEvent'lblk = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4EsInsertExtentFtraceEvent "len" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsInsertExtentFtraceEvent'len
           (\ x__ y__ -> x__ {_Ext4EsInsertExtentFtraceEvent'len = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4EsInsertExtentFtraceEvent "maybe'len" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsInsertExtentFtraceEvent'len
           (\ x__ y__ -> x__ {_Ext4EsInsertExtentFtraceEvent'len = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4EsInsertExtentFtraceEvent "pblk" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsInsertExtentFtraceEvent'pblk
           (\ x__ y__ -> x__ {_Ext4EsInsertExtentFtraceEvent'pblk = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4EsInsertExtentFtraceEvent "maybe'pblk" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsInsertExtentFtraceEvent'pblk
           (\ x__ y__ -> x__ {_Ext4EsInsertExtentFtraceEvent'pblk = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4EsInsertExtentFtraceEvent "status" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsInsertExtentFtraceEvent'status
           (\ x__ y__ -> x__ {_Ext4EsInsertExtentFtraceEvent'status = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4EsInsertExtentFtraceEvent "maybe'status" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsInsertExtentFtraceEvent'status
           (\ x__ y__ -> x__ {_Ext4EsInsertExtentFtraceEvent'status = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4EsInsertExtentFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4EsInsertExtentFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \\GSExt4EsInsertExtentFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DC2\n\
      \\EOTlblk\CAN\ETX \SOH(\rR\EOTlblk\DC2\DLE\n\
      \\ETXlen\CAN\EOT \SOH(\rR\ETXlen\DC2\DC2\n\
      \\EOTpblk\CAN\ENQ \SOH(\EOTR\EOTpblk\DC2\SYN\n\
      \\ACKstatus\CAN\ACK \SOH(\EOTR\ACKstatus"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4EsInsertExtentFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4EsInsertExtentFtraceEvent
        lblk__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "lblk"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'lblk")) ::
              Data.ProtoLens.FieldDescriptor Ext4EsInsertExtentFtraceEvent
        len__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "len"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'len")) ::
              Data.ProtoLens.FieldDescriptor Ext4EsInsertExtentFtraceEvent
        pblk__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "pblk"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'pblk")) ::
              Data.ProtoLens.FieldDescriptor Ext4EsInsertExtentFtraceEvent
        status__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "status"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'status")) ::
              Data.ProtoLens.FieldDescriptor Ext4EsInsertExtentFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, lblk__field_descriptor),
           (Data.ProtoLens.Tag 4, len__field_descriptor),
           (Data.ProtoLens.Tag 5, pblk__field_descriptor),
           (Data.ProtoLens.Tag 6, status__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4EsInsertExtentFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__ {_Ext4EsInsertExtentFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4EsInsertExtentFtraceEvent'_constructor
        {_Ext4EsInsertExtentFtraceEvent'dev = Prelude.Nothing,
         _Ext4EsInsertExtentFtraceEvent'ino = Prelude.Nothing,
         _Ext4EsInsertExtentFtraceEvent'lblk = Prelude.Nothing,
         _Ext4EsInsertExtentFtraceEvent'len = Prelude.Nothing,
         _Ext4EsInsertExtentFtraceEvent'pblk = Prelude.Nothing,
         _Ext4EsInsertExtentFtraceEvent'status = Prelude.Nothing,
         _Ext4EsInsertExtentFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4EsInsertExtentFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4EsInsertExtentFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "lblk"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"lblk") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "len"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"len") y x)
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "pblk"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"pblk") y x)
                        48
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "status"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"status") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "Ext4EsInsertExtentFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'lblk") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'len") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'pblk") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                         ((Data.Monoid.<>)
                            (case
                                 Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'status") _x
                             of
                               Prelude.Nothing -> Data.Monoid.mempty
                               (Prelude.Just _v)
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 48)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                            (Data.ProtoLens.Encoding.Wire.buildFieldSet
                               (Lens.Family2.view Data.ProtoLens.unknownFields _x)))))))
instance Control.DeepSeq.NFData Ext4EsInsertExtentFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4EsInsertExtentFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4EsInsertExtentFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4EsInsertExtentFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4EsInsertExtentFtraceEvent'lblk x__)
                      (Control.DeepSeq.deepseq
                         (_Ext4EsInsertExtentFtraceEvent'len x__)
                         (Control.DeepSeq.deepseq
                            (_Ext4EsInsertExtentFtraceEvent'pblk x__)
                            (Control.DeepSeq.deepseq
                               (_Ext4EsInsertExtentFtraceEvent'status x__) ()))))))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4EsLookupExtentEnterFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4EsLookupExtentEnterFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4EsLookupExtentEnterFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4EsLookupExtentEnterFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.lblk' @:: Lens' Ext4EsLookupExtentEnterFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'lblk' @:: Lens' Ext4EsLookupExtentEnterFtraceEvent (Prelude.Maybe Data.Word.Word32)@ -}
data Ext4EsLookupExtentEnterFtraceEvent
  = Ext4EsLookupExtentEnterFtraceEvent'_constructor {_Ext4EsLookupExtentEnterFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                                     _Ext4EsLookupExtentEnterFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                                     _Ext4EsLookupExtentEnterFtraceEvent'lblk :: !(Prelude.Maybe Data.Word.Word32),
                                                     _Ext4EsLookupExtentEnterFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4EsLookupExtentEnterFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4EsLookupExtentEnterFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsLookupExtentEnterFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4EsLookupExtentEnterFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4EsLookupExtentEnterFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsLookupExtentEnterFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4EsLookupExtentEnterFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4EsLookupExtentEnterFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsLookupExtentEnterFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4EsLookupExtentEnterFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4EsLookupExtentEnterFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsLookupExtentEnterFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4EsLookupExtentEnterFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4EsLookupExtentEnterFtraceEvent "lblk" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsLookupExtentEnterFtraceEvent'lblk
           (\ x__ y__
              -> x__ {_Ext4EsLookupExtentEnterFtraceEvent'lblk = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4EsLookupExtentEnterFtraceEvent "maybe'lblk" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsLookupExtentEnterFtraceEvent'lblk
           (\ x__ y__
              -> x__ {_Ext4EsLookupExtentEnterFtraceEvent'lblk = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4EsLookupExtentEnterFtraceEvent where
  messageName _
    = Data.Text.pack
        "perfetto.protos.Ext4EsLookupExtentEnterFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \\"Ext4EsLookupExtentEnterFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DC2\n\
      \\EOTlblk\CAN\ETX \SOH(\rR\EOTlblk"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4EsLookupExtentEnterFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4EsLookupExtentEnterFtraceEvent
        lblk__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "lblk"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'lblk")) ::
              Data.ProtoLens.FieldDescriptor Ext4EsLookupExtentEnterFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, lblk__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4EsLookupExtentEnterFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__ {_Ext4EsLookupExtentEnterFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4EsLookupExtentEnterFtraceEvent'_constructor
        {_Ext4EsLookupExtentEnterFtraceEvent'dev = Prelude.Nothing,
         _Ext4EsLookupExtentEnterFtraceEvent'ino = Prelude.Nothing,
         _Ext4EsLookupExtentEnterFtraceEvent'lblk = Prelude.Nothing,
         _Ext4EsLookupExtentEnterFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4EsLookupExtentEnterFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4EsLookupExtentEnterFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "lblk"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"lblk") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage)
          "Ext4EsLookupExtentEnterFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'lblk") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   (Data.ProtoLens.Encoding.Wire.buildFieldSet
                      (Lens.Family2.view Data.ProtoLens.unknownFields _x))))
instance Control.DeepSeq.NFData Ext4EsLookupExtentEnterFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4EsLookupExtentEnterFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4EsLookupExtentEnterFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4EsLookupExtentEnterFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4EsLookupExtentEnterFtraceEvent'lblk x__) ())))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4EsLookupExtentExitFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4EsLookupExtentExitFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4EsLookupExtentExitFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4EsLookupExtentExitFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.lblk' @:: Lens' Ext4EsLookupExtentExitFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'lblk' @:: Lens' Ext4EsLookupExtentExitFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.len' @:: Lens' Ext4EsLookupExtentExitFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'len' @:: Lens' Ext4EsLookupExtentExitFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.pblk' @:: Lens' Ext4EsLookupExtentExitFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'pblk' @:: Lens' Ext4EsLookupExtentExitFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.status' @:: Lens' Ext4EsLookupExtentExitFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'status' @:: Lens' Ext4EsLookupExtentExitFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.found' @:: Lens' Ext4EsLookupExtentExitFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'found' @:: Lens' Ext4EsLookupExtentExitFtraceEvent (Prelude.Maybe Data.Int.Int32)@ -}
data Ext4EsLookupExtentExitFtraceEvent
  = Ext4EsLookupExtentExitFtraceEvent'_constructor {_Ext4EsLookupExtentExitFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                                    _Ext4EsLookupExtentExitFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                                    _Ext4EsLookupExtentExitFtraceEvent'lblk :: !(Prelude.Maybe Data.Word.Word32),
                                                    _Ext4EsLookupExtentExitFtraceEvent'len :: !(Prelude.Maybe Data.Word.Word32),
                                                    _Ext4EsLookupExtentExitFtraceEvent'pblk :: !(Prelude.Maybe Data.Word.Word64),
                                                    _Ext4EsLookupExtentExitFtraceEvent'status :: !(Prelude.Maybe Data.Word.Word64),
                                                    _Ext4EsLookupExtentExitFtraceEvent'found :: !(Prelude.Maybe Data.Int.Int32),
                                                    _Ext4EsLookupExtentExitFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4EsLookupExtentExitFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4EsLookupExtentExitFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsLookupExtentExitFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4EsLookupExtentExitFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4EsLookupExtentExitFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsLookupExtentExitFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4EsLookupExtentExitFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4EsLookupExtentExitFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsLookupExtentExitFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4EsLookupExtentExitFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4EsLookupExtentExitFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsLookupExtentExitFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4EsLookupExtentExitFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4EsLookupExtentExitFtraceEvent "lblk" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsLookupExtentExitFtraceEvent'lblk
           (\ x__ y__ -> x__ {_Ext4EsLookupExtentExitFtraceEvent'lblk = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4EsLookupExtentExitFtraceEvent "maybe'lblk" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsLookupExtentExitFtraceEvent'lblk
           (\ x__ y__ -> x__ {_Ext4EsLookupExtentExitFtraceEvent'lblk = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4EsLookupExtentExitFtraceEvent "len" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsLookupExtentExitFtraceEvent'len
           (\ x__ y__ -> x__ {_Ext4EsLookupExtentExitFtraceEvent'len = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4EsLookupExtentExitFtraceEvent "maybe'len" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsLookupExtentExitFtraceEvent'len
           (\ x__ y__ -> x__ {_Ext4EsLookupExtentExitFtraceEvent'len = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4EsLookupExtentExitFtraceEvent "pblk" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsLookupExtentExitFtraceEvent'pblk
           (\ x__ y__ -> x__ {_Ext4EsLookupExtentExitFtraceEvent'pblk = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4EsLookupExtentExitFtraceEvent "maybe'pblk" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsLookupExtentExitFtraceEvent'pblk
           (\ x__ y__ -> x__ {_Ext4EsLookupExtentExitFtraceEvent'pblk = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4EsLookupExtentExitFtraceEvent "status" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsLookupExtentExitFtraceEvent'status
           (\ x__ y__
              -> x__ {_Ext4EsLookupExtentExitFtraceEvent'status = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4EsLookupExtentExitFtraceEvent "maybe'status" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsLookupExtentExitFtraceEvent'status
           (\ x__ y__
              -> x__ {_Ext4EsLookupExtentExitFtraceEvent'status = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4EsLookupExtentExitFtraceEvent "found" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsLookupExtentExitFtraceEvent'found
           (\ x__ y__
              -> x__ {_Ext4EsLookupExtentExitFtraceEvent'found = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4EsLookupExtentExitFtraceEvent "maybe'found" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsLookupExtentExitFtraceEvent'found
           (\ x__ y__
              -> x__ {_Ext4EsLookupExtentExitFtraceEvent'found = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4EsLookupExtentExitFtraceEvent where
  messageName _
    = Data.Text.pack
        "perfetto.protos.Ext4EsLookupExtentExitFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \!Ext4EsLookupExtentExitFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DC2\n\
      \\EOTlblk\CAN\ETX \SOH(\rR\EOTlblk\DC2\DLE\n\
      \\ETXlen\CAN\EOT \SOH(\rR\ETXlen\DC2\DC2\n\
      \\EOTpblk\CAN\ENQ \SOH(\EOTR\EOTpblk\DC2\SYN\n\
      \\ACKstatus\CAN\ACK \SOH(\EOTR\ACKstatus\DC2\DC4\n\
      \\ENQfound\CAN\a \SOH(\ENQR\ENQfound"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4EsLookupExtentExitFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4EsLookupExtentExitFtraceEvent
        lblk__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "lblk"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'lblk")) ::
              Data.ProtoLens.FieldDescriptor Ext4EsLookupExtentExitFtraceEvent
        len__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "len"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'len")) ::
              Data.ProtoLens.FieldDescriptor Ext4EsLookupExtentExitFtraceEvent
        pblk__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "pblk"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'pblk")) ::
              Data.ProtoLens.FieldDescriptor Ext4EsLookupExtentExitFtraceEvent
        status__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "status"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'status")) ::
              Data.ProtoLens.FieldDescriptor Ext4EsLookupExtentExitFtraceEvent
        found__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "found"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'found")) ::
              Data.ProtoLens.FieldDescriptor Ext4EsLookupExtentExitFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, lblk__field_descriptor),
           (Data.ProtoLens.Tag 4, len__field_descriptor),
           (Data.ProtoLens.Tag 5, pblk__field_descriptor),
           (Data.ProtoLens.Tag 6, status__field_descriptor),
           (Data.ProtoLens.Tag 7, found__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4EsLookupExtentExitFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__ {_Ext4EsLookupExtentExitFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4EsLookupExtentExitFtraceEvent'_constructor
        {_Ext4EsLookupExtentExitFtraceEvent'dev = Prelude.Nothing,
         _Ext4EsLookupExtentExitFtraceEvent'ino = Prelude.Nothing,
         _Ext4EsLookupExtentExitFtraceEvent'lblk = Prelude.Nothing,
         _Ext4EsLookupExtentExitFtraceEvent'len = Prelude.Nothing,
         _Ext4EsLookupExtentExitFtraceEvent'pblk = Prelude.Nothing,
         _Ext4EsLookupExtentExitFtraceEvent'status = Prelude.Nothing,
         _Ext4EsLookupExtentExitFtraceEvent'found = Prelude.Nothing,
         _Ext4EsLookupExtentExitFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4EsLookupExtentExitFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4EsLookupExtentExitFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "lblk"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"lblk") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "len"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"len") y x)
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "pblk"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"pblk") y x)
                        48
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "status"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"status") y x)
                        56
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "found"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"found") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage)
          "Ext4EsLookupExtentExitFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'lblk") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'len") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'pblk") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                         ((Data.Monoid.<>)
                            (case
                                 Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'status") _x
                             of
                               Prelude.Nothing -> Data.Monoid.mempty
                               (Prelude.Just _v)
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 48)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                            ((Data.Monoid.<>)
                               (case
                                    Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'found") _x
                                of
                                  Prelude.Nothing -> Data.Monoid.mempty
                                  (Prelude.Just _v)
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt 56)
                                         ((Prelude..)
                                            Data.ProtoLens.Encoding.Bytes.putVarInt
                                            Prelude.fromIntegral _v))
                               (Data.ProtoLens.Encoding.Wire.buildFieldSet
                                  (Lens.Family2.view Data.ProtoLens.unknownFields _x))))))))
instance Control.DeepSeq.NFData Ext4EsLookupExtentExitFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4EsLookupExtentExitFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4EsLookupExtentExitFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4EsLookupExtentExitFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4EsLookupExtentExitFtraceEvent'lblk x__)
                      (Control.DeepSeq.deepseq
                         (_Ext4EsLookupExtentExitFtraceEvent'len x__)
                         (Control.DeepSeq.deepseq
                            (_Ext4EsLookupExtentExitFtraceEvent'pblk x__)
                            (Control.DeepSeq.deepseq
                               (_Ext4EsLookupExtentExitFtraceEvent'status x__)
                               (Control.DeepSeq.deepseq
                                  (_Ext4EsLookupExtentExitFtraceEvent'found x__) ())))))))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4EsRemoveExtentFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4EsRemoveExtentFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4EsRemoveExtentFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4EsRemoveExtentFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.lblk' @:: Lens' Ext4EsRemoveExtentFtraceEvent Data.Int.Int64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'lblk' @:: Lens' Ext4EsRemoveExtentFtraceEvent (Prelude.Maybe Data.Int.Int64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.len' @:: Lens' Ext4EsRemoveExtentFtraceEvent Data.Int.Int64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'len' @:: Lens' Ext4EsRemoveExtentFtraceEvent (Prelude.Maybe Data.Int.Int64)@ -}
data Ext4EsRemoveExtentFtraceEvent
  = Ext4EsRemoveExtentFtraceEvent'_constructor {_Ext4EsRemoveExtentFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                                _Ext4EsRemoveExtentFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                                _Ext4EsRemoveExtentFtraceEvent'lblk :: !(Prelude.Maybe Data.Int.Int64),
                                                _Ext4EsRemoveExtentFtraceEvent'len :: !(Prelude.Maybe Data.Int.Int64),
                                                _Ext4EsRemoveExtentFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4EsRemoveExtentFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4EsRemoveExtentFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsRemoveExtentFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4EsRemoveExtentFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4EsRemoveExtentFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsRemoveExtentFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4EsRemoveExtentFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4EsRemoveExtentFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsRemoveExtentFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4EsRemoveExtentFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4EsRemoveExtentFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsRemoveExtentFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4EsRemoveExtentFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4EsRemoveExtentFtraceEvent "lblk" Data.Int.Int64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsRemoveExtentFtraceEvent'lblk
           (\ x__ y__ -> x__ {_Ext4EsRemoveExtentFtraceEvent'lblk = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4EsRemoveExtentFtraceEvent "maybe'lblk" (Prelude.Maybe Data.Int.Int64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsRemoveExtentFtraceEvent'lblk
           (\ x__ y__ -> x__ {_Ext4EsRemoveExtentFtraceEvent'lblk = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4EsRemoveExtentFtraceEvent "len" Data.Int.Int64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsRemoveExtentFtraceEvent'len
           (\ x__ y__ -> x__ {_Ext4EsRemoveExtentFtraceEvent'len = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4EsRemoveExtentFtraceEvent "maybe'len" (Prelude.Maybe Data.Int.Int64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsRemoveExtentFtraceEvent'len
           (\ x__ y__ -> x__ {_Ext4EsRemoveExtentFtraceEvent'len = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4EsRemoveExtentFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4EsRemoveExtentFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \\GSExt4EsRemoveExtentFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DC2\n\
      \\EOTlblk\CAN\ETX \SOH(\ETXR\EOTlblk\DC2\DLE\n\
      \\ETXlen\CAN\EOT \SOH(\ETXR\ETXlen"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4EsRemoveExtentFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4EsRemoveExtentFtraceEvent
        lblk__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "lblk"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'lblk")) ::
              Data.ProtoLens.FieldDescriptor Ext4EsRemoveExtentFtraceEvent
        len__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "len"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'len")) ::
              Data.ProtoLens.FieldDescriptor Ext4EsRemoveExtentFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, lblk__field_descriptor),
           (Data.ProtoLens.Tag 4, len__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4EsRemoveExtentFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__ {_Ext4EsRemoveExtentFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4EsRemoveExtentFtraceEvent'_constructor
        {_Ext4EsRemoveExtentFtraceEvent'dev = Prelude.Nothing,
         _Ext4EsRemoveExtentFtraceEvent'ino = Prelude.Nothing,
         _Ext4EsRemoveExtentFtraceEvent'lblk = Prelude.Nothing,
         _Ext4EsRemoveExtentFtraceEvent'len = Prelude.Nothing,
         _Ext4EsRemoveExtentFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4EsRemoveExtentFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4EsRemoveExtentFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "lblk"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"lblk") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "len"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"len") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "Ext4EsRemoveExtentFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'lblk") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'len") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                      (Data.ProtoLens.Encoding.Wire.buildFieldSet
                         (Lens.Family2.view Data.ProtoLens.unknownFields _x)))))
instance Control.DeepSeq.NFData Ext4EsRemoveExtentFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4EsRemoveExtentFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4EsRemoveExtentFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4EsRemoveExtentFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4EsRemoveExtentFtraceEvent'lblk x__)
                      (Control.DeepSeq.deepseq
                         (_Ext4EsRemoveExtentFtraceEvent'len x__) ()))))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4EsShrinkCountFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4EsShrinkCountFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.nrToScan' @:: Lens' Ext4EsShrinkCountFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'nrToScan' @:: Lens' Ext4EsShrinkCountFtraceEvent (Prelude.Maybe Data.Int.Int32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.cacheCnt' @:: Lens' Ext4EsShrinkCountFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'cacheCnt' @:: Lens' Ext4EsShrinkCountFtraceEvent (Prelude.Maybe Data.Int.Int32)@ -}
data Ext4EsShrinkCountFtraceEvent
  = Ext4EsShrinkCountFtraceEvent'_constructor {_Ext4EsShrinkCountFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                               _Ext4EsShrinkCountFtraceEvent'nrToScan :: !(Prelude.Maybe Data.Int.Int32),
                                               _Ext4EsShrinkCountFtraceEvent'cacheCnt :: !(Prelude.Maybe Data.Int.Int32),
                                               _Ext4EsShrinkCountFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4EsShrinkCountFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4EsShrinkCountFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsShrinkCountFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4EsShrinkCountFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4EsShrinkCountFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsShrinkCountFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4EsShrinkCountFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4EsShrinkCountFtraceEvent "nrToScan" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsShrinkCountFtraceEvent'nrToScan
           (\ x__ y__ -> x__ {_Ext4EsShrinkCountFtraceEvent'nrToScan = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4EsShrinkCountFtraceEvent "maybe'nrToScan" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsShrinkCountFtraceEvent'nrToScan
           (\ x__ y__ -> x__ {_Ext4EsShrinkCountFtraceEvent'nrToScan = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4EsShrinkCountFtraceEvent "cacheCnt" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsShrinkCountFtraceEvent'cacheCnt
           (\ x__ y__ -> x__ {_Ext4EsShrinkCountFtraceEvent'cacheCnt = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4EsShrinkCountFtraceEvent "maybe'cacheCnt" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsShrinkCountFtraceEvent'cacheCnt
           (\ x__ y__ -> x__ {_Ext4EsShrinkCountFtraceEvent'cacheCnt = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4EsShrinkCountFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4EsShrinkCountFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \\FSExt4EsShrinkCountFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\FS\n\
      \\n\
      \nr_to_scan\CAN\STX \SOH(\ENQR\bnrToScan\DC2\ESC\n\
      \\tcache_cnt\CAN\ETX \SOH(\ENQR\bcacheCnt"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4EsShrinkCountFtraceEvent
        nrToScan__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "nr_to_scan"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'nrToScan")) ::
              Data.ProtoLens.FieldDescriptor Ext4EsShrinkCountFtraceEvent
        cacheCnt__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "cache_cnt"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'cacheCnt")) ::
              Data.ProtoLens.FieldDescriptor Ext4EsShrinkCountFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, nrToScan__field_descriptor),
           (Data.ProtoLens.Tag 3, cacheCnt__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4EsShrinkCountFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__ {_Ext4EsShrinkCountFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4EsShrinkCountFtraceEvent'_constructor
        {_Ext4EsShrinkCountFtraceEvent'dev = Prelude.Nothing,
         _Ext4EsShrinkCountFtraceEvent'nrToScan = Prelude.Nothing,
         _Ext4EsShrinkCountFtraceEvent'cacheCnt = Prelude.Nothing,
         _Ext4EsShrinkCountFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4EsShrinkCountFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4EsShrinkCountFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "nr_to_scan"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"nrToScan") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "cache_cnt"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"cacheCnt") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "Ext4EsShrinkCountFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'nrToScan") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          ((Prelude..)
                             Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'cacheCnt") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   (Data.ProtoLens.Encoding.Wire.buildFieldSet
                      (Lens.Family2.view Data.ProtoLens.unknownFields _x))))
instance Control.DeepSeq.NFData Ext4EsShrinkCountFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4EsShrinkCountFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4EsShrinkCountFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4EsShrinkCountFtraceEvent'nrToScan x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4EsShrinkCountFtraceEvent'cacheCnt x__) ())))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4EsShrinkFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4EsShrinkFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.nrShrunk' @:: Lens' Ext4EsShrinkFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'nrShrunk' @:: Lens' Ext4EsShrinkFtraceEvent (Prelude.Maybe Data.Int.Int32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.scanTime' @:: Lens' Ext4EsShrinkFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'scanTime' @:: Lens' Ext4EsShrinkFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.nrSkipped' @:: Lens' Ext4EsShrinkFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'nrSkipped' @:: Lens' Ext4EsShrinkFtraceEvent (Prelude.Maybe Data.Int.Int32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.retried' @:: Lens' Ext4EsShrinkFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'retried' @:: Lens' Ext4EsShrinkFtraceEvent (Prelude.Maybe Data.Int.Int32)@ -}
data Ext4EsShrinkFtraceEvent
  = Ext4EsShrinkFtraceEvent'_constructor {_Ext4EsShrinkFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                          _Ext4EsShrinkFtraceEvent'nrShrunk :: !(Prelude.Maybe Data.Int.Int32),
                                          _Ext4EsShrinkFtraceEvent'scanTime :: !(Prelude.Maybe Data.Word.Word64),
                                          _Ext4EsShrinkFtraceEvent'nrSkipped :: !(Prelude.Maybe Data.Int.Int32),
                                          _Ext4EsShrinkFtraceEvent'retried :: !(Prelude.Maybe Data.Int.Int32),
                                          _Ext4EsShrinkFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4EsShrinkFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4EsShrinkFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsShrinkFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4EsShrinkFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4EsShrinkFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsShrinkFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4EsShrinkFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4EsShrinkFtraceEvent "nrShrunk" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsShrinkFtraceEvent'nrShrunk
           (\ x__ y__ -> x__ {_Ext4EsShrinkFtraceEvent'nrShrunk = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4EsShrinkFtraceEvent "maybe'nrShrunk" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsShrinkFtraceEvent'nrShrunk
           (\ x__ y__ -> x__ {_Ext4EsShrinkFtraceEvent'nrShrunk = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4EsShrinkFtraceEvent "scanTime" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsShrinkFtraceEvent'scanTime
           (\ x__ y__ -> x__ {_Ext4EsShrinkFtraceEvent'scanTime = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4EsShrinkFtraceEvent "maybe'scanTime" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsShrinkFtraceEvent'scanTime
           (\ x__ y__ -> x__ {_Ext4EsShrinkFtraceEvent'scanTime = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4EsShrinkFtraceEvent "nrSkipped" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsShrinkFtraceEvent'nrSkipped
           (\ x__ y__ -> x__ {_Ext4EsShrinkFtraceEvent'nrSkipped = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4EsShrinkFtraceEvent "maybe'nrSkipped" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsShrinkFtraceEvent'nrSkipped
           (\ x__ y__ -> x__ {_Ext4EsShrinkFtraceEvent'nrSkipped = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4EsShrinkFtraceEvent "retried" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsShrinkFtraceEvent'retried
           (\ x__ y__ -> x__ {_Ext4EsShrinkFtraceEvent'retried = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4EsShrinkFtraceEvent "maybe'retried" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsShrinkFtraceEvent'retried
           (\ x__ y__ -> x__ {_Ext4EsShrinkFtraceEvent'retried = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4EsShrinkFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4EsShrinkFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \\ETBExt4EsShrinkFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\ESC\n\
      \\tnr_shrunk\CAN\STX \SOH(\ENQR\bnrShrunk\DC2\ESC\n\
      \\tscan_time\CAN\ETX \SOH(\EOTR\bscanTime\DC2\GS\n\
      \\n\
      \nr_skipped\CAN\EOT \SOH(\ENQR\tnrSkipped\DC2\CAN\n\
      \\aretried\CAN\ENQ \SOH(\ENQR\aretried"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4EsShrinkFtraceEvent
        nrShrunk__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "nr_shrunk"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'nrShrunk")) ::
              Data.ProtoLens.FieldDescriptor Ext4EsShrinkFtraceEvent
        scanTime__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "scan_time"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'scanTime")) ::
              Data.ProtoLens.FieldDescriptor Ext4EsShrinkFtraceEvent
        nrSkipped__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "nr_skipped"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'nrSkipped")) ::
              Data.ProtoLens.FieldDescriptor Ext4EsShrinkFtraceEvent
        retried__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "retried"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'retried")) ::
              Data.ProtoLens.FieldDescriptor Ext4EsShrinkFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, nrShrunk__field_descriptor),
           (Data.ProtoLens.Tag 3, scanTime__field_descriptor),
           (Data.ProtoLens.Tag 4, nrSkipped__field_descriptor),
           (Data.ProtoLens.Tag 5, retried__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4EsShrinkFtraceEvent'_unknownFields
        (\ x__ y__ -> x__ {_Ext4EsShrinkFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4EsShrinkFtraceEvent'_constructor
        {_Ext4EsShrinkFtraceEvent'dev = Prelude.Nothing,
         _Ext4EsShrinkFtraceEvent'nrShrunk = Prelude.Nothing,
         _Ext4EsShrinkFtraceEvent'scanTime = Prelude.Nothing,
         _Ext4EsShrinkFtraceEvent'nrSkipped = Prelude.Nothing,
         _Ext4EsShrinkFtraceEvent'retried = Prelude.Nothing,
         _Ext4EsShrinkFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4EsShrinkFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4EsShrinkFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "nr_shrunk"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"nrShrunk") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "scan_time"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"scanTime") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "nr_skipped"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"nrSkipped") y x)
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "retried"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"retried") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "Ext4EsShrinkFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'nrShrunk") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          ((Prelude..)
                             Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'scanTime") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view
                             (Data.ProtoLens.Field.field @"maybe'nrSkipped") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'retried") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral
                                      _v))
                         (Data.ProtoLens.Encoding.Wire.buildFieldSet
                            (Lens.Family2.view Data.ProtoLens.unknownFields _x))))))
instance Control.DeepSeq.NFData Ext4EsShrinkFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4EsShrinkFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4EsShrinkFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4EsShrinkFtraceEvent'nrShrunk x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4EsShrinkFtraceEvent'scanTime x__)
                      (Control.DeepSeq.deepseq
                         (_Ext4EsShrinkFtraceEvent'nrSkipped x__)
                         (Control.DeepSeq.deepseq
                            (_Ext4EsShrinkFtraceEvent'retried x__) ())))))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4EsShrinkScanEnterFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4EsShrinkScanEnterFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.nrToScan' @:: Lens' Ext4EsShrinkScanEnterFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'nrToScan' @:: Lens' Ext4EsShrinkScanEnterFtraceEvent (Prelude.Maybe Data.Int.Int32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.cacheCnt' @:: Lens' Ext4EsShrinkScanEnterFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'cacheCnt' @:: Lens' Ext4EsShrinkScanEnterFtraceEvent (Prelude.Maybe Data.Int.Int32)@ -}
data Ext4EsShrinkScanEnterFtraceEvent
  = Ext4EsShrinkScanEnterFtraceEvent'_constructor {_Ext4EsShrinkScanEnterFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                                   _Ext4EsShrinkScanEnterFtraceEvent'nrToScan :: !(Prelude.Maybe Data.Int.Int32),
                                                   _Ext4EsShrinkScanEnterFtraceEvent'cacheCnt :: !(Prelude.Maybe Data.Int.Int32),
                                                   _Ext4EsShrinkScanEnterFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4EsShrinkScanEnterFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4EsShrinkScanEnterFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsShrinkScanEnterFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4EsShrinkScanEnterFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4EsShrinkScanEnterFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsShrinkScanEnterFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4EsShrinkScanEnterFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4EsShrinkScanEnterFtraceEvent "nrToScan" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsShrinkScanEnterFtraceEvent'nrToScan
           (\ x__ y__
              -> x__ {_Ext4EsShrinkScanEnterFtraceEvent'nrToScan = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4EsShrinkScanEnterFtraceEvent "maybe'nrToScan" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsShrinkScanEnterFtraceEvent'nrToScan
           (\ x__ y__
              -> x__ {_Ext4EsShrinkScanEnterFtraceEvent'nrToScan = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4EsShrinkScanEnterFtraceEvent "cacheCnt" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsShrinkScanEnterFtraceEvent'cacheCnt
           (\ x__ y__
              -> x__ {_Ext4EsShrinkScanEnterFtraceEvent'cacheCnt = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4EsShrinkScanEnterFtraceEvent "maybe'cacheCnt" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsShrinkScanEnterFtraceEvent'cacheCnt
           (\ x__ y__
              -> x__ {_Ext4EsShrinkScanEnterFtraceEvent'cacheCnt = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4EsShrinkScanEnterFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4EsShrinkScanEnterFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \ Ext4EsShrinkScanEnterFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\FS\n\
      \\n\
      \nr_to_scan\CAN\STX \SOH(\ENQR\bnrToScan\DC2\ESC\n\
      \\tcache_cnt\CAN\ETX \SOH(\ENQR\bcacheCnt"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4EsShrinkScanEnterFtraceEvent
        nrToScan__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "nr_to_scan"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'nrToScan")) ::
              Data.ProtoLens.FieldDescriptor Ext4EsShrinkScanEnterFtraceEvent
        cacheCnt__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "cache_cnt"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'cacheCnt")) ::
              Data.ProtoLens.FieldDescriptor Ext4EsShrinkScanEnterFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, nrToScan__field_descriptor),
           (Data.ProtoLens.Tag 3, cacheCnt__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4EsShrinkScanEnterFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__ {_Ext4EsShrinkScanEnterFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4EsShrinkScanEnterFtraceEvent'_constructor
        {_Ext4EsShrinkScanEnterFtraceEvent'dev = Prelude.Nothing,
         _Ext4EsShrinkScanEnterFtraceEvent'nrToScan = Prelude.Nothing,
         _Ext4EsShrinkScanEnterFtraceEvent'cacheCnt = Prelude.Nothing,
         _Ext4EsShrinkScanEnterFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4EsShrinkScanEnterFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4EsShrinkScanEnterFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "nr_to_scan"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"nrToScan") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "cache_cnt"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"cacheCnt") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage)
          "Ext4EsShrinkScanEnterFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'nrToScan") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          ((Prelude..)
                             Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'cacheCnt") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   (Data.ProtoLens.Encoding.Wire.buildFieldSet
                      (Lens.Family2.view Data.ProtoLens.unknownFields _x))))
instance Control.DeepSeq.NFData Ext4EsShrinkScanEnterFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4EsShrinkScanEnterFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4EsShrinkScanEnterFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4EsShrinkScanEnterFtraceEvent'nrToScan x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4EsShrinkScanEnterFtraceEvent'cacheCnt x__) ())))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4EsShrinkScanExitFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4EsShrinkScanExitFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.nrShrunk' @:: Lens' Ext4EsShrinkScanExitFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'nrShrunk' @:: Lens' Ext4EsShrinkScanExitFtraceEvent (Prelude.Maybe Data.Int.Int32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.cacheCnt' @:: Lens' Ext4EsShrinkScanExitFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'cacheCnt' @:: Lens' Ext4EsShrinkScanExitFtraceEvent (Prelude.Maybe Data.Int.Int32)@ -}
data Ext4EsShrinkScanExitFtraceEvent
  = Ext4EsShrinkScanExitFtraceEvent'_constructor {_Ext4EsShrinkScanExitFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                                  _Ext4EsShrinkScanExitFtraceEvent'nrShrunk :: !(Prelude.Maybe Data.Int.Int32),
                                                  _Ext4EsShrinkScanExitFtraceEvent'cacheCnt :: !(Prelude.Maybe Data.Int.Int32),
                                                  _Ext4EsShrinkScanExitFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4EsShrinkScanExitFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4EsShrinkScanExitFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsShrinkScanExitFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4EsShrinkScanExitFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4EsShrinkScanExitFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsShrinkScanExitFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4EsShrinkScanExitFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4EsShrinkScanExitFtraceEvent "nrShrunk" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsShrinkScanExitFtraceEvent'nrShrunk
           (\ x__ y__
              -> x__ {_Ext4EsShrinkScanExitFtraceEvent'nrShrunk = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4EsShrinkScanExitFtraceEvent "maybe'nrShrunk" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsShrinkScanExitFtraceEvent'nrShrunk
           (\ x__ y__
              -> x__ {_Ext4EsShrinkScanExitFtraceEvent'nrShrunk = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4EsShrinkScanExitFtraceEvent "cacheCnt" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsShrinkScanExitFtraceEvent'cacheCnt
           (\ x__ y__
              -> x__ {_Ext4EsShrinkScanExitFtraceEvent'cacheCnt = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4EsShrinkScanExitFtraceEvent "maybe'cacheCnt" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EsShrinkScanExitFtraceEvent'cacheCnt
           (\ x__ y__
              -> x__ {_Ext4EsShrinkScanExitFtraceEvent'cacheCnt = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4EsShrinkScanExitFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4EsShrinkScanExitFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \\USExt4EsShrinkScanExitFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\ESC\n\
      \\tnr_shrunk\CAN\STX \SOH(\ENQR\bnrShrunk\DC2\ESC\n\
      \\tcache_cnt\CAN\ETX \SOH(\ENQR\bcacheCnt"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4EsShrinkScanExitFtraceEvent
        nrShrunk__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "nr_shrunk"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'nrShrunk")) ::
              Data.ProtoLens.FieldDescriptor Ext4EsShrinkScanExitFtraceEvent
        cacheCnt__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "cache_cnt"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'cacheCnt")) ::
              Data.ProtoLens.FieldDescriptor Ext4EsShrinkScanExitFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, nrShrunk__field_descriptor),
           (Data.ProtoLens.Tag 3, cacheCnt__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4EsShrinkScanExitFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__ {_Ext4EsShrinkScanExitFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4EsShrinkScanExitFtraceEvent'_constructor
        {_Ext4EsShrinkScanExitFtraceEvent'dev = Prelude.Nothing,
         _Ext4EsShrinkScanExitFtraceEvent'nrShrunk = Prelude.Nothing,
         _Ext4EsShrinkScanExitFtraceEvent'cacheCnt = Prelude.Nothing,
         _Ext4EsShrinkScanExitFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4EsShrinkScanExitFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4EsShrinkScanExitFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "nr_shrunk"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"nrShrunk") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "cache_cnt"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"cacheCnt") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage)
          "Ext4EsShrinkScanExitFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'nrShrunk") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          ((Prelude..)
                             Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'cacheCnt") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   (Data.ProtoLens.Encoding.Wire.buildFieldSet
                      (Lens.Family2.view Data.ProtoLens.unknownFields _x))))
instance Control.DeepSeq.NFData Ext4EsShrinkScanExitFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4EsShrinkScanExitFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4EsShrinkScanExitFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4EsShrinkScanExitFtraceEvent'nrShrunk x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4EsShrinkScanExitFtraceEvent'cacheCnt x__) ())))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4EvictInodeFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4EvictInodeFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4EvictInodeFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4EvictInodeFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.nlink' @:: Lens' Ext4EvictInodeFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'nlink' @:: Lens' Ext4EvictInodeFtraceEvent (Prelude.Maybe Data.Int.Int32)@ -}
data Ext4EvictInodeFtraceEvent
  = Ext4EvictInodeFtraceEvent'_constructor {_Ext4EvictInodeFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                            _Ext4EvictInodeFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                            _Ext4EvictInodeFtraceEvent'nlink :: !(Prelude.Maybe Data.Int.Int32),
                                            _Ext4EvictInodeFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4EvictInodeFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4EvictInodeFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EvictInodeFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4EvictInodeFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4EvictInodeFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EvictInodeFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4EvictInodeFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4EvictInodeFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EvictInodeFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4EvictInodeFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4EvictInodeFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EvictInodeFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4EvictInodeFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4EvictInodeFtraceEvent "nlink" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EvictInodeFtraceEvent'nlink
           (\ x__ y__ -> x__ {_Ext4EvictInodeFtraceEvent'nlink = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4EvictInodeFtraceEvent "maybe'nlink" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4EvictInodeFtraceEvent'nlink
           (\ x__ y__ -> x__ {_Ext4EvictInodeFtraceEvent'nlink = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4EvictInodeFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4EvictInodeFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \\EMExt4EvictInodeFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DC4\n\
      \\ENQnlink\CAN\ETX \SOH(\ENQR\ENQnlink"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4EvictInodeFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4EvictInodeFtraceEvent
        nlink__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "nlink"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'nlink")) ::
              Data.ProtoLens.FieldDescriptor Ext4EvictInodeFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, nlink__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4EvictInodeFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__ {_Ext4EvictInodeFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4EvictInodeFtraceEvent'_constructor
        {_Ext4EvictInodeFtraceEvent'dev = Prelude.Nothing,
         _Ext4EvictInodeFtraceEvent'ino = Prelude.Nothing,
         _Ext4EvictInodeFtraceEvent'nlink = Prelude.Nothing,
         _Ext4EvictInodeFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4EvictInodeFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4EvictInodeFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "nlink"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"nlink") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "Ext4EvictInodeFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'nlink") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   (Data.ProtoLens.Encoding.Wire.buildFieldSet
                      (Lens.Family2.view Data.ProtoLens.unknownFields _x))))
instance Control.DeepSeq.NFData Ext4EvictInodeFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4EvictInodeFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4EvictInodeFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4EvictInodeFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4EvictInodeFtraceEvent'nlink x__) ())))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4ExtConvertToInitializedEnterFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4ExtConvertToInitializedEnterFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4ExtConvertToInitializedEnterFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4ExtConvertToInitializedEnterFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.mLblk' @:: Lens' Ext4ExtConvertToInitializedEnterFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'mLblk' @:: Lens' Ext4ExtConvertToInitializedEnterFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.mLen' @:: Lens' Ext4ExtConvertToInitializedEnterFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'mLen' @:: Lens' Ext4ExtConvertToInitializedEnterFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.uLblk' @:: Lens' Ext4ExtConvertToInitializedEnterFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'uLblk' @:: Lens' Ext4ExtConvertToInitializedEnterFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.uLen' @:: Lens' Ext4ExtConvertToInitializedEnterFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'uLen' @:: Lens' Ext4ExtConvertToInitializedEnterFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.uPblk' @:: Lens' Ext4ExtConvertToInitializedEnterFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'uPblk' @:: Lens' Ext4ExtConvertToInitializedEnterFtraceEvent (Prelude.Maybe Data.Word.Word64)@ -}
data Ext4ExtConvertToInitializedEnterFtraceEvent
  = Ext4ExtConvertToInitializedEnterFtraceEvent'_constructor {_Ext4ExtConvertToInitializedEnterFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                                              _Ext4ExtConvertToInitializedEnterFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                                              _Ext4ExtConvertToInitializedEnterFtraceEvent'mLblk :: !(Prelude.Maybe Data.Word.Word32),
                                                              _Ext4ExtConvertToInitializedEnterFtraceEvent'mLen :: !(Prelude.Maybe Data.Word.Word32),
                                                              _Ext4ExtConvertToInitializedEnterFtraceEvent'uLblk :: !(Prelude.Maybe Data.Word.Word32),
                                                              _Ext4ExtConvertToInitializedEnterFtraceEvent'uLen :: !(Prelude.Maybe Data.Word.Word32),
                                                              _Ext4ExtConvertToInitializedEnterFtraceEvent'uPblk :: !(Prelude.Maybe Data.Word.Word64),
                                                              _Ext4ExtConvertToInitializedEnterFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4ExtConvertToInitializedEnterFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4ExtConvertToInitializedEnterFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtConvertToInitializedEnterFtraceEvent'dev
           (\ x__ y__
              -> x__ {_Ext4ExtConvertToInitializedEnterFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtConvertToInitializedEnterFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtConvertToInitializedEnterFtraceEvent'dev
           (\ x__ y__
              -> x__ {_Ext4ExtConvertToInitializedEnterFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ExtConvertToInitializedEnterFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtConvertToInitializedEnterFtraceEvent'ino
           (\ x__ y__
              -> x__ {_Ext4ExtConvertToInitializedEnterFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtConvertToInitializedEnterFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtConvertToInitializedEnterFtraceEvent'ino
           (\ x__ y__
              -> x__ {_Ext4ExtConvertToInitializedEnterFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ExtConvertToInitializedEnterFtraceEvent "mLblk" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtConvertToInitializedEnterFtraceEvent'mLblk
           (\ x__ y__
              -> x__ {_Ext4ExtConvertToInitializedEnterFtraceEvent'mLblk = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtConvertToInitializedEnterFtraceEvent "maybe'mLblk" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtConvertToInitializedEnterFtraceEvent'mLblk
           (\ x__ y__
              -> x__ {_Ext4ExtConvertToInitializedEnterFtraceEvent'mLblk = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ExtConvertToInitializedEnterFtraceEvent "mLen" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtConvertToInitializedEnterFtraceEvent'mLen
           (\ x__ y__
              -> x__ {_Ext4ExtConvertToInitializedEnterFtraceEvent'mLen = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtConvertToInitializedEnterFtraceEvent "maybe'mLen" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtConvertToInitializedEnterFtraceEvent'mLen
           (\ x__ y__
              -> x__ {_Ext4ExtConvertToInitializedEnterFtraceEvent'mLen = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ExtConvertToInitializedEnterFtraceEvent "uLblk" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtConvertToInitializedEnterFtraceEvent'uLblk
           (\ x__ y__
              -> x__ {_Ext4ExtConvertToInitializedEnterFtraceEvent'uLblk = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtConvertToInitializedEnterFtraceEvent "maybe'uLblk" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtConvertToInitializedEnterFtraceEvent'uLblk
           (\ x__ y__
              -> x__ {_Ext4ExtConvertToInitializedEnterFtraceEvent'uLblk = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ExtConvertToInitializedEnterFtraceEvent "uLen" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtConvertToInitializedEnterFtraceEvent'uLen
           (\ x__ y__
              -> x__ {_Ext4ExtConvertToInitializedEnterFtraceEvent'uLen = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtConvertToInitializedEnterFtraceEvent "maybe'uLen" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtConvertToInitializedEnterFtraceEvent'uLen
           (\ x__ y__
              -> x__ {_Ext4ExtConvertToInitializedEnterFtraceEvent'uLen = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ExtConvertToInitializedEnterFtraceEvent "uPblk" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtConvertToInitializedEnterFtraceEvent'uPblk
           (\ x__ y__
              -> x__ {_Ext4ExtConvertToInitializedEnterFtraceEvent'uPblk = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtConvertToInitializedEnterFtraceEvent "maybe'uPblk" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtConvertToInitializedEnterFtraceEvent'uPblk
           (\ x__ y__
              -> x__ {_Ext4ExtConvertToInitializedEnterFtraceEvent'uPblk = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4ExtConvertToInitializedEnterFtraceEvent where
  messageName _
    = Data.Text.pack
        "perfetto.protos.Ext4ExtConvertToInitializedEnterFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \+Ext4ExtConvertToInitializedEnterFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\NAK\n\
      \\ACKm_lblk\CAN\ETX \SOH(\rR\ENQmLblk\DC2\DC3\n\
      \\ENQm_len\CAN\EOT \SOH(\rR\EOTmLen\DC2\NAK\n\
      \\ACKu_lblk\CAN\ENQ \SOH(\rR\ENQuLblk\DC2\DC3\n\
      \\ENQu_len\CAN\ACK \SOH(\rR\EOTuLen\DC2\NAK\n\
      \\ACKu_pblk\CAN\a \SOH(\EOTR\ENQuPblk"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtConvertToInitializedEnterFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtConvertToInitializedEnterFtraceEvent
        mLblk__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "m_lblk"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'mLblk")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtConvertToInitializedEnterFtraceEvent
        mLen__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "m_len"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'mLen")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtConvertToInitializedEnterFtraceEvent
        uLblk__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "u_lblk"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'uLblk")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtConvertToInitializedEnterFtraceEvent
        uLen__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "u_len"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'uLen")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtConvertToInitializedEnterFtraceEvent
        uPblk__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "u_pblk"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'uPblk")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtConvertToInitializedEnterFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, mLblk__field_descriptor),
           (Data.ProtoLens.Tag 4, mLen__field_descriptor),
           (Data.ProtoLens.Tag 5, uLblk__field_descriptor),
           (Data.ProtoLens.Tag 6, uLen__field_descriptor),
           (Data.ProtoLens.Tag 7, uPblk__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4ExtConvertToInitializedEnterFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__
                {_Ext4ExtConvertToInitializedEnterFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4ExtConvertToInitializedEnterFtraceEvent'_constructor
        {_Ext4ExtConvertToInitializedEnterFtraceEvent'dev = Prelude.Nothing,
         _Ext4ExtConvertToInitializedEnterFtraceEvent'ino = Prelude.Nothing,
         _Ext4ExtConvertToInitializedEnterFtraceEvent'mLblk = Prelude.Nothing,
         _Ext4ExtConvertToInitializedEnterFtraceEvent'mLen = Prelude.Nothing,
         _Ext4ExtConvertToInitializedEnterFtraceEvent'uLblk = Prelude.Nothing,
         _Ext4ExtConvertToInitializedEnterFtraceEvent'uLen = Prelude.Nothing,
         _Ext4ExtConvertToInitializedEnterFtraceEvent'uPblk = Prelude.Nothing,
         _Ext4ExtConvertToInitializedEnterFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4ExtConvertToInitializedEnterFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4ExtConvertToInitializedEnterFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "m_lblk"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"mLblk") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "m_len"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"mLen") y x)
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "u_lblk"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"uLblk") y x)
                        48
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "u_len"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"uLen") y x)
                        56
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "u_pblk"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"uPblk") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage)
          "Ext4ExtConvertToInitializedEnterFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'mLblk") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'mLen") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'uLblk") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral
                                      _v))
                         ((Data.Monoid.<>)
                            (case
                                 Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'uLen") _x
                             of
                               Prelude.Nothing -> Data.Monoid.mempty
                               (Prelude.Just _v)
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 48)
                                      ((Prelude..)
                                         Data.ProtoLens.Encoding.Bytes.putVarInt
                                         Prelude.fromIntegral _v))
                            ((Data.Monoid.<>)
                               (case
                                    Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'uPblk") _x
                                of
                                  Prelude.Nothing -> Data.Monoid.mempty
                                  (Prelude.Just _v)
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt 56)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                               (Data.ProtoLens.Encoding.Wire.buildFieldSet
                                  (Lens.Family2.view Data.ProtoLens.unknownFields _x))))))))
instance Control.DeepSeq.NFData Ext4ExtConvertToInitializedEnterFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4ExtConvertToInitializedEnterFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4ExtConvertToInitializedEnterFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4ExtConvertToInitializedEnterFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4ExtConvertToInitializedEnterFtraceEvent'mLblk x__)
                      (Control.DeepSeq.deepseq
                         (_Ext4ExtConvertToInitializedEnterFtraceEvent'mLen x__)
                         (Control.DeepSeq.deepseq
                            (_Ext4ExtConvertToInitializedEnterFtraceEvent'uLblk x__)
                            (Control.DeepSeq.deepseq
                               (_Ext4ExtConvertToInitializedEnterFtraceEvent'uLen x__)
                               (Control.DeepSeq.deepseq
                                  (_Ext4ExtConvertToInitializedEnterFtraceEvent'uPblk x__) ())))))))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4ExtConvertToInitializedFastpathFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4ExtConvertToInitializedFastpathFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4ExtConvertToInitializedFastpathFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4ExtConvertToInitializedFastpathFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.mLblk' @:: Lens' Ext4ExtConvertToInitializedFastpathFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'mLblk' @:: Lens' Ext4ExtConvertToInitializedFastpathFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.mLen' @:: Lens' Ext4ExtConvertToInitializedFastpathFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'mLen' @:: Lens' Ext4ExtConvertToInitializedFastpathFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.uLblk' @:: Lens' Ext4ExtConvertToInitializedFastpathFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'uLblk' @:: Lens' Ext4ExtConvertToInitializedFastpathFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.uLen' @:: Lens' Ext4ExtConvertToInitializedFastpathFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'uLen' @:: Lens' Ext4ExtConvertToInitializedFastpathFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.uPblk' @:: Lens' Ext4ExtConvertToInitializedFastpathFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'uPblk' @:: Lens' Ext4ExtConvertToInitializedFastpathFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.iLblk' @:: Lens' Ext4ExtConvertToInitializedFastpathFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'iLblk' @:: Lens' Ext4ExtConvertToInitializedFastpathFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.iLen' @:: Lens' Ext4ExtConvertToInitializedFastpathFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'iLen' @:: Lens' Ext4ExtConvertToInitializedFastpathFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.iPblk' @:: Lens' Ext4ExtConvertToInitializedFastpathFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'iPblk' @:: Lens' Ext4ExtConvertToInitializedFastpathFtraceEvent (Prelude.Maybe Data.Word.Word64)@ -}
data Ext4ExtConvertToInitializedFastpathFtraceEvent
  = Ext4ExtConvertToInitializedFastpathFtraceEvent'_constructor {_Ext4ExtConvertToInitializedFastpathFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                                                 _Ext4ExtConvertToInitializedFastpathFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                                                 _Ext4ExtConvertToInitializedFastpathFtraceEvent'mLblk :: !(Prelude.Maybe Data.Word.Word32),
                                                                 _Ext4ExtConvertToInitializedFastpathFtraceEvent'mLen :: !(Prelude.Maybe Data.Word.Word32),
                                                                 _Ext4ExtConvertToInitializedFastpathFtraceEvent'uLblk :: !(Prelude.Maybe Data.Word.Word32),
                                                                 _Ext4ExtConvertToInitializedFastpathFtraceEvent'uLen :: !(Prelude.Maybe Data.Word.Word32),
                                                                 _Ext4ExtConvertToInitializedFastpathFtraceEvent'uPblk :: !(Prelude.Maybe Data.Word.Word64),
                                                                 _Ext4ExtConvertToInitializedFastpathFtraceEvent'iLblk :: !(Prelude.Maybe Data.Word.Word32),
                                                                 _Ext4ExtConvertToInitializedFastpathFtraceEvent'iLen :: !(Prelude.Maybe Data.Word.Word32),
                                                                 _Ext4ExtConvertToInitializedFastpathFtraceEvent'iPblk :: !(Prelude.Maybe Data.Word.Word64),
                                                                 _Ext4ExtConvertToInitializedFastpathFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4ExtConvertToInitializedFastpathFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4ExtConvertToInitializedFastpathFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtConvertToInitializedFastpathFtraceEvent'dev
           (\ x__ y__
              -> x__
                   {_Ext4ExtConvertToInitializedFastpathFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtConvertToInitializedFastpathFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtConvertToInitializedFastpathFtraceEvent'dev
           (\ x__ y__
              -> x__
                   {_Ext4ExtConvertToInitializedFastpathFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ExtConvertToInitializedFastpathFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtConvertToInitializedFastpathFtraceEvent'ino
           (\ x__ y__
              -> x__
                   {_Ext4ExtConvertToInitializedFastpathFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtConvertToInitializedFastpathFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtConvertToInitializedFastpathFtraceEvent'ino
           (\ x__ y__
              -> x__
                   {_Ext4ExtConvertToInitializedFastpathFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ExtConvertToInitializedFastpathFtraceEvent "mLblk" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtConvertToInitializedFastpathFtraceEvent'mLblk
           (\ x__ y__
              -> x__
                   {_Ext4ExtConvertToInitializedFastpathFtraceEvent'mLblk = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtConvertToInitializedFastpathFtraceEvent "maybe'mLblk" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtConvertToInitializedFastpathFtraceEvent'mLblk
           (\ x__ y__
              -> x__
                   {_Ext4ExtConvertToInitializedFastpathFtraceEvent'mLblk = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ExtConvertToInitializedFastpathFtraceEvent "mLen" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtConvertToInitializedFastpathFtraceEvent'mLen
           (\ x__ y__
              -> x__
                   {_Ext4ExtConvertToInitializedFastpathFtraceEvent'mLen = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtConvertToInitializedFastpathFtraceEvent "maybe'mLen" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtConvertToInitializedFastpathFtraceEvent'mLen
           (\ x__ y__
              -> x__
                   {_Ext4ExtConvertToInitializedFastpathFtraceEvent'mLen = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ExtConvertToInitializedFastpathFtraceEvent "uLblk" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtConvertToInitializedFastpathFtraceEvent'uLblk
           (\ x__ y__
              -> x__
                   {_Ext4ExtConvertToInitializedFastpathFtraceEvent'uLblk = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtConvertToInitializedFastpathFtraceEvent "maybe'uLblk" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtConvertToInitializedFastpathFtraceEvent'uLblk
           (\ x__ y__
              -> x__
                   {_Ext4ExtConvertToInitializedFastpathFtraceEvent'uLblk = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ExtConvertToInitializedFastpathFtraceEvent "uLen" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtConvertToInitializedFastpathFtraceEvent'uLen
           (\ x__ y__
              -> x__
                   {_Ext4ExtConvertToInitializedFastpathFtraceEvent'uLen = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtConvertToInitializedFastpathFtraceEvent "maybe'uLen" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtConvertToInitializedFastpathFtraceEvent'uLen
           (\ x__ y__
              -> x__
                   {_Ext4ExtConvertToInitializedFastpathFtraceEvent'uLen = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ExtConvertToInitializedFastpathFtraceEvent "uPblk" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtConvertToInitializedFastpathFtraceEvent'uPblk
           (\ x__ y__
              -> x__
                   {_Ext4ExtConvertToInitializedFastpathFtraceEvent'uPblk = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtConvertToInitializedFastpathFtraceEvent "maybe'uPblk" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtConvertToInitializedFastpathFtraceEvent'uPblk
           (\ x__ y__
              -> x__
                   {_Ext4ExtConvertToInitializedFastpathFtraceEvent'uPblk = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ExtConvertToInitializedFastpathFtraceEvent "iLblk" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtConvertToInitializedFastpathFtraceEvent'iLblk
           (\ x__ y__
              -> x__
                   {_Ext4ExtConvertToInitializedFastpathFtraceEvent'iLblk = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtConvertToInitializedFastpathFtraceEvent "maybe'iLblk" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtConvertToInitializedFastpathFtraceEvent'iLblk
           (\ x__ y__
              -> x__
                   {_Ext4ExtConvertToInitializedFastpathFtraceEvent'iLblk = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ExtConvertToInitializedFastpathFtraceEvent "iLen" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtConvertToInitializedFastpathFtraceEvent'iLen
           (\ x__ y__
              -> x__
                   {_Ext4ExtConvertToInitializedFastpathFtraceEvent'iLen = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtConvertToInitializedFastpathFtraceEvent "maybe'iLen" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtConvertToInitializedFastpathFtraceEvent'iLen
           (\ x__ y__
              -> x__
                   {_Ext4ExtConvertToInitializedFastpathFtraceEvent'iLen = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ExtConvertToInitializedFastpathFtraceEvent "iPblk" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtConvertToInitializedFastpathFtraceEvent'iPblk
           (\ x__ y__
              -> x__
                   {_Ext4ExtConvertToInitializedFastpathFtraceEvent'iPblk = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtConvertToInitializedFastpathFtraceEvent "maybe'iPblk" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtConvertToInitializedFastpathFtraceEvent'iPblk
           (\ x__ y__
              -> x__
                   {_Ext4ExtConvertToInitializedFastpathFtraceEvent'iPblk = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4ExtConvertToInitializedFastpathFtraceEvent where
  messageName _
    = Data.Text.pack
        "perfetto.protos.Ext4ExtConvertToInitializedFastpathFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \.Ext4ExtConvertToInitializedFastpathFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\NAK\n\
      \\ACKm_lblk\CAN\ETX \SOH(\rR\ENQmLblk\DC2\DC3\n\
      \\ENQm_len\CAN\EOT \SOH(\rR\EOTmLen\DC2\NAK\n\
      \\ACKu_lblk\CAN\ENQ \SOH(\rR\ENQuLblk\DC2\DC3\n\
      \\ENQu_len\CAN\ACK \SOH(\rR\EOTuLen\DC2\NAK\n\
      \\ACKu_pblk\CAN\a \SOH(\EOTR\ENQuPblk\DC2\NAK\n\
      \\ACKi_lblk\CAN\b \SOH(\rR\ENQiLblk\DC2\DC3\n\
      \\ENQi_len\CAN\t \SOH(\rR\EOTiLen\DC2\NAK\n\
      \\ACKi_pblk\CAN\n\
      \ \SOH(\EOTR\ENQiPblk"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtConvertToInitializedFastpathFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtConvertToInitializedFastpathFtraceEvent
        mLblk__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "m_lblk"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'mLblk")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtConvertToInitializedFastpathFtraceEvent
        mLen__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "m_len"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'mLen")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtConvertToInitializedFastpathFtraceEvent
        uLblk__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "u_lblk"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'uLblk")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtConvertToInitializedFastpathFtraceEvent
        uLen__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "u_len"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'uLen")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtConvertToInitializedFastpathFtraceEvent
        uPblk__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "u_pblk"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'uPblk")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtConvertToInitializedFastpathFtraceEvent
        iLblk__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "i_lblk"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'iLblk")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtConvertToInitializedFastpathFtraceEvent
        iLen__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "i_len"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'iLen")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtConvertToInitializedFastpathFtraceEvent
        iPblk__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "i_pblk"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'iPblk")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtConvertToInitializedFastpathFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, mLblk__field_descriptor),
           (Data.ProtoLens.Tag 4, mLen__field_descriptor),
           (Data.ProtoLens.Tag 5, uLblk__field_descriptor),
           (Data.ProtoLens.Tag 6, uLen__field_descriptor),
           (Data.ProtoLens.Tag 7, uPblk__field_descriptor),
           (Data.ProtoLens.Tag 8, iLblk__field_descriptor),
           (Data.ProtoLens.Tag 9, iLen__field_descriptor),
           (Data.ProtoLens.Tag 10, iPblk__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4ExtConvertToInitializedFastpathFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__
                {_Ext4ExtConvertToInitializedFastpathFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4ExtConvertToInitializedFastpathFtraceEvent'_constructor
        {_Ext4ExtConvertToInitializedFastpathFtraceEvent'dev = Prelude.Nothing,
         _Ext4ExtConvertToInitializedFastpathFtraceEvent'ino = Prelude.Nothing,
         _Ext4ExtConvertToInitializedFastpathFtraceEvent'mLblk = Prelude.Nothing,
         _Ext4ExtConvertToInitializedFastpathFtraceEvent'mLen = Prelude.Nothing,
         _Ext4ExtConvertToInitializedFastpathFtraceEvent'uLblk = Prelude.Nothing,
         _Ext4ExtConvertToInitializedFastpathFtraceEvent'uLen = Prelude.Nothing,
         _Ext4ExtConvertToInitializedFastpathFtraceEvent'uPblk = Prelude.Nothing,
         _Ext4ExtConvertToInitializedFastpathFtraceEvent'iLblk = Prelude.Nothing,
         _Ext4ExtConvertToInitializedFastpathFtraceEvent'iLen = Prelude.Nothing,
         _Ext4ExtConvertToInitializedFastpathFtraceEvent'iPblk = Prelude.Nothing,
         _Ext4ExtConvertToInitializedFastpathFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4ExtConvertToInitializedFastpathFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4ExtConvertToInitializedFastpathFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "m_lblk"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"mLblk") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "m_len"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"mLen") y x)
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "u_lblk"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"uLblk") y x)
                        48
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "u_len"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"uLen") y x)
                        56
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "u_pblk"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"uPblk") y x)
                        64
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "i_lblk"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"iLblk") y x)
                        72
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "i_len"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"iLen") y x)
                        80
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "i_pblk"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"iPblk") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage)
          "Ext4ExtConvertToInitializedFastpathFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'mLblk") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'mLen") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'uLblk") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral
                                      _v))
                         ((Data.Monoid.<>)
                            (case
                                 Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'uLen") _x
                             of
                               Prelude.Nothing -> Data.Monoid.mempty
                               (Prelude.Just _v)
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 48)
                                      ((Prelude..)
                                         Data.ProtoLens.Encoding.Bytes.putVarInt
                                         Prelude.fromIntegral _v))
                            ((Data.Monoid.<>)
                               (case
                                    Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'uPblk") _x
                                of
                                  Prelude.Nothing -> Data.Monoid.mempty
                                  (Prelude.Just _v)
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt 56)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                               ((Data.Monoid.<>)
                                  (case
                                       Lens.Family2.view
                                         (Data.ProtoLens.Field.field @"maybe'iLblk") _x
                                   of
                                     Prelude.Nothing -> Data.Monoid.mempty
                                     (Prelude.Just _v)
                                       -> (Data.Monoid.<>)
                                            (Data.ProtoLens.Encoding.Bytes.putVarInt 64)
                                            ((Prelude..)
                                               Data.ProtoLens.Encoding.Bytes.putVarInt
                                               Prelude.fromIntegral _v))
                                  ((Data.Monoid.<>)
                                     (case
                                          Lens.Family2.view
                                            (Data.ProtoLens.Field.field @"maybe'iLen") _x
                                      of
                                        Prelude.Nothing -> Data.Monoid.mempty
                                        (Prelude.Just _v)
                                          -> (Data.Monoid.<>)
                                               (Data.ProtoLens.Encoding.Bytes.putVarInt 72)
                                               ((Prelude..)
                                                  Data.ProtoLens.Encoding.Bytes.putVarInt
                                                  Prelude.fromIntegral _v))
                                     ((Data.Monoid.<>)
                                        (case
                                             Lens.Family2.view
                                               (Data.ProtoLens.Field.field @"maybe'iPblk") _x
                                         of
                                           Prelude.Nothing -> Data.Monoid.mempty
                                           (Prelude.Just _v)
                                             -> (Data.Monoid.<>)
                                                  (Data.ProtoLens.Encoding.Bytes.putVarInt 80)
                                                  (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                                        (Data.ProtoLens.Encoding.Wire.buildFieldSet
                                           (Lens.Family2.view
                                              Data.ProtoLens.unknownFields _x)))))))))))
instance Control.DeepSeq.NFData Ext4ExtConvertToInitializedFastpathFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4ExtConvertToInitializedFastpathFtraceEvent'_unknownFields
                x__)
             (Control.DeepSeq.deepseq
                (_Ext4ExtConvertToInitializedFastpathFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4ExtConvertToInitializedFastpathFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4ExtConvertToInitializedFastpathFtraceEvent'mLblk x__)
                      (Control.DeepSeq.deepseq
                         (_Ext4ExtConvertToInitializedFastpathFtraceEvent'mLen x__)
                         (Control.DeepSeq.deepseq
                            (_Ext4ExtConvertToInitializedFastpathFtraceEvent'uLblk x__)
                            (Control.DeepSeq.deepseq
                               (_Ext4ExtConvertToInitializedFastpathFtraceEvent'uLen x__)
                               (Control.DeepSeq.deepseq
                                  (_Ext4ExtConvertToInitializedFastpathFtraceEvent'uPblk x__)
                                  (Control.DeepSeq.deepseq
                                     (_Ext4ExtConvertToInitializedFastpathFtraceEvent'iLblk x__)
                                     (Control.DeepSeq.deepseq
                                        (_Ext4ExtConvertToInitializedFastpathFtraceEvent'iLen x__)
                                        (Control.DeepSeq.deepseq
                                           (_Ext4ExtConvertToInitializedFastpathFtraceEvent'iPblk
                                              x__)
                                           ()))))))))))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4ExtHandleUnwrittenExtentsFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4ExtHandleUnwrittenExtentsFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4ExtHandleUnwrittenExtentsFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4ExtHandleUnwrittenExtentsFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.flags' @:: Lens' Ext4ExtHandleUnwrittenExtentsFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'flags' @:: Lens' Ext4ExtHandleUnwrittenExtentsFtraceEvent (Prelude.Maybe Data.Int.Int32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.lblk' @:: Lens' Ext4ExtHandleUnwrittenExtentsFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'lblk' @:: Lens' Ext4ExtHandleUnwrittenExtentsFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.pblk' @:: Lens' Ext4ExtHandleUnwrittenExtentsFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'pblk' @:: Lens' Ext4ExtHandleUnwrittenExtentsFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.len' @:: Lens' Ext4ExtHandleUnwrittenExtentsFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'len' @:: Lens' Ext4ExtHandleUnwrittenExtentsFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.allocated' @:: Lens' Ext4ExtHandleUnwrittenExtentsFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'allocated' @:: Lens' Ext4ExtHandleUnwrittenExtentsFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.newblk' @:: Lens' Ext4ExtHandleUnwrittenExtentsFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'newblk' @:: Lens' Ext4ExtHandleUnwrittenExtentsFtraceEvent (Prelude.Maybe Data.Word.Word64)@ -}
data Ext4ExtHandleUnwrittenExtentsFtraceEvent
  = Ext4ExtHandleUnwrittenExtentsFtraceEvent'_constructor {_Ext4ExtHandleUnwrittenExtentsFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                                           _Ext4ExtHandleUnwrittenExtentsFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                                           _Ext4ExtHandleUnwrittenExtentsFtraceEvent'flags :: !(Prelude.Maybe Data.Int.Int32),
                                                           _Ext4ExtHandleUnwrittenExtentsFtraceEvent'lblk :: !(Prelude.Maybe Data.Word.Word32),
                                                           _Ext4ExtHandleUnwrittenExtentsFtraceEvent'pblk :: !(Prelude.Maybe Data.Word.Word64),
                                                           _Ext4ExtHandleUnwrittenExtentsFtraceEvent'len :: !(Prelude.Maybe Data.Word.Word32),
                                                           _Ext4ExtHandleUnwrittenExtentsFtraceEvent'allocated :: !(Prelude.Maybe Data.Word.Word32),
                                                           _Ext4ExtHandleUnwrittenExtentsFtraceEvent'newblk :: !(Prelude.Maybe Data.Word.Word64),
                                                           _Ext4ExtHandleUnwrittenExtentsFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4ExtHandleUnwrittenExtentsFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4ExtHandleUnwrittenExtentsFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtHandleUnwrittenExtentsFtraceEvent'dev
           (\ x__ y__
              -> x__ {_Ext4ExtHandleUnwrittenExtentsFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtHandleUnwrittenExtentsFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtHandleUnwrittenExtentsFtraceEvent'dev
           (\ x__ y__
              -> x__ {_Ext4ExtHandleUnwrittenExtentsFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ExtHandleUnwrittenExtentsFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtHandleUnwrittenExtentsFtraceEvent'ino
           (\ x__ y__
              -> x__ {_Ext4ExtHandleUnwrittenExtentsFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtHandleUnwrittenExtentsFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtHandleUnwrittenExtentsFtraceEvent'ino
           (\ x__ y__
              -> x__ {_Ext4ExtHandleUnwrittenExtentsFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ExtHandleUnwrittenExtentsFtraceEvent "flags" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtHandleUnwrittenExtentsFtraceEvent'flags
           (\ x__ y__
              -> x__ {_Ext4ExtHandleUnwrittenExtentsFtraceEvent'flags = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtHandleUnwrittenExtentsFtraceEvent "maybe'flags" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtHandleUnwrittenExtentsFtraceEvent'flags
           (\ x__ y__
              -> x__ {_Ext4ExtHandleUnwrittenExtentsFtraceEvent'flags = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ExtHandleUnwrittenExtentsFtraceEvent "lblk" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtHandleUnwrittenExtentsFtraceEvent'lblk
           (\ x__ y__
              -> x__ {_Ext4ExtHandleUnwrittenExtentsFtraceEvent'lblk = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtHandleUnwrittenExtentsFtraceEvent "maybe'lblk" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtHandleUnwrittenExtentsFtraceEvent'lblk
           (\ x__ y__
              -> x__ {_Ext4ExtHandleUnwrittenExtentsFtraceEvent'lblk = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ExtHandleUnwrittenExtentsFtraceEvent "pblk" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtHandleUnwrittenExtentsFtraceEvent'pblk
           (\ x__ y__
              -> x__ {_Ext4ExtHandleUnwrittenExtentsFtraceEvent'pblk = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtHandleUnwrittenExtentsFtraceEvent "maybe'pblk" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtHandleUnwrittenExtentsFtraceEvent'pblk
           (\ x__ y__
              -> x__ {_Ext4ExtHandleUnwrittenExtentsFtraceEvent'pblk = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ExtHandleUnwrittenExtentsFtraceEvent "len" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtHandleUnwrittenExtentsFtraceEvent'len
           (\ x__ y__
              -> x__ {_Ext4ExtHandleUnwrittenExtentsFtraceEvent'len = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtHandleUnwrittenExtentsFtraceEvent "maybe'len" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtHandleUnwrittenExtentsFtraceEvent'len
           (\ x__ y__
              -> x__ {_Ext4ExtHandleUnwrittenExtentsFtraceEvent'len = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ExtHandleUnwrittenExtentsFtraceEvent "allocated" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtHandleUnwrittenExtentsFtraceEvent'allocated
           (\ x__ y__
              -> x__
                   {_Ext4ExtHandleUnwrittenExtentsFtraceEvent'allocated = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtHandleUnwrittenExtentsFtraceEvent "maybe'allocated" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtHandleUnwrittenExtentsFtraceEvent'allocated
           (\ x__ y__
              -> x__
                   {_Ext4ExtHandleUnwrittenExtentsFtraceEvent'allocated = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ExtHandleUnwrittenExtentsFtraceEvent "newblk" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtHandleUnwrittenExtentsFtraceEvent'newblk
           (\ x__ y__
              -> x__ {_Ext4ExtHandleUnwrittenExtentsFtraceEvent'newblk = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtHandleUnwrittenExtentsFtraceEvent "maybe'newblk" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtHandleUnwrittenExtentsFtraceEvent'newblk
           (\ x__ y__
              -> x__ {_Ext4ExtHandleUnwrittenExtentsFtraceEvent'newblk = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4ExtHandleUnwrittenExtentsFtraceEvent where
  messageName _
    = Data.Text.pack
        "perfetto.protos.Ext4ExtHandleUnwrittenExtentsFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \(Ext4ExtHandleUnwrittenExtentsFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DC4\n\
      \\ENQflags\CAN\ETX \SOH(\ENQR\ENQflags\DC2\DC2\n\
      \\EOTlblk\CAN\EOT \SOH(\rR\EOTlblk\DC2\DC2\n\
      \\EOTpblk\CAN\ENQ \SOH(\EOTR\EOTpblk\DC2\DLE\n\
      \\ETXlen\CAN\ACK \SOH(\rR\ETXlen\DC2\FS\n\
      \\tallocated\CAN\a \SOH(\rR\tallocated\DC2\SYN\n\
      \\ACKnewblk\CAN\b \SOH(\EOTR\ACKnewblk"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtHandleUnwrittenExtentsFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtHandleUnwrittenExtentsFtraceEvent
        flags__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "flags"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'flags")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtHandleUnwrittenExtentsFtraceEvent
        lblk__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "lblk"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'lblk")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtHandleUnwrittenExtentsFtraceEvent
        pblk__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "pblk"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'pblk")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtHandleUnwrittenExtentsFtraceEvent
        len__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "len"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'len")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtHandleUnwrittenExtentsFtraceEvent
        allocated__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "allocated"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'allocated")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtHandleUnwrittenExtentsFtraceEvent
        newblk__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "newblk"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'newblk")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtHandleUnwrittenExtentsFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, flags__field_descriptor),
           (Data.ProtoLens.Tag 4, lblk__field_descriptor),
           (Data.ProtoLens.Tag 5, pblk__field_descriptor),
           (Data.ProtoLens.Tag 6, len__field_descriptor),
           (Data.ProtoLens.Tag 7, allocated__field_descriptor),
           (Data.ProtoLens.Tag 8, newblk__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4ExtHandleUnwrittenExtentsFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__
                {_Ext4ExtHandleUnwrittenExtentsFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4ExtHandleUnwrittenExtentsFtraceEvent'_constructor
        {_Ext4ExtHandleUnwrittenExtentsFtraceEvent'dev = Prelude.Nothing,
         _Ext4ExtHandleUnwrittenExtentsFtraceEvent'ino = Prelude.Nothing,
         _Ext4ExtHandleUnwrittenExtentsFtraceEvent'flags = Prelude.Nothing,
         _Ext4ExtHandleUnwrittenExtentsFtraceEvent'lblk = Prelude.Nothing,
         _Ext4ExtHandleUnwrittenExtentsFtraceEvent'pblk = Prelude.Nothing,
         _Ext4ExtHandleUnwrittenExtentsFtraceEvent'len = Prelude.Nothing,
         _Ext4ExtHandleUnwrittenExtentsFtraceEvent'allocated = Prelude.Nothing,
         _Ext4ExtHandleUnwrittenExtentsFtraceEvent'newblk = Prelude.Nothing,
         _Ext4ExtHandleUnwrittenExtentsFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4ExtHandleUnwrittenExtentsFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4ExtHandleUnwrittenExtentsFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "flags"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"flags") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "lblk"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"lblk") y x)
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "pblk"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"pblk") y x)
                        48
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "len"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"len") y x)
                        56
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "allocated"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"allocated") y x)
                        64
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "newblk"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"newblk") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage)
          "Ext4ExtHandleUnwrittenExtentsFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'flags") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'lblk") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'pblk") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                         ((Data.Monoid.<>)
                            (case
                                 Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'len") _x
                             of
                               Prelude.Nothing -> Data.Monoid.mempty
                               (Prelude.Just _v)
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 48)
                                      ((Prelude..)
                                         Data.ProtoLens.Encoding.Bytes.putVarInt
                                         Prelude.fromIntegral _v))
                            ((Data.Monoid.<>)
                               (case
                                    Lens.Family2.view
                                      (Data.ProtoLens.Field.field @"maybe'allocated") _x
                                of
                                  Prelude.Nothing -> Data.Monoid.mempty
                                  (Prelude.Just _v)
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt 56)
                                         ((Prelude..)
                                            Data.ProtoLens.Encoding.Bytes.putVarInt
                                            Prelude.fromIntegral _v))
                               ((Data.Monoid.<>)
                                  (case
                                       Lens.Family2.view
                                         (Data.ProtoLens.Field.field @"maybe'newblk") _x
                                   of
                                     Prelude.Nothing -> Data.Monoid.mempty
                                     (Prelude.Just _v)
                                       -> (Data.Monoid.<>)
                                            (Data.ProtoLens.Encoding.Bytes.putVarInt 64)
                                            (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                                  (Data.ProtoLens.Encoding.Wire.buildFieldSet
                                     (Lens.Family2.view Data.ProtoLens.unknownFields _x)))))))))
instance Control.DeepSeq.NFData Ext4ExtHandleUnwrittenExtentsFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4ExtHandleUnwrittenExtentsFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4ExtHandleUnwrittenExtentsFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4ExtHandleUnwrittenExtentsFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4ExtHandleUnwrittenExtentsFtraceEvent'flags x__)
                      (Control.DeepSeq.deepseq
                         (_Ext4ExtHandleUnwrittenExtentsFtraceEvent'lblk x__)
                         (Control.DeepSeq.deepseq
                            (_Ext4ExtHandleUnwrittenExtentsFtraceEvent'pblk x__)
                            (Control.DeepSeq.deepseq
                               (_Ext4ExtHandleUnwrittenExtentsFtraceEvent'len x__)
                               (Control.DeepSeq.deepseq
                                  (_Ext4ExtHandleUnwrittenExtentsFtraceEvent'allocated x__)
                                  (Control.DeepSeq.deepseq
                                     (_Ext4ExtHandleUnwrittenExtentsFtraceEvent'newblk x__)
                                     ()))))))))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4ExtInCacheFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4ExtInCacheFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4ExtInCacheFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4ExtInCacheFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.lblk' @:: Lens' Ext4ExtInCacheFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'lblk' @:: Lens' Ext4ExtInCacheFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ret' @:: Lens' Ext4ExtInCacheFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ret' @:: Lens' Ext4ExtInCacheFtraceEvent (Prelude.Maybe Data.Int.Int32)@ -}
data Ext4ExtInCacheFtraceEvent
  = Ext4ExtInCacheFtraceEvent'_constructor {_Ext4ExtInCacheFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                            _Ext4ExtInCacheFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                            _Ext4ExtInCacheFtraceEvent'lblk :: !(Prelude.Maybe Data.Word.Word32),
                                            _Ext4ExtInCacheFtraceEvent'ret :: !(Prelude.Maybe Data.Int.Int32),
                                            _Ext4ExtInCacheFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4ExtInCacheFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4ExtInCacheFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtInCacheFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4ExtInCacheFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtInCacheFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtInCacheFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4ExtInCacheFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ExtInCacheFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtInCacheFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4ExtInCacheFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtInCacheFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtInCacheFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4ExtInCacheFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ExtInCacheFtraceEvent "lblk" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtInCacheFtraceEvent'lblk
           (\ x__ y__ -> x__ {_Ext4ExtInCacheFtraceEvent'lblk = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtInCacheFtraceEvent "maybe'lblk" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtInCacheFtraceEvent'lblk
           (\ x__ y__ -> x__ {_Ext4ExtInCacheFtraceEvent'lblk = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ExtInCacheFtraceEvent "ret" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtInCacheFtraceEvent'ret
           (\ x__ y__ -> x__ {_Ext4ExtInCacheFtraceEvent'ret = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtInCacheFtraceEvent "maybe'ret" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtInCacheFtraceEvent'ret
           (\ x__ y__ -> x__ {_Ext4ExtInCacheFtraceEvent'ret = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4ExtInCacheFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4ExtInCacheFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \\EMExt4ExtInCacheFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DC2\n\
      \\EOTlblk\CAN\ETX \SOH(\rR\EOTlblk\DC2\DLE\n\
      \\ETXret\CAN\EOT \SOH(\ENQR\ETXret"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtInCacheFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtInCacheFtraceEvent
        lblk__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "lblk"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'lblk")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtInCacheFtraceEvent
        ret__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ret"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ret")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtInCacheFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, lblk__field_descriptor),
           (Data.ProtoLens.Tag 4, ret__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4ExtInCacheFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__ {_Ext4ExtInCacheFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4ExtInCacheFtraceEvent'_constructor
        {_Ext4ExtInCacheFtraceEvent'dev = Prelude.Nothing,
         _Ext4ExtInCacheFtraceEvent'ino = Prelude.Nothing,
         _Ext4ExtInCacheFtraceEvent'lblk = Prelude.Nothing,
         _Ext4ExtInCacheFtraceEvent'ret = Prelude.Nothing,
         _Ext4ExtInCacheFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4ExtInCacheFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4ExtInCacheFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "lblk"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"lblk") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "ret"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ret") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "Ext4ExtInCacheFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'lblk") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ret") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                      (Data.ProtoLens.Encoding.Wire.buildFieldSet
                         (Lens.Family2.view Data.ProtoLens.unknownFields _x)))))
instance Control.DeepSeq.NFData Ext4ExtInCacheFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4ExtInCacheFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4ExtInCacheFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4ExtInCacheFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4ExtInCacheFtraceEvent'lblk x__)
                      (Control.DeepSeq.deepseq
                         (_Ext4ExtInCacheFtraceEvent'ret x__) ()))))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4ExtLoadExtentFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4ExtLoadExtentFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4ExtLoadExtentFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4ExtLoadExtentFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.pblk' @:: Lens' Ext4ExtLoadExtentFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'pblk' @:: Lens' Ext4ExtLoadExtentFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.lblk' @:: Lens' Ext4ExtLoadExtentFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'lblk' @:: Lens' Ext4ExtLoadExtentFtraceEvent (Prelude.Maybe Data.Word.Word32)@ -}
data Ext4ExtLoadExtentFtraceEvent
  = Ext4ExtLoadExtentFtraceEvent'_constructor {_Ext4ExtLoadExtentFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                               _Ext4ExtLoadExtentFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                               _Ext4ExtLoadExtentFtraceEvent'pblk :: !(Prelude.Maybe Data.Word.Word64),
                                               _Ext4ExtLoadExtentFtraceEvent'lblk :: !(Prelude.Maybe Data.Word.Word32),
                                               _Ext4ExtLoadExtentFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4ExtLoadExtentFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4ExtLoadExtentFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtLoadExtentFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4ExtLoadExtentFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtLoadExtentFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtLoadExtentFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4ExtLoadExtentFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ExtLoadExtentFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtLoadExtentFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4ExtLoadExtentFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtLoadExtentFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtLoadExtentFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4ExtLoadExtentFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ExtLoadExtentFtraceEvent "pblk" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtLoadExtentFtraceEvent'pblk
           (\ x__ y__ -> x__ {_Ext4ExtLoadExtentFtraceEvent'pblk = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtLoadExtentFtraceEvent "maybe'pblk" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtLoadExtentFtraceEvent'pblk
           (\ x__ y__ -> x__ {_Ext4ExtLoadExtentFtraceEvent'pblk = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ExtLoadExtentFtraceEvent "lblk" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtLoadExtentFtraceEvent'lblk
           (\ x__ y__ -> x__ {_Ext4ExtLoadExtentFtraceEvent'lblk = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtLoadExtentFtraceEvent "maybe'lblk" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtLoadExtentFtraceEvent'lblk
           (\ x__ y__ -> x__ {_Ext4ExtLoadExtentFtraceEvent'lblk = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4ExtLoadExtentFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4ExtLoadExtentFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \\FSExt4ExtLoadExtentFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DC2\n\
      \\EOTpblk\CAN\ETX \SOH(\EOTR\EOTpblk\DC2\DC2\n\
      \\EOTlblk\CAN\EOT \SOH(\rR\EOTlblk"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtLoadExtentFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtLoadExtentFtraceEvent
        pblk__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "pblk"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'pblk")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtLoadExtentFtraceEvent
        lblk__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "lblk"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'lblk")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtLoadExtentFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, pblk__field_descriptor),
           (Data.ProtoLens.Tag 4, lblk__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4ExtLoadExtentFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__ {_Ext4ExtLoadExtentFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4ExtLoadExtentFtraceEvent'_constructor
        {_Ext4ExtLoadExtentFtraceEvent'dev = Prelude.Nothing,
         _Ext4ExtLoadExtentFtraceEvent'ino = Prelude.Nothing,
         _Ext4ExtLoadExtentFtraceEvent'pblk = Prelude.Nothing,
         _Ext4ExtLoadExtentFtraceEvent'lblk = Prelude.Nothing,
         _Ext4ExtLoadExtentFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4ExtLoadExtentFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4ExtLoadExtentFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "pblk"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"pblk") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "lblk"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"lblk") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "Ext4ExtLoadExtentFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'pblk") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'lblk") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                      (Data.ProtoLens.Encoding.Wire.buildFieldSet
                         (Lens.Family2.view Data.ProtoLens.unknownFields _x)))))
instance Control.DeepSeq.NFData Ext4ExtLoadExtentFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4ExtLoadExtentFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4ExtLoadExtentFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4ExtLoadExtentFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4ExtLoadExtentFtraceEvent'pblk x__)
                      (Control.DeepSeq.deepseq
                         (_Ext4ExtLoadExtentFtraceEvent'lblk x__) ()))))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4ExtMapBlocksEnterFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4ExtMapBlocksEnterFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4ExtMapBlocksEnterFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4ExtMapBlocksEnterFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.lblk' @:: Lens' Ext4ExtMapBlocksEnterFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'lblk' @:: Lens' Ext4ExtMapBlocksEnterFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.len' @:: Lens' Ext4ExtMapBlocksEnterFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'len' @:: Lens' Ext4ExtMapBlocksEnterFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.flags' @:: Lens' Ext4ExtMapBlocksEnterFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'flags' @:: Lens' Ext4ExtMapBlocksEnterFtraceEvent (Prelude.Maybe Data.Word.Word32)@ -}
data Ext4ExtMapBlocksEnterFtraceEvent
  = Ext4ExtMapBlocksEnterFtraceEvent'_constructor {_Ext4ExtMapBlocksEnterFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                                   _Ext4ExtMapBlocksEnterFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                                   _Ext4ExtMapBlocksEnterFtraceEvent'lblk :: !(Prelude.Maybe Data.Word.Word32),
                                                   _Ext4ExtMapBlocksEnterFtraceEvent'len :: !(Prelude.Maybe Data.Word.Word32),
                                                   _Ext4ExtMapBlocksEnterFtraceEvent'flags :: !(Prelude.Maybe Data.Word.Word32),
                                                   _Ext4ExtMapBlocksEnterFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4ExtMapBlocksEnterFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4ExtMapBlocksEnterFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtMapBlocksEnterFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4ExtMapBlocksEnterFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtMapBlocksEnterFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtMapBlocksEnterFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4ExtMapBlocksEnterFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ExtMapBlocksEnterFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtMapBlocksEnterFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4ExtMapBlocksEnterFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtMapBlocksEnterFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtMapBlocksEnterFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4ExtMapBlocksEnterFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ExtMapBlocksEnterFtraceEvent "lblk" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtMapBlocksEnterFtraceEvent'lblk
           (\ x__ y__ -> x__ {_Ext4ExtMapBlocksEnterFtraceEvent'lblk = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtMapBlocksEnterFtraceEvent "maybe'lblk" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtMapBlocksEnterFtraceEvent'lblk
           (\ x__ y__ -> x__ {_Ext4ExtMapBlocksEnterFtraceEvent'lblk = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ExtMapBlocksEnterFtraceEvent "len" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtMapBlocksEnterFtraceEvent'len
           (\ x__ y__ -> x__ {_Ext4ExtMapBlocksEnterFtraceEvent'len = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtMapBlocksEnterFtraceEvent "maybe'len" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtMapBlocksEnterFtraceEvent'len
           (\ x__ y__ -> x__ {_Ext4ExtMapBlocksEnterFtraceEvent'len = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ExtMapBlocksEnterFtraceEvent "flags" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtMapBlocksEnterFtraceEvent'flags
           (\ x__ y__ -> x__ {_Ext4ExtMapBlocksEnterFtraceEvent'flags = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtMapBlocksEnterFtraceEvent "maybe'flags" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtMapBlocksEnterFtraceEvent'flags
           (\ x__ y__ -> x__ {_Ext4ExtMapBlocksEnterFtraceEvent'flags = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4ExtMapBlocksEnterFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4ExtMapBlocksEnterFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \ Ext4ExtMapBlocksEnterFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DC2\n\
      \\EOTlblk\CAN\ETX \SOH(\rR\EOTlblk\DC2\DLE\n\
      \\ETXlen\CAN\EOT \SOH(\rR\ETXlen\DC2\DC4\n\
      \\ENQflags\CAN\ENQ \SOH(\rR\ENQflags"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtMapBlocksEnterFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtMapBlocksEnterFtraceEvent
        lblk__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "lblk"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'lblk")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtMapBlocksEnterFtraceEvent
        len__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "len"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'len")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtMapBlocksEnterFtraceEvent
        flags__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "flags"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'flags")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtMapBlocksEnterFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, lblk__field_descriptor),
           (Data.ProtoLens.Tag 4, len__field_descriptor),
           (Data.ProtoLens.Tag 5, flags__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4ExtMapBlocksEnterFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__ {_Ext4ExtMapBlocksEnterFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4ExtMapBlocksEnterFtraceEvent'_constructor
        {_Ext4ExtMapBlocksEnterFtraceEvent'dev = Prelude.Nothing,
         _Ext4ExtMapBlocksEnterFtraceEvent'ino = Prelude.Nothing,
         _Ext4ExtMapBlocksEnterFtraceEvent'lblk = Prelude.Nothing,
         _Ext4ExtMapBlocksEnterFtraceEvent'len = Prelude.Nothing,
         _Ext4ExtMapBlocksEnterFtraceEvent'flags = Prelude.Nothing,
         _Ext4ExtMapBlocksEnterFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4ExtMapBlocksEnterFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4ExtMapBlocksEnterFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "lblk"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"lblk") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "len"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"len") y x)
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "flags"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"flags") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage)
          "Ext4ExtMapBlocksEnterFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'lblk") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'len") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'flags") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral
                                      _v))
                         (Data.ProtoLens.Encoding.Wire.buildFieldSet
                            (Lens.Family2.view Data.ProtoLens.unknownFields _x))))))
instance Control.DeepSeq.NFData Ext4ExtMapBlocksEnterFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4ExtMapBlocksEnterFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4ExtMapBlocksEnterFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4ExtMapBlocksEnterFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4ExtMapBlocksEnterFtraceEvent'lblk x__)
                      (Control.DeepSeq.deepseq
                         (_Ext4ExtMapBlocksEnterFtraceEvent'len x__)
                         (Control.DeepSeq.deepseq
                            (_Ext4ExtMapBlocksEnterFtraceEvent'flags x__) ())))))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4ExtMapBlocksExitFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4ExtMapBlocksExitFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4ExtMapBlocksExitFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4ExtMapBlocksExitFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.flags' @:: Lens' Ext4ExtMapBlocksExitFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'flags' @:: Lens' Ext4ExtMapBlocksExitFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.pblk' @:: Lens' Ext4ExtMapBlocksExitFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'pblk' @:: Lens' Ext4ExtMapBlocksExitFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.lblk' @:: Lens' Ext4ExtMapBlocksExitFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'lblk' @:: Lens' Ext4ExtMapBlocksExitFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.len' @:: Lens' Ext4ExtMapBlocksExitFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'len' @:: Lens' Ext4ExtMapBlocksExitFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.mflags' @:: Lens' Ext4ExtMapBlocksExitFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'mflags' @:: Lens' Ext4ExtMapBlocksExitFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ret' @:: Lens' Ext4ExtMapBlocksExitFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ret' @:: Lens' Ext4ExtMapBlocksExitFtraceEvent (Prelude.Maybe Data.Int.Int32)@ -}
data Ext4ExtMapBlocksExitFtraceEvent
  = Ext4ExtMapBlocksExitFtraceEvent'_constructor {_Ext4ExtMapBlocksExitFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                                  _Ext4ExtMapBlocksExitFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                                  _Ext4ExtMapBlocksExitFtraceEvent'flags :: !(Prelude.Maybe Data.Word.Word32),
                                                  _Ext4ExtMapBlocksExitFtraceEvent'pblk :: !(Prelude.Maybe Data.Word.Word64),
                                                  _Ext4ExtMapBlocksExitFtraceEvent'lblk :: !(Prelude.Maybe Data.Word.Word32),
                                                  _Ext4ExtMapBlocksExitFtraceEvent'len :: !(Prelude.Maybe Data.Word.Word32),
                                                  _Ext4ExtMapBlocksExitFtraceEvent'mflags :: !(Prelude.Maybe Data.Word.Word32),
                                                  _Ext4ExtMapBlocksExitFtraceEvent'ret :: !(Prelude.Maybe Data.Int.Int32),
                                                  _Ext4ExtMapBlocksExitFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4ExtMapBlocksExitFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4ExtMapBlocksExitFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtMapBlocksExitFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4ExtMapBlocksExitFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtMapBlocksExitFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtMapBlocksExitFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4ExtMapBlocksExitFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ExtMapBlocksExitFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtMapBlocksExitFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4ExtMapBlocksExitFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtMapBlocksExitFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtMapBlocksExitFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4ExtMapBlocksExitFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ExtMapBlocksExitFtraceEvent "flags" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtMapBlocksExitFtraceEvent'flags
           (\ x__ y__ -> x__ {_Ext4ExtMapBlocksExitFtraceEvent'flags = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtMapBlocksExitFtraceEvent "maybe'flags" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtMapBlocksExitFtraceEvent'flags
           (\ x__ y__ -> x__ {_Ext4ExtMapBlocksExitFtraceEvent'flags = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ExtMapBlocksExitFtraceEvent "pblk" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtMapBlocksExitFtraceEvent'pblk
           (\ x__ y__ -> x__ {_Ext4ExtMapBlocksExitFtraceEvent'pblk = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtMapBlocksExitFtraceEvent "maybe'pblk" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtMapBlocksExitFtraceEvent'pblk
           (\ x__ y__ -> x__ {_Ext4ExtMapBlocksExitFtraceEvent'pblk = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ExtMapBlocksExitFtraceEvent "lblk" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtMapBlocksExitFtraceEvent'lblk
           (\ x__ y__ -> x__ {_Ext4ExtMapBlocksExitFtraceEvent'lblk = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtMapBlocksExitFtraceEvent "maybe'lblk" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtMapBlocksExitFtraceEvent'lblk
           (\ x__ y__ -> x__ {_Ext4ExtMapBlocksExitFtraceEvent'lblk = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ExtMapBlocksExitFtraceEvent "len" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtMapBlocksExitFtraceEvent'len
           (\ x__ y__ -> x__ {_Ext4ExtMapBlocksExitFtraceEvent'len = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtMapBlocksExitFtraceEvent "maybe'len" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtMapBlocksExitFtraceEvent'len
           (\ x__ y__ -> x__ {_Ext4ExtMapBlocksExitFtraceEvent'len = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ExtMapBlocksExitFtraceEvent "mflags" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtMapBlocksExitFtraceEvent'mflags
           (\ x__ y__ -> x__ {_Ext4ExtMapBlocksExitFtraceEvent'mflags = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtMapBlocksExitFtraceEvent "maybe'mflags" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtMapBlocksExitFtraceEvent'mflags
           (\ x__ y__ -> x__ {_Ext4ExtMapBlocksExitFtraceEvent'mflags = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ExtMapBlocksExitFtraceEvent "ret" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtMapBlocksExitFtraceEvent'ret
           (\ x__ y__ -> x__ {_Ext4ExtMapBlocksExitFtraceEvent'ret = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtMapBlocksExitFtraceEvent "maybe'ret" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtMapBlocksExitFtraceEvent'ret
           (\ x__ y__ -> x__ {_Ext4ExtMapBlocksExitFtraceEvent'ret = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4ExtMapBlocksExitFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4ExtMapBlocksExitFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \\USExt4ExtMapBlocksExitFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DC4\n\
      \\ENQflags\CAN\ETX \SOH(\rR\ENQflags\DC2\DC2\n\
      \\EOTpblk\CAN\EOT \SOH(\EOTR\EOTpblk\DC2\DC2\n\
      \\EOTlblk\CAN\ENQ \SOH(\rR\EOTlblk\DC2\DLE\n\
      \\ETXlen\CAN\ACK \SOH(\rR\ETXlen\DC2\SYN\n\
      \\ACKmflags\CAN\a \SOH(\rR\ACKmflags\DC2\DLE\n\
      \\ETXret\CAN\b \SOH(\ENQR\ETXret"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtMapBlocksExitFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtMapBlocksExitFtraceEvent
        flags__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "flags"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'flags")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtMapBlocksExitFtraceEvent
        pblk__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "pblk"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'pblk")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtMapBlocksExitFtraceEvent
        lblk__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "lblk"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'lblk")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtMapBlocksExitFtraceEvent
        len__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "len"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'len")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtMapBlocksExitFtraceEvent
        mflags__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "mflags"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'mflags")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtMapBlocksExitFtraceEvent
        ret__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ret"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ret")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtMapBlocksExitFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, flags__field_descriptor),
           (Data.ProtoLens.Tag 4, pblk__field_descriptor),
           (Data.ProtoLens.Tag 5, lblk__field_descriptor),
           (Data.ProtoLens.Tag 6, len__field_descriptor),
           (Data.ProtoLens.Tag 7, mflags__field_descriptor),
           (Data.ProtoLens.Tag 8, ret__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4ExtMapBlocksExitFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__ {_Ext4ExtMapBlocksExitFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4ExtMapBlocksExitFtraceEvent'_constructor
        {_Ext4ExtMapBlocksExitFtraceEvent'dev = Prelude.Nothing,
         _Ext4ExtMapBlocksExitFtraceEvent'ino = Prelude.Nothing,
         _Ext4ExtMapBlocksExitFtraceEvent'flags = Prelude.Nothing,
         _Ext4ExtMapBlocksExitFtraceEvent'pblk = Prelude.Nothing,
         _Ext4ExtMapBlocksExitFtraceEvent'lblk = Prelude.Nothing,
         _Ext4ExtMapBlocksExitFtraceEvent'len = Prelude.Nothing,
         _Ext4ExtMapBlocksExitFtraceEvent'mflags = Prelude.Nothing,
         _Ext4ExtMapBlocksExitFtraceEvent'ret = Prelude.Nothing,
         _Ext4ExtMapBlocksExitFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4ExtMapBlocksExitFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4ExtMapBlocksExitFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "flags"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"flags") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "pblk"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"pblk") y x)
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "lblk"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"lblk") y x)
                        48
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "len"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"len") y x)
                        56
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "mflags"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"mflags") y x)
                        64
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "ret"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ret") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage)
          "Ext4ExtMapBlocksExitFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'flags") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'pblk") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'lblk") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral
                                      _v))
                         ((Data.Monoid.<>)
                            (case
                                 Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'len") _x
                             of
                               Prelude.Nothing -> Data.Monoid.mempty
                               (Prelude.Just _v)
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 48)
                                      ((Prelude..)
                                         Data.ProtoLens.Encoding.Bytes.putVarInt
                                         Prelude.fromIntegral _v))
                            ((Data.Monoid.<>)
                               (case
                                    Lens.Family2.view
                                      (Data.ProtoLens.Field.field @"maybe'mflags") _x
                                of
                                  Prelude.Nothing -> Data.Monoid.mempty
                                  (Prelude.Just _v)
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt 56)
                                         ((Prelude..)
                                            Data.ProtoLens.Encoding.Bytes.putVarInt
                                            Prelude.fromIntegral _v))
                               ((Data.Monoid.<>)
                                  (case
                                       Lens.Family2.view
                                         (Data.ProtoLens.Field.field @"maybe'ret") _x
                                   of
                                     Prelude.Nothing -> Data.Monoid.mempty
                                     (Prelude.Just _v)
                                       -> (Data.Monoid.<>)
                                            (Data.ProtoLens.Encoding.Bytes.putVarInt 64)
                                            ((Prelude..)
                                               Data.ProtoLens.Encoding.Bytes.putVarInt
                                               Prelude.fromIntegral _v))
                                  (Data.ProtoLens.Encoding.Wire.buildFieldSet
                                     (Lens.Family2.view Data.ProtoLens.unknownFields _x)))))))))
instance Control.DeepSeq.NFData Ext4ExtMapBlocksExitFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4ExtMapBlocksExitFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4ExtMapBlocksExitFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4ExtMapBlocksExitFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4ExtMapBlocksExitFtraceEvent'flags x__)
                      (Control.DeepSeq.deepseq
                         (_Ext4ExtMapBlocksExitFtraceEvent'pblk x__)
                         (Control.DeepSeq.deepseq
                            (_Ext4ExtMapBlocksExitFtraceEvent'lblk x__)
                            (Control.DeepSeq.deepseq
                               (_Ext4ExtMapBlocksExitFtraceEvent'len x__)
                               (Control.DeepSeq.deepseq
                                  (_Ext4ExtMapBlocksExitFtraceEvent'mflags x__)
                                  (Control.DeepSeq.deepseq
                                     (_Ext4ExtMapBlocksExitFtraceEvent'ret x__) ()))))))))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4ExtPutInCacheFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4ExtPutInCacheFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4ExtPutInCacheFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4ExtPutInCacheFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.lblk' @:: Lens' Ext4ExtPutInCacheFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'lblk' @:: Lens' Ext4ExtPutInCacheFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.len' @:: Lens' Ext4ExtPutInCacheFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'len' @:: Lens' Ext4ExtPutInCacheFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.start' @:: Lens' Ext4ExtPutInCacheFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'start' @:: Lens' Ext4ExtPutInCacheFtraceEvent (Prelude.Maybe Data.Word.Word64)@ -}
data Ext4ExtPutInCacheFtraceEvent
  = Ext4ExtPutInCacheFtraceEvent'_constructor {_Ext4ExtPutInCacheFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                               _Ext4ExtPutInCacheFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                               _Ext4ExtPutInCacheFtraceEvent'lblk :: !(Prelude.Maybe Data.Word.Word32),
                                               _Ext4ExtPutInCacheFtraceEvent'len :: !(Prelude.Maybe Data.Word.Word32),
                                               _Ext4ExtPutInCacheFtraceEvent'start :: !(Prelude.Maybe Data.Word.Word64),
                                               _Ext4ExtPutInCacheFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4ExtPutInCacheFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4ExtPutInCacheFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtPutInCacheFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4ExtPutInCacheFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtPutInCacheFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtPutInCacheFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4ExtPutInCacheFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ExtPutInCacheFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtPutInCacheFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4ExtPutInCacheFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtPutInCacheFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtPutInCacheFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4ExtPutInCacheFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ExtPutInCacheFtraceEvent "lblk" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtPutInCacheFtraceEvent'lblk
           (\ x__ y__ -> x__ {_Ext4ExtPutInCacheFtraceEvent'lblk = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtPutInCacheFtraceEvent "maybe'lblk" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtPutInCacheFtraceEvent'lblk
           (\ x__ y__ -> x__ {_Ext4ExtPutInCacheFtraceEvent'lblk = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ExtPutInCacheFtraceEvent "len" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtPutInCacheFtraceEvent'len
           (\ x__ y__ -> x__ {_Ext4ExtPutInCacheFtraceEvent'len = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtPutInCacheFtraceEvent "maybe'len" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtPutInCacheFtraceEvent'len
           (\ x__ y__ -> x__ {_Ext4ExtPutInCacheFtraceEvent'len = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ExtPutInCacheFtraceEvent "start" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtPutInCacheFtraceEvent'start
           (\ x__ y__ -> x__ {_Ext4ExtPutInCacheFtraceEvent'start = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtPutInCacheFtraceEvent "maybe'start" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtPutInCacheFtraceEvent'start
           (\ x__ y__ -> x__ {_Ext4ExtPutInCacheFtraceEvent'start = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4ExtPutInCacheFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4ExtPutInCacheFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \\FSExt4ExtPutInCacheFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DC2\n\
      \\EOTlblk\CAN\ETX \SOH(\rR\EOTlblk\DC2\DLE\n\
      \\ETXlen\CAN\EOT \SOH(\rR\ETXlen\DC2\DC4\n\
      \\ENQstart\CAN\ENQ \SOH(\EOTR\ENQstart"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtPutInCacheFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtPutInCacheFtraceEvent
        lblk__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "lblk"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'lblk")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtPutInCacheFtraceEvent
        len__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "len"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'len")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtPutInCacheFtraceEvent
        start__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "start"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'start")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtPutInCacheFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, lblk__field_descriptor),
           (Data.ProtoLens.Tag 4, len__field_descriptor),
           (Data.ProtoLens.Tag 5, start__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4ExtPutInCacheFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__ {_Ext4ExtPutInCacheFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4ExtPutInCacheFtraceEvent'_constructor
        {_Ext4ExtPutInCacheFtraceEvent'dev = Prelude.Nothing,
         _Ext4ExtPutInCacheFtraceEvent'ino = Prelude.Nothing,
         _Ext4ExtPutInCacheFtraceEvent'lblk = Prelude.Nothing,
         _Ext4ExtPutInCacheFtraceEvent'len = Prelude.Nothing,
         _Ext4ExtPutInCacheFtraceEvent'start = Prelude.Nothing,
         _Ext4ExtPutInCacheFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4ExtPutInCacheFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4ExtPutInCacheFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "lblk"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"lblk") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "len"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"len") y x)
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "start"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"start") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "Ext4ExtPutInCacheFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'lblk") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'len") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'start") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                         (Data.ProtoLens.Encoding.Wire.buildFieldSet
                            (Lens.Family2.view Data.ProtoLens.unknownFields _x))))))
instance Control.DeepSeq.NFData Ext4ExtPutInCacheFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4ExtPutInCacheFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4ExtPutInCacheFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4ExtPutInCacheFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4ExtPutInCacheFtraceEvent'lblk x__)
                      (Control.DeepSeq.deepseq
                         (_Ext4ExtPutInCacheFtraceEvent'len x__)
                         (Control.DeepSeq.deepseq
                            (_Ext4ExtPutInCacheFtraceEvent'start x__) ())))))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4ExtRemoveSpaceDoneFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4ExtRemoveSpaceDoneFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4ExtRemoveSpaceDoneFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4ExtRemoveSpaceDoneFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.start' @:: Lens' Ext4ExtRemoveSpaceDoneFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'start' @:: Lens' Ext4ExtRemoveSpaceDoneFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.end' @:: Lens' Ext4ExtRemoveSpaceDoneFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'end' @:: Lens' Ext4ExtRemoveSpaceDoneFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.depth' @:: Lens' Ext4ExtRemoveSpaceDoneFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'depth' @:: Lens' Ext4ExtRemoveSpaceDoneFtraceEvent (Prelude.Maybe Data.Int.Int32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.partial' @:: Lens' Ext4ExtRemoveSpaceDoneFtraceEvent Data.Int.Int64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'partial' @:: Lens' Ext4ExtRemoveSpaceDoneFtraceEvent (Prelude.Maybe Data.Int.Int64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ehEntries' @:: Lens' Ext4ExtRemoveSpaceDoneFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ehEntries' @:: Lens' Ext4ExtRemoveSpaceDoneFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.pcLblk' @:: Lens' Ext4ExtRemoveSpaceDoneFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'pcLblk' @:: Lens' Ext4ExtRemoveSpaceDoneFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.pcPclu' @:: Lens' Ext4ExtRemoveSpaceDoneFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'pcPclu' @:: Lens' Ext4ExtRemoveSpaceDoneFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.pcState' @:: Lens' Ext4ExtRemoveSpaceDoneFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'pcState' @:: Lens' Ext4ExtRemoveSpaceDoneFtraceEvent (Prelude.Maybe Data.Int.Int32)@ -}
data Ext4ExtRemoveSpaceDoneFtraceEvent
  = Ext4ExtRemoveSpaceDoneFtraceEvent'_constructor {_Ext4ExtRemoveSpaceDoneFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                                    _Ext4ExtRemoveSpaceDoneFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                                    _Ext4ExtRemoveSpaceDoneFtraceEvent'start :: !(Prelude.Maybe Data.Word.Word32),
                                                    _Ext4ExtRemoveSpaceDoneFtraceEvent'end :: !(Prelude.Maybe Data.Word.Word32),
                                                    _Ext4ExtRemoveSpaceDoneFtraceEvent'depth :: !(Prelude.Maybe Data.Int.Int32),
                                                    _Ext4ExtRemoveSpaceDoneFtraceEvent'partial :: !(Prelude.Maybe Data.Int.Int64),
                                                    _Ext4ExtRemoveSpaceDoneFtraceEvent'ehEntries :: !(Prelude.Maybe Data.Word.Word32),
                                                    _Ext4ExtRemoveSpaceDoneFtraceEvent'pcLblk :: !(Prelude.Maybe Data.Word.Word32),
                                                    _Ext4ExtRemoveSpaceDoneFtraceEvent'pcPclu :: !(Prelude.Maybe Data.Word.Word64),
                                                    _Ext4ExtRemoveSpaceDoneFtraceEvent'pcState :: !(Prelude.Maybe Data.Int.Int32),
                                                    _Ext4ExtRemoveSpaceDoneFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4ExtRemoveSpaceDoneFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4ExtRemoveSpaceDoneFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtRemoveSpaceDoneFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4ExtRemoveSpaceDoneFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtRemoveSpaceDoneFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtRemoveSpaceDoneFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4ExtRemoveSpaceDoneFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ExtRemoveSpaceDoneFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtRemoveSpaceDoneFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4ExtRemoveSpaceDoneFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtRemoveSpaceDoneFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtRemoveSpaceDoneFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4ExtRemoveSpaceDoneFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ExtRemoveSpaceDoneFtraceEvent "start" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtRemoveSpaceDoneFtraceEvent'start
           (\ x__ y__
              -> x__ {_Ext4ExtRemoveSpaceDoneFtraceEvent'start = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtRemoveSpaceDoneFtraceEvent "maybe'start" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtRemoveSpaceDoneFtraceEvent'start
           (\ x__ y__
              -> x__ {_Ext4ExtRemoveSpaceDoneFtraceEvent'start = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ExtRemoveSpaceDoneFtraceEvent "end" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtRemoveSpaceDoneFtraceEvent'end
           (\ x__ y__ -> x__ {_Ext4ExtRemoveSpaceDoneFtraceEvent'end = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtRemoveSpaceDoneFtraceEvent "maybe'end" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtRemoveSpaceDoneFtraceEvent'end
           (\ x__ y__ -> x__ {_Ext4ExtRemoveSpaceDoneFtraceEvent'end = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ExtRemoveSpaceDoneFtraceEvent "depth" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtRemoveSpaceDoneFtraceEvent'depth
           (\ x__ y__
              -> x__ {_Ext4ExtRemoveSpaceDoneFtraceEvent'depth = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtRemoveSpaceDoneFtraceEvent "maybe'depth" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtRemoveSpaceDoneFtraceEvent'depth
           (\ x__ y__
              -> x__ {_Ext4ExtRemoveSpaceDoneFtraceEvent'depth = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ExtRemoveSpaceDoneFtraceEvent "partial" Data.Int.Int64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtRemoveSpaceDoneFtraceEvent'partial
           (\ x__ y__
              -> x__ {_Ext4ExtRemoveSpaceDoneFtraceEvent'partial = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtRemoveSpaceDoneFtraceEvent "maybe'partial" (Prelude.Maybe Data.Int.Int64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtRemoveSpaceDoneFtraceEvent'partial
           (\ x__ y__
              -> x__ {_Ext4ExtRemoveSpaceDoneFtraceEvent'partial = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ExtRemoveSpaceDoneFtraceEvent "ehEntries" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtRemoveSpaceDoneFtraceEvent'ehEntries
           (\ x__ y__
              -> x__ {_Ext4ExtRemoveSpaceDoneFtraceEvent'ehEntries = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtRemoveSpaceDoneFtraceEvent "maybe'ehEntries" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtRemoveSpaceDoneFtraceEvent'ehEntries
           (\ x__ y__
              -> x__ {_Ext4ExtRemoveSpaceDoneFtraceEvent'ehEntries = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ExtRemoveSpaceDoneFtraceEvent "pcLblk" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtRemoveSpaceDoneFtraceEvent'pcLblk
           (\ x__ y__
              -> x__ {_Ext4ExtRemoveSpaceDoneFtraceEvent'pcLblk = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtRemoveSpaceDoneFtraceEvent "maybe'pcLblk" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtRemoveSpaceDoneFtraceEvent'pcLblk
           (\ x__ y__
              -> x__ {_Ext4ExtRemoveSpaceDoneFtraceEvent'pcLblk = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ExtRemoveSpaceDoneFtraceEvent "pcPclu" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtRemoveSpaceDoneFtraceEvent'pcPclu
           (\ x__ y__
              -> x__ {_Ext4ExtRemoveSpaceDoneFtraceEvent'pcPclu = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtRemoveSpaceDoneFtraceEvent "maybe'pcPclu" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtRemoveSpaceDoneFtraceEvent'pcPclu
           (\ x__ y__
              -> x__ {_Ext4ExtRemoveSpaceDoneFtraceEvent'pcPclu = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ExtRemoveSpaceDoneFtraceEvent "pcState" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtRemoveSpaceDoneFtraceEvent'pcState
           (\ x__ y__
              -> x__ {_Ext4ExtRemoveSpaceDoneFtraceEvent'pcState = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtRemoveSpaceDoneFtraceEvent "maybe'pcState" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtRemoveSpaceDoneFtraceEvent'pcState
           (\ x__ y__
              -> x__ {_Ext4ExtRemoveSpaceDoneFtraceEvent'pcState = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4ExtRemoveSpaceDoneFtraceEvent where
  messageName _
    = Data.Text.pack
        "perfetto.protos.Ext4ExtRemoveSpaceDoneFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \!Ext4ExtRemoveSpaceDoneFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DC4\n\
      \\ENQstart\CAN\ETX \SOH(\rR\ENQstart\DC2\DLE\n\
      \\ETXend\CAN\EOT \SOH(\rR\ETXend\DC2\DC4\n\
      \\ENQdepth\CAN\ENQ \SOH(\ENQR\ENQdepth\DC2\CAN\n\
      \\apartial\CAN\ACK \SOH(\ETXR\apartial\DC2\GS\n\
      \\n\
      \eh_entries\CAN\a \SOH(\rR\tehEntries\DC2\ETB\n\
      \\apc_lblk\CAN\b \SOH(\rR\ACKpcLblk\DC2\ETB\n\
      \\apc_pclu\CAN\t \SOH(\EOTR\ACKpcPclu\DC2\EM\n\
      \\bpc_state\CAN\n\
      \ \SOH(\ENQR\apcState"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtRemoveSpaceDoneFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtRemoveSpaceDoneFtraceEvent
        start__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "start"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'start")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtRemoveSpaceDoneFtraceEvent
        end__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "end"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'end")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtRemoveSpaceDoneFtraceEvent
        depth__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "depth"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'depth")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtRemoveSpaceDoneFtraceEvent
        partial__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "partial"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'partial")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtRemoveSpaceDoneFtraceEvent
        ehEntries__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "eh_entries"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ehEntries")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtRemoveSpaceDoneFtraceEvent
        pcLblk__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "pc_lblk"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'pcLblk")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtRemoveSpaceDoneFtraceEvent
        pcPclu__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "pc_pclu"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'pcPclu")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtRemoveSpaceDoneFtraceEvent
        pcState__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "pc_state"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'pcState")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtRemoveSpaceDoneFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, start__field_descriptor),
           (Data.ProtoLens.Tag 4, end__field_descriptor),
           (Data.ProtoLens.Tag 5, depth__field_descriptor),
           (Data.ProtoLens.Tag 6, partial__field_descriptor),
           (Data.ProtoLens.Tag 7, ehEntries__field_descriptor),
           (Data.ProtoLens.Tag 8, pcLblk__field_descriptor),
           (Data.ProtoLens.Tag 9, pcPclu__field_descriptor),
           (Data.ProtoLens.Tag 10, pcState__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4ExtRemoveSpaceDoneFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__ {_Ext4ExtRemoveSpaceDoneFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4ExtRemoveSpaceDoneFtraceEvent'_constructor
        {_Ext4ExtRemoveSpaceDoneFtraceEvent'dev = Prelude.Nothing,
         _Ext4ExtRemoveSpaceDoneFtraceEvent'ino = Prelude.Nothing,
         _Ext4ExtRemoveSpaceDoneFtraceEvent'start = Prelude.Nothing,
         _Ext4ExtRemoveSpaceDoneFtraceEvent'end = Prelude.Nothing,
         _Ext4ExtRemoveSpaceDoneFtraceEvent'depth = Prelude.Nothing,
         _Ext4ExtRemoveSpaceDoneFtraceEvent'partial = Prelude.Nothing,
         _Ext4ExtRemoveSpaceDoneFtraceEvent'ehEntries = Prelude.Nothing,
         _Ext4ExtRemoveSpaceDoneFtraceEvent'pcLblk = Prelude.Nothing,
         _Ext4ExtRemoveSpaceDoneFtraceEvent'pcPclu = Prelude.Nothing,
         _Ext4ExtRemoveSpaceDoneFtraceEvent'pcState = Prelude.Nothing,
         _Ext4ExtRemoveSpaceDoneFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4ExtRemoveSpaceDoneFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4ExtRemoveSpaceDoneFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "start"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"start") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "end"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"end") y x)
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "depth"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"depth") y x)
                        48
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "partial"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"partial") y x)
                        56
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "eh_entries"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"ehEntries") y x)
                        64
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "pc_lblk"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"pcLblk") y x)
                        72
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "pc_pclu"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"pcPclu") y x)
                        80
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "pc_state"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"pcState") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage)
          "Ext4ExtRemoveSpaceDoneFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'start") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'end") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'depth") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral
                                      _v))
                         ((Data.Monoid.<>)
                            (case
                                 Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'partial") _x
                             of
                               Prelude.Nothing -> Data.Monoid.mempty
                               (Prelude.Just _v)
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 48)
                                      ((Prelude..)
                                         Data.ProtoLens.Encoding.Bytes.putVarInt
                                         Prelude.fromIntegral _v))
                            ((Data.Monoid.<>)
                               (case
                                    Lens.Family2.view
                                      (Data.ProtoLens.Field.field @"maybe'ehEntries") _x
                                of
                                  Prelude.Nothing -> Data.Monoid.mempty
                                  (Prelude.Just _v)
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt 56)
                                         ((Prelude..)
                                            Data.ProtoLens.Encoding.Bytes.putVarInt
                                            Prelude.fromIntegral _v))
                               ((Data.Monoid.<>)
                                  (case
                                       Lens.Family2.view
                                         (Data.ProtoLens.Field.field @"maybe'pcLblk") _x
                                   of
                                     Prelude.Nothing -> Data.Monoid.mempty
                                     (Prelude.Just _v)
                                       -> (Data.Monoid.<>)
                                            (Data.ProtoLens.Encoding.Bytes.putVarInt 64)
                                            ((Prelude..)
                                               Data.ProtoLens.Encoding.Bytes.putVarInt
                                               Prelude.fromIntegral _v))
                                  ((Data.Monoid.<>)
                                     (case
                                          Lens.Family2.view
                                            (Data.ProtoLens.Field.field @"maybe'pcPclu") _x
                                      of
                                        Prelude.Nothing -> Data.Monoid.mempty
                                        (Prelude.Just _v)
                                          -> (Data.Monoid.<>)
                                               (Data.ProtoLens.Encoding.Bytes.putVarInt 72)
                                               (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                                     ((Data.Monoid.<>)
                                        (case
                                             Lens.Family2.view
                                               (Data.ProtoLens.Field.field @"maybe'pcState") _x
                                         of
                                           Prelude.Nothing -> Data.Monoid.mempty
                                           (Prelude.Just _v)
                                             -> (Data.Monoid.<>)
                                                  (Data.ProtoLens.Encoding.Bytes.putVarInt 80)
                                                  ((Prelude..)
                                                     Data.ProtoLens.Encoding.Bytes.putVarInt
                                                     Prelude.fromIntegral _v))
                                        (Data.ProtoLens.Encoding.Wire.buildFieldSet
                                           (Lens.Family2.view
                                              Data.ProtoLens.unknownFields _x)))))))))))
instance Control.DeepSeq.NFData Ext4ExtRemoveSpaceDoneFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4ExtRemoveSpaceDoneFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4ExtRemoveSpaceDoneFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4ExtRemoveSpaceDoneFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4ExtRemoveSpaceDoneFtraceEvent'start x__)
                      (Control.DeepSeq.deepseq
                         (_Ext4ExtRemoveSpaceDoneFtraceEvent'end x__)
                         (Control.DeepSeq.deepseq
                            (_Ext4ExtRemoveSpaceDoneFtraceEvent'depth x__)
                            (Control.DeepSeq.deepseq
                               (_Ext4ExtRemoveSpaceDoneFtraceEvent'partial x__)
                               (Control.DeepSeq.deepseq
                                  (_Ext4ExtRemoveSpaceDoneFtraceEvent'ehEntries x__)
                                  (Control.DeepSeq.deepseq
                                     (_Ext4ExtRemoveSpaceDoneFtraceEvent'pcLblk x__)
                                     (Control.DeepSeq.deepseq
                                        (_Ext4ExtRemoveSpaceDoneFtraceEvent'pcPclu x__)
                                        (Control.DeepSeq.deepseq
                                           (_Ext4ExtRemoveSpaceDoneFtraceEvent'pcState x__)
                                           ()))))))))))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4ExtRemoveSpaceFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4ExtRemoveSpaceFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4ExtRemoveSpaceFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4ExtRemoveSpaceFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.start' @:: Lens' Ext4ExtRemoveSpaceFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'start' @:: Lens' Ext4ExtRemoveSpaceFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.end' @:: Lens' Ext4ExtRemoveSpaceFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'end' @:: Lens' Ext4ExtRemoveSpaceFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.depth' @:: Lens' Ext4ExtRemoveSpaceFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'depth' @:: Lens' Ext4ExtRemoveSpaceFtraceEvent (Prelude.Maybe Data.Int.Int32)@ -}
data Ext4ExtRemoveSpaceFtraceEvent
  = Ext4ExtRemoveSpaceFtraceEvent'_constructor {_Ext4ExtRemoveSpaceFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                                _Ext4ExtRemoveSpaceFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                                _Ext4ExtRemoveSpaceFtraceEvent'start :: !(Prelude.Maybe Data.Word.Word32),
                                                _Ext4ExtRemoveSpaceFtraceEvent'end :: !(Prelude.Maybe Data.Word.Word32),
                                                _Ext4ExtRemoveSpaceFtraceEvent'depth :: !(Prelude.Maybe Data.Int.Int32),
                                                _Ext4ExtRemoveSpaceFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4ExtRemoveSpaceFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4ExtRemoveSpaceFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtRemoveSpaceFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4ExtRemoveSpaceFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtRemoveSpaceFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtRemoveSpaceFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4ExtRemoveSpaceFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ExtRemoveSpaceFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtRemoveSpaceFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4ExtRemoveSpaceFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtRemoveSpaceFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtRemoveSpaceFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4ExtRemoveSpaceFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ExtRemoveSpaceFtraceEvent "start" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtRemoveSpaceFtraceEvent'start
           (\ x__ y__ -> x__ {_Ext4ExtRemoveSpaceFtraceEvent'start = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtRemoveSpaceFtraceEvent "maybe'start" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtRemoveSpaceFtraceEvent'start
           (\ x__ y__ -> x__ {_Ext4ExtRemoveSpaceFtraceEvent'start = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ExtRemoveSpaceFtraceEvent "end" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtRemoveSpaceFtraceEvent'end
           (\ x__ y__ -> x__ {_Ext4ExtRemoveSpaceFtraceEvent'end = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtRemoveSpaceFtraceEvent "maybe'end" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtRemoveSpaceFtraceEvent'end
           (\ x__ y__ -> x__ {_Ext4ExtRemoveSpaceFtraceEvent'end = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ExtRemoveSpaceFtraceEvent "depth" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtRemoveSpaceFtraceEvent'depth
           (\ x__ y__ -> x__ {_Ext4ExtRemoveSpaceFtraceEvent'depth = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtRemoveSpaceFtraceEvent "maybe'depth" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtRemoveSpaceFtraceEvent'depth
           (\ x__ y__ -> x__ {_Ext4ExtRemoveSpaceFtraceEvent'depth = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4ExtRemoveSpaceFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4ExtRemoveSpaceFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \\GSExt4ExtRemoveSpaceFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DC4\n\
      \\ENQstart\CAN\ETX \SOH(\rR\ENQstart\DC2\DLE\n\
      \\ETXend\CAN\EOT \SOH(\rR\ETXend\DC2\DC4\n\
      \\ENQdepth\CAN\ENQ \SOH(\ENQR\ENQdepth"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtRemoveSpaceFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtRemoveSpaceFtraceEvent
        start__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "start"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'start")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtRemoveSpaceFtraceEvent
        end__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "end"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'end")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtRemoveSpaceFtraceEvent
        depth__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "depth"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'depth")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtRemoveSpaceFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, start__field_descriptor),
           (Data.ProtoLens.Tag 4, end__field_descriptor),
           (Data.ProtoLens.Tag 5, depth__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4ExtRemoveSpaceFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__ {_Ext4ExtRemoveSpaceFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4ExtRemoveSpaceFtraceEvent'_constructor
        {_Ext4ExtRemoveSpaceFtraceEvent'dev = Prelude.Nothing,
         _Ext4ExtRemoveSpaceFtraceEvent'ino = Prelude.Nothing,
         _Ext4ExtRemoveSpaceFtraceEvent'start = Prelude.Nothing,
         _Ext4ExtRemoveSpaceFtraceEvent'end = Prelude.Nothing,
         _Ext4ExtRemoveSpaceFtraceEvent'depth = Prelude.Nothing,
         _Ext4ExtRemoveSpaceFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4ExtRemoveSpaceFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4ExtRemoveSpaceFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "start"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"start") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "end"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"end") y x)
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "depth"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"depth") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "Ext4ExtRemoveSpaceFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'start") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'end") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'depth") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral
                                      _v))
                         (Data.ProtoLens.Encoding.Wire.buildFieldSet
                            (Lens.Family2.view Data.ProtoLens.unknownFields _x))))))
instance Control.DeepSeq.NFData Ext4ExtRemoveSpaceFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4ExtRemoveSpaceFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4ExtRemoveSpaceFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4ExtRemoveSpaceFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4ExtRemoveSpaceFtraceEvent'start x__)
                      (Control.DeepSeq.deepseq
                         (_Ext4ExtRemoveSpaceFtraceEvent'end x__)
                         (Control.DeepSeq.deepseq
                            (_Ext4ExtRemoveSpaceFtraceEvent'depth x__) ())))))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4ExtRmIdxFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4ExtRmIdxFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4ExtRmIdxFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4ExtRmIdxFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.pblk' @:: Lens' Ext4ExtRmIdxFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'pblk' @:: Lens' Ext4ExtRmIdxFtraceEvent (Prelude.Maybe Data.Word.Word64)@ -}
data Ext4ExtRmIdxFtraceEvent
  = Ext4ExtRmIdxFtraceEvent'_constructor {_Ext4ExtRmIdxFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                          _Ext4ExtRmIdxFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                          _Ext4ExtRmIdxFtraceEvent'pblk :: !(Prelude.Maybe Data.Word.Word64),
                                          _Ext4ExtRmIdxFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4ExtRmIdxFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4ExtRmIdxFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtRmIdxFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4ExtRmIdxFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtRmIdxFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtRmIdxFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4ExtRmIdxFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ExtRmIdxFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtRmIdxFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4ExtRmIdxFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtRmIdxFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtRmIdxFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4ExtRmIdxFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ExtRmIdxFtraceEvent "pblk" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtRmIdxFtraceEvent'pblk
           (\ x__ y__ -> x__ {_Ext4ExtRmIdxFtraceEvent'pblk = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtRmIdxFtraceEvent "maybe'pblk" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtRmIdxFtraceEvent'pblk
           (\ x__ y__ -> x__ {_Ext4ExtRmIdxFtraceEvent'pblk = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4ExtRmIdxFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4ExtRmIdxFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \\ETBExt4ExtRmIdxFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DC2\n\
      \\EOTpblk\CAN\ETX \SOH(\EOTR\EOTpblk"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtRmIdxFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtRmIdxFtraceEvent
        pblk__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "pblk"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'pblk")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtRmIdxFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, pblk__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4ExtRmIdxFtraceEvent'_unknownFields
        (\ x__ y__ -> x__ {_Ext4ExtRmIdxFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4ExtRmIdxFtraceEvent'_constructor
        {_Ext4ExtRmIdxFtraceEvent'dev = Prelude.Nothing,
         _Ext4ExtRmIdxFtraceEvent'ino = Prelude.Nothing,
         _Ext4ExtRmIdxFtraceEvent'pblk = Prelude.Nothing,
         _Ext4ExtRmIdxFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4ExtRmIdxFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4ExtRmIdxFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "pblk"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"pblk") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "Ext4ExtRmIdxFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'pblk") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                   (Data.ProtoLens.Encoding.Wire.buildFieldSet
                      (Lens.Family2.view Data.ProtoLens.unknownFields _x))))
instance Control.DeepSeq.NFData Ext4ExtRmIdxFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4ExtRmIdxFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4ExtRmIdxFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4ExtRmIdxFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq (_Ext4ExtRmIdxFtraceEvent'pblk x__) ())))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4ExtRmLeafFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4ExtRmLeafFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4ExtRmLeafFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4ExtRmLeafFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.partial' @:: Lens' Ext4ExtRmLeafFtraceEvent Data.Int.Int64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'partial' @:: Lens' Ext4ExtRmLeafFtraceEvent (Prelude.Maybe Data.Int.Int64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.start' @:: Lens' Ext4ExtRmLeafFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'start' @:: Lens' Ext4ExtRmLeafFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.eeLblk' @:: Lens' Ext4ExtRmLeafFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'eeLblk' @:: Lens' Ext4ExtRmLeafFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.eePblk' @:: Lens' Ext4ExtRmLeafFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'eePblk' @:: Lens' Ext4ExtRmLeafFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.eeLen' @:: Lens' Ext4ExtRmLeafFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'eeLen' @:: Lens' Ext4ExtRmLeafFtraceEvent (Prelude.Maybe Data.Int.Int32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.pcLblk' @:: Lens' Ext4ExtRmLeafFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'pcLblk' @:: Lens' Ext4ExtRmLeafFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.pcPclu' @:: Lens' Ext4ExtRmLeafFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'pcPclu' @:: Lens' Ext4ExtRmLeafFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.pcState' @:: Lens' Ext4ExtRmLeafFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'pcState' @:: Lens' Ext4ExtRmLeafFtraceEvent (Prelude.Maybe Data.Int.Int32)@ -}
data Ext4ExtRmLeafFtraceEvent
  = Ext4ExtRmLeafFtraceEvent'_constructor {_Ext4ExtRmLeafFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                           _Ext4ExtRmLeafFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                           _Ext4ExtRmLeafFtraceEvent'partial :: !(Prelude.Maybe Data.Int.Int64),
                                           _Ext4ExtRmLeafFtraceEvent'start :: !(Prelude.Maybe Data.Word.Word32),
                                           _Ext4ExtRmLeafFtraceEvent'eeLblk :: !(Prelude.Maybe Data.Word.Word32),
                                           _Ext4ExtRmLeafFtraceEvent'eePblk :: !(Prelude.Maybe Data.Word.Word64),
                                           _Ext4ExtRmLeafFtraceEvent'eeLen :: !(Prelude.Maybe Data.Int.Int32),
                                           _Ext4ExtRmLeafFtraceEvent'pcLblk :: !(Prelude.Maybe Data.Word.Word32),
                                           _Ext4ExtRmLeafFtraceEvent'pcPclu :: !(Prelude.Maybe Data.Word.Word64),
                                           _Ext4ExtRmLeafFtraceEvent'pcState :: !(Prelude.Maybe Data.Int.Int32),
                                           _Ext4ExtRmLeafFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4ExtRmLeafFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4ExtRmLeafFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtRmLeafFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4ExtRmLeafFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtRmLeafFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtRmLeafFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4ExtRmLeafFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ExtRmLeafFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtRmLeafFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4ExtRmLeafFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtRmLeafFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtRmLeafFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4ExtRmLeafFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ExtRmLeafFtraceEvent "partial" Data.Int.Int64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtRmLeafFtraceEvent'partial
           (\ x__ y__ -> x__ {_Ext4ExtRmLeafFtraceEvent'partial = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtRmLeafFtraceEvent "maybe'partial" (Prelude.Maybe Data.Int.Int64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtRmLeafFtraceEvent'partial
           (\ x__ y__ -> x__ {_Ext4ExtRmLeafFtraceEvent'partial = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ExtRmLeafFtraceEvent "start" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtRmLeafFtraceEvent'start
           (\ x__ y__ -> x__ {_Ext4ExtRmLeafFtraceEvent'start = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtRmLeafFtraceEvent "maybe'start" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtRmLeafFtraceEvent'start
           (\ x__ y__ -> x__ {_Ext4ExtRmLeafFtraceEvent'start = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ExtRmLeafFtraceEvent "eeLblk" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtRmLeafFtraceEvent'eeLblk
           (\ x__ y__ -> x__ {_Ext4ExtRmLeafFtraceEvent'eeLblk = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtRmLeafFtraceEvent "maybe'eeLblk" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtRmLeafFtraceEvent'eeLblk
           (\ x__ y__ -> x__ {_Ext4ExtRmLeafFtraceEvent'eeLblk = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ExtRmLeafFtraceEvent "eePblk" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtRmLeafFtraceEvent'eePblk
           (\ x__ y__ -> x__ {_Ext4ExtRmLeafFtraceEvent'eePblk = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtRmLeafFtraceEvent "maybe'eePblk" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtRmLeafFtraceEvent'eePblk
           (\ x__ y__ -> x__ {_Ext4ExtRmLeafFtraceEvent'eePblk = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ExtRmLeafFtraceEvent "eeLen" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtRmLeafFtraceEvent'eeLen
           (\ x__ y__ -> x__ {_Ext4ExtRmLeafFtraceEvent'eeLen = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtRmLeafFtraceEvent "maybe'eeLen" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtRmLeafFtraceEvent'eeLen
           (\ x__ y__ -> x__ {_Ext4ExtRmLeafFtraceEvent'eeLen = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ExtRmLeafFtraceEvent "pcLblk" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtRmLeafFtraceEvent'pcLblk
           (\ x__ y__ -> x__ {_Ext4ExtRmLeafFtraceEvent'pcLblk = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtRmLeafFtraceEvent "maybe'pcLblk" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtRmLeafFtraceEvent'pcLblk
           (\ x__ y__ -> x__ {_Ext4ExtRmLeafFtraceEvent'pcLblk = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ExtRmLeafFtraceEvent "pcPclu" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtRmLeafFtraceEvent'pcPclu
           (\ x__ y__ -> x__ {_Ext4ExtRmLeafFtraceEvent'pcPclu = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtRmLeafFtraceEvent "maybe'pcPclu" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtRmLeafFtraceEvent'pcPclu
           (\ x__ y__ -> x__ {_Ext4ExtRmLeafFtraceEvent'pcPclu = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ExtRmLeafFtraceEvent "pcState" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtRmLeafFtraceEvent'pcState
           (\ x__ y__ -> x__ {_Ext4ExtRmLeafFtraceEvent'pcState = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtRmLeafFtraceEvent "maybe'pcState" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtRmLeafFtraceEvent'pcState
           (\ x__ y__ -> x__ {_Ext4ExtRmLeafFtraceEvent'pcState = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4ExtRmLeafFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4ExtRmLeafFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \\CANExt4ExtRmLeafFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\CAN\n\
      \\apartial\CAN\ETX \SOH(\ETXR\apartial\DC2\DC4\n\
      \\ENQstart\CAN\EOT \SOH(\rR\ENQstart\DC2\ETB\n\
      \\aee_lblk\CAN\ENQ \SOH(\rR\ACKeeLblk\DC2\ETB\n\
      \\aee_pblk\CAN\ACK \SOH(\EOTR\ACKeePblk\DC2\NAK\n\
      \\ACKee_len\CAN\a \SOH(\ENQR\ENQeeLen\DC2\ETB\n\
      \\apc_lblk\CAN\b \SOH(\rR\ACKpcLblk\DC2\ETB\n\
      \\apc_pclu\CAN\t \SOH(\EOTR\ACKpcPclu\DC2\EM\n\
      \\bpc_state\CAN\n\
      \ \SOH(\ENQR\apcState"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtRmLeafFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtRmLeafFtraceEvent
        partial__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "partial"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'partial")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtRmLeafFtraceEvent
        start__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "start"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'start")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtRmLeafFtraceEvent
        eeLblk__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ee_lblk"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'eeLblk")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtRmLeafFtraceEvent
        eePblk__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ee_pblk"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'eePblk")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtRmLeafFtraceEvent
        eeLen__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ee_len"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'eeLen")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtRmLeafFtraceEvent
        pcLblk__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "pc_lblk"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'pcLblk")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtRmLeafFtraceEvent
        pcPclu__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "pc_pclu"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'pcPclu")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtRmLeafFtraceEvent
        pcState__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "pc_state"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'pcState")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtRmLeafFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, partial__field_descriptor),
           (Data.ProtoLens.Tag 4, start__field_descriptor),
           (Data.ProtoLens.Tag 5, eeLblk__field_descriptor),
           (Data.ProtoLens.Tag 6, eePblk__field_descriptor),
           (Data.ProtoLens.Tag 7, eeLen__field_descriptor),
           (Data.ProtoLens.Tag 8, pcLblk__field_descriptor),
           (Data.ProtoLens.Tag 9, pcPclu__field_descriptor),
           (Data.ProtoLens.Tag 10, pcState__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4ExtRmLeafFtraceEvent'_unknownFields
        (\ x__ y__ -> x__ {_Ext4ExtRmLeafFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4ExtRmLeafFtraceEvent'_constructor
        {_Ext4ExtRmLeafFtraceEvent'dev = Prelude.Nothing,
         _Ext4ExtRmLeafFtraceEvent'ino = Prelude.Nothing,
         _Ext4ExtRmLeafFtraceEvent'partial = Prelude.Nothing,
         _Ext4ExtRmLeafFtraceEvent'start = Prelude.Nothing,
         _Ext4ExtRmLeafFtraceEvent'eeLblk = Prelude.Nothing,
         _Ext4ExtRmLeafFtraceEvent'eePblk = Prelude.Nothing,
         _Ext4ExtRmLeafFtraceEvent'eeLen = Prelude.Nothing,
         _Ext4ExtRmLeafFtraceEvent'pcLblk = Prelude.Nothing,
         _Ext4ExtRmLeafFtraceEvent'pcPclu = Prelude.Nothing,
         _Ext4ExtRmLeafFtraceEvent'pcState = Prelude.Nothing,
         _Ext4ExtRmLeafFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4ExtRmLeafFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4ExtRmLeafFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "partial"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"partial") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "start"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"start") y x)
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "ee_lblk"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"eeLblk") y x)
                        48
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ee_pblk"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"eePblk") y x)
                        56
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "ee_len"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"eeLen") y x)
                        64
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "pc_lblk"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"pcLblk") y x)
                        72
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "pc_pclu"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"pcPclu") y x)
                        80
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "pc_state"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"pcState") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "Ext4ExtRmLeafFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'partial") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'start") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'eeLblk") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral
                                      _v))
                         ((Data.Monoid.<>)
                            (case
                                 Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'eePblk") _x
                             of
                               Prelude.Nothing -> Data.Monoid.mempty
                               (Prelude.Just _v)
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 48)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                            ((Data.Monoid.<>)
                               (case
                                    Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'eeLen") _x
                                of
                                  Prelude.Nothing -> Data.Monoid.mempty
                                  (Prelude.Just _v)
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt 56)
                                         ((Prelude..)
                                            Data.ProtoLens.Encoding.Bytes.putVarInt
                                            Prelude.fromIntegral _v))
                               ((Data.Monoid.<>)
                                  (case
                                       Lens.Family2.view
                                         (Data.ProtoLens.Field.field @"maybe'pcLblk") _x
                                   of
                                     Prelude.Nothing -> Data.Monoid.mempty
                                     (Prelude.Just _v)
                                       -> (Data.Monoid.<>)
                                            (Data.ProtoLens.Encoding.Bytes.putVarInt 64)
                                            ((Prelude..)
                                               Data.ProtoLens.Encoding.Bytes.putVarInt
                                               Prelude.fromIntegral _v))
                                  ((Data.Monoid.<>)
                                     (case
                                          Lens.Family2.view
                                            (Data.ProtoLens.Field.field @"maybe'pcPclu") _x
                                      of
                                        Prelude.Nothing -> Data.Monoid.mempty
                                        (Prelude.Just _v)
                                          -> (Data.Monoid.<>)
                                               (Data.ProtoLens.Encoding.Bytes.putVarInt 72)
                                               (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                                     ((Data.Monoid.<>)
                                        (case
                                             Lens.Family2.view
                                               (Data.ProtoLens.Field.field @"maybe'pcState") _x
                                         of
                                           Prelude.Nothing -> Data.Monoid.mempty
                                           (Prelude.Just _v)
                                             -> (Data.Monoid.<>)
                                                  (Data.ProtoLens.Encoding.Bytes.putVarInt 80)
                                                  ((Prelude..)
                                                     Data.ProtoLens.Encoding.Bytes.putVarInt
                                                     Prelude.fromIntegral _v))
                                        (Data.ProtoLens.Encoding.Wire.buildFieldSet
                                           (Lens.Family2.view
                                              Data.ProtoLens.unknownFields _x)))))))))))
instance Control.DeepSeq.NFData Ext4ExtRmLeafFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4ExtRmLeafFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4ExtRmLeafFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4ExtRmLeafFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4ExtRmLeafFtraceEvent'partial x__)
                      (Control.DeepSeq.deepseq
                         (_Ext4ExtRmLeafFtraceEvent'start x__)
                         (Control.DeepSeq.deepseq
                            (_Ext4ExtRmLeafFtraceEvent'eeLblk x__)
                            (Control.DeepSeq.deepseq
                               (_Ext4ExtRmLeafFtraceEvent'eePblk x__)
                               (Control.DeepSeq.deepseq
                                  (_Ext4ExtRmLeafFtraceEvent'eeLen x__)
                                  (Control.DeepSeq.deepseq
                                     (_Ext4ExtRmLeafFtraceEvent'pcLblk x__)
                                     (Control.DeepSeq.deepseq
                                        (_Ext4ExtRmLeafFtraceEvent'pcPclu x__)
                                        (Control.DeepSeq.deepseq
                                           (_Ext4ExtRmLeafFtraceEvent'pcState x__) ()))))))))))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4ExtShowExtentFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4ExtShowExtentFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4ExtShowExtentFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4ExtShowExtentFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.pblk' @:: Lens' Ext4ExtShowExtentFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'pblk' @:: Lens' Ext4ExtShowExtentFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.lblk' @:: Lens' Ext4ExtShowExtentFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'lblk' @:: Lens' Ext4ExtShowExtentFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.len' @:: Lens' Ext4ExtShowExtentFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'len' @:: Lens' Ext4ExtShowExtentFtraceEvent (Prelude.Maybe Data.Word.Word32)@ -}
data Ext4ExtShowExtentFtraceEvent
  = Ext4ExtShowExtentFtraceEvent'_constructor {_Ext4ExtShowExtentFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                               _Ext4ExtShowExtentFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                               _Ext4ExtShowExtentFtraceEvent'pblk :: !(Prelude.Maybe Data.Word.Word64),
                                               _Ext4ExtShowExtentFtraceEvent'lblk :: !(Prelude.Maybe Data.Word.Word32),
                                               _Ext4ExtShowExtentFtraceEvent'len :: !(Prelude.Maybe Data.Word.Word32),
                                               _Ext4ExtShowExtentFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4ExtShowExtentFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4ExtShowExtentFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtShowExtentFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4ExtShowExtentFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtShowExtentFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtShowExtentFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4ExtShowExtentFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ExtShowExtentFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtShowExtentFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4ExtShowExtentFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtShowExtentFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtShowExtentFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4ExtShowExtentFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ExtShowExtentFtraceEvent "pblk" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtShowExtentFtraceEvent'pblk
           (\ x__ y__ -> x__ {_Ext4ExtShowExtentFtraceEvent'pblk = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtShowExtentFtraceEvent "maybe'pblk" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtShowExtentFtraceEvent'pblk
           (\ x__ y__ -> x__ {_Ext4ExtShowExtentFtraceEvent'pblk = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ExtShowExtentFtraceEvent "lblk" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtShowExtentFtraceEvent'lblk
           (\ x__ y__ -> x__ {_Ext4ExtShowExtentFtraceEvent'lblk = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtShowExtentFtraceEvent "maybe'lblk" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtShowExtentFtraceEvent'lblk
           (\ x__ y__ -> x__ {_Ext4ExtShowExtentFtraceEvent'lblk = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ExtShowExtentFtraceEvent "len" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtShowExtentFtraceEvent'len
           (\ x__ y__ -> x__ {_Ext4ExtShowExtentFtraceEvent'len = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ExtShowExtentFtraceEvent "maybe'len" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ExtShowExtentFtraceEvent'len
           (\ x__ y__ -> x__ {_Ext4ExtShowExtentFtraceEvent'len = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4ExtShowExtentFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4ExtShowExtentFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \\FSExt4ExtShowExtentFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DC2\n\
      \\EOTpblk\CAN\ETX \SOH(\EOTR\EOTpblk\DC2\DC2\n\
      \\EOTlblk\CAN\EOT \SOH(\rR\EOTlblk\DC2\DLE\n\
      \\ETXlen\CAN\ENQ \SOH(\rR\ETXlen"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtShowExtentFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtShowExtentFtraceEvent
        pblk__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "pblk"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'pblk")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtShowExtentFtraceEvent
        lblk__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "lblk"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'lblk")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtShowExtentFtraceEvent
        len__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "len"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'len")) ::
              Data.ProtoLens.FieldDescriptor Ext4ExtShowExtentFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, pblk__field_descriptor),
           (Data.ProtoLens.Tag 4, lblk__field_descriptor),
           (Data.ProtoLens.Tag 5, len__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4ExtShowExtentFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__ {_Ext4ExtShowExtentFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4ExtShowExtentFtraceEvent'_constructor
        {_Ext4ExtShowExtentFtraceEvent'dev = Prelude.Nothing,
         _Ext4ExtShowExtentFtraceEvent'ino = Prelude.Nothing,
         _Ext4ExtShowExtentFtraceEvent'pblk = Prelude.Nothing,
         _Ext4ExtShowExtentFtraceEvent'lblk = Prelude.Nothing,
         _Ext4ExtShowExtentFtraceEvent'len = Prelude.Nothing,
         _Ext4ExtShowExtentFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4ExtShowExtentFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4ExtShowExtentFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "pblk"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"pblk") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "lblk"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"lblk") y x)
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "len"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"len") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "Ext4ExtShowExtentFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'pblk") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'lblk") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'len") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral
                                      _v))
                         (Data.ProtoLens.Encoding.Wire.buildFieldSet
                            (Lens.Family2.view Data.ProtoLens.unknownFields _x))))))
instance Control.DeepSeq.NFData Ext4ExtShowExtentFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4ExtShowExtentFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4ExtShowExtentFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4ExtShowExtentFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4ExtShowExtentFtraceEvent'pblk x__)
                      (Control.DeepSeq.deepseq
                         (_Ext4ExtShowExtentFtraceEvent'lblk x__)
                         (Control.DeepSeq.deepseq
                            (_Ext4ExtShowExtentFtraceEvent'len x__) ())))))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4FallocateEnterFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4FallocateEnterFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4FallocateEnterFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4FallocateEnterFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.offset' @:: Lens' Ext4FallocateEnterFtraceEvent Data.Int.Int64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'offset' @:: Lens' Ext4FallocateEnterFtraceEvent (Prelude.Maybe Data.Int.Int64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.len' @:: Lens' Ext4FallocateEnterFtraceEvent Data.Int.Int64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'len' @:: Lens' Ext4FallocateEnterFtraceEvent (Prelude.Maybe Data.Int.Int64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.mode' @:: Lens' Ext4FallocateEnterFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'mode' @:: Lens' Ext4FallocateEnterFtraceEvent (Prelude.Maybe Data.Int.Int32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.pos' @:: Lens' Ext4FallocateEnterFtraceEvent Data.Int.Int64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'pos' @:: Lens' Ext4FallocateEnterFtraceEvent (Prelude.Maybe Data.Int.Int64)@ -}
data Ext4FallocateEnterFtraceEvent
  = Ext4FallocateEnterFtraceEvent'_constructor {_Ext4FallocateEnterFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                                _Ext4FallocateEnterFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                                _Ext4FallocateEnterFtraceEvent'offset :: !(Prelude.Maybe Data.Int.Int64),
                                                _Ext4FallocateEnterFtraceEvent'len :: !(Prelude.Maybe Data.Int.Int64),
                                                _Ext4FallocateEnterFtraceEvent'mode :: !(Prelude.Maybe Data.Int.Int32),
                                                _Ext4FallocateEnterFtraceEvent'pos :: !(Prelude.Maybe Data.Int.Int64),
                                                _Ext4FallocateEnterFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4FallocateEnterFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4FallocateEnterFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4FallocateEnterFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4FallocateEnterFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4FallocateEnterFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4FallocateEnterFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4FallocateEnterFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4FallocateEnterFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4FallocateEnterFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4FallocateEnterFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4FallocateEnterFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4FallocateEnterFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4FallocateEnterFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4FallocateEnterFtraceEvent "offset" Data.Int.Int64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4FallocateEnterFtraceEvent'offset
           (\ x__ y__ -> x__ {_Ext4FallocateEnterFtraceEvent'offset = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4FallocateEnterFtraceEvent "maybe'offset" (Prelude.Maybe Data.Int.Int64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4FallocateEnterFtraceEvent'offset
           (\ x__ y__ -> x__ {_Ext4FallocateEnterFtraceEvent'offset = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4FallocateEnterFtraceEvent "len" Data.Int.Int64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4FallocateEnterFtraceEvent'len
           (\ x__ y__ -> x__ {_Ext4FallocateEnterFtraceEvent'len = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4FallocateEnterFtraceEvent "maybe'len" (Prelude.Maybe Data.Int.Int64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4FallocateEnterFtraceEvent'len
           (\ x__ y__ -> x__ {_Ext4FallocateEnterFtraceEvent'len = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4FallocateEnterFtraceEvent "mode" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4FallocateEnterFtraceEvent'mode
           (\ x__ y__ -> x__ {_Ext4FallocateEnterFtraceEvent'mode = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4FallocateEnterFtraceEvent "maybe'mode" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4FallocateEnterFtraceEvent'mode
           (\ x__ y__ -> x__ {_Ext4FallocateEnterFtraceEvent'mode = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4FallocateEnterFtraceEvent "pos" Data.Int.Int64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4FallocateEnterFtraceEvent'pos
           (\ x__ y__ -> x__ {_Ext4FallocateEnterFtraceEvent'pos = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4FallocateEnterFtraceEvent "maybe'pos" (Prelude.Maybe Data.Int.Int64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4FallocateEnterFtraceEvent'pos
           (\ x__ y__ -> x__ {_Ext4FallocateEnterFtraceEvent'pos = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4FallocateEnterFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4FallocateEnterFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \\GSExt4FallocateEnterFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\SYN\n\
      \\ACKoffset\CAN\ETX \SOH(\ETXR\ACKoffset\DC2\DLE\n\
      \\ETXlen\CAN\EOT \SOH(\ETXR\ETXlen\DC2\DC2\n\
      \\EOTmode\CAN\ENQ \SOH(\ENQR\EOTmode\DC2\DLE\n\
      \\ETXpos\CAN\ACK \SOH(\ETXR\ETXpos"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4FallocateEnterFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4FallocateEnterFtraceEvent
        offset__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "offset"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'offset")) ::
              Data.ProtoLens.FieldDescriptor Ext4FallocateEnterFtraceEvent
        len__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "len"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'len")) ::
              Data.ProtoLens.FieldDescriptor Ext4FallocateEnterFtraceEvent
        mode__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "mode"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'mode")) ::
              Data.ProtoLens.FieldDescriptor Ext4FallocateEnterFtraceEvent
        pos__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "pos"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'pos")) ::
              Data.ProtoLens.FieldDescriptor Ext4FallocateEnterFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, offset__field_descriptor),
           (Data.ProtoLens.Tag 4, len__field_descriptor),
           (Data.ProtoLens.Tag 5, mode__field_descriptor),
           (Data.ProtoLens.Tag 6, pos__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4FallocateEnterFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__ {_Ext4FallocateEnterFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4FallocateEnterFtraceEvent'_constructor
        {_Ext4FallocateEnterFtraceEvent'dev = Prelude.Nothing,
         _Ext4FallocateEnterFtraceEvent'ino = Prelude.Nothing,
         _Ext4FallocateEnterFtraceEvent'offset = Prelude.Nothing,
         _Ext4FallocateEnterFtraceEvent'len = Prelude.Nothing,
         _Ext4FallocateEnterFtraceEvent'mode = Prelude.Nothing,
         _Ext4FallocateEnterFtraceEvent'pos = Prelude.Nothing,
         _Ext4FallocateEnterFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4FallocateEnterFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4FallocateEnterFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "offset"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"offset") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "len"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"len") y x)
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "mode"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"mode") y x)
                        48
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "pos"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"pos") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "Ext4FallocateEnterFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'offset") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'len") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'mode") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral
                                      _v))
                         ((Data.Monoid.<>)
                            (case
                                 Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'pos") _x
                             of
                               Prelude.Nothing -> Data.Monoid.mempty
                               (Prelude.Just _v)
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 48)
                                      ((Prelude..)
                                         Data.ProtoLens.Encoding.Bytes.putVarInt
                                         Prelude.fromIntegral _v))
                            (Data.ProtoLens.Encoding.Wire.buildFieldSet
                               (Lens.Family2.view Data.ProtoLens.unknownFields _x)))))))
instance Control.DeepSeq.NFData Ext4FallocateEnterFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4FallocateEnterFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4FallocateEnterFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4FallocateEnterFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4FallocateEnterFtraceEvent'offset x__)
                      (Control.DeepSeq.deepseq
                         (_Ext4FallocateEnterFtraceEvent'len x__)
                         (Control.DeepSeq.deepseq
                            (_Ext4FallocateEnterFtraceEvent'mode x__)
                            (Control.DeepSeq.deepseq
                               (_Ext4FallocateEnterFtraceEvent'pos x__) ()))))))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4FallocateExitFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4FallocateExitFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4FallocateExitFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4FallocateExitFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.pos' @:: Lens' Ext4FallocateExitFtraceEvent Data.Int.Int64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'pos' @:: Lens' Ext4FallocateExitFtraceEvent (Prelude.Maybe Data.Int.Int64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.blocks' @:: Lens' Ext4FallocateExitFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'blocks' @:: Lens' Ext4FallocateExitFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ret' @:: Lens' Ext4FallocateExitFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ret' @:: Lens' Ext4FallocateExitFtraceEvent (Prelude.Maybe Data.Int.Int32)@ -}
data Ext4FallocateExitFtraceEvent
  = Ext4FallocateExitFtraceEvent'_constructor {_Ext4FallocateExitFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                               _Ext4FallocateExitFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                               _Ext4FallocateExitFtraceEvent'pos :: !(Prelude.Maybe Data.Int.Int64),
                                               _Ext4FallocateExitFtraceEvent'blocks :: !(Prelude.Maybe Data.Word.Word32),
                                               _Ext4FallocateExitFtraceEvent'ret :: !(Prelude.Maybe Data.Int.Int32),
                                               _Ext4FallocateExitFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4FallocateExitFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4FallocateExitFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4FallocateExitFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4FallocateExitFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4FallocateExitFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4FallocateExitFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4FallocateExitFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4FallocateExitFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4FallocateExitFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4FallocateExitFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4FallocateExitFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4FallocateExitFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4FallocateExitFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4FallocateExitFtraceEvent "pos" Data.Int.Int64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4FallocateExitFtraceEvent'pos
           (\ x__ y__ -> x__ {_Ext4FallocateExitFtraceEvent'pos = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4FallocateExitFtraceEvent "maybe'pos" (Prelude.Maybe Data.Int.Int64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4FallocateExitFtraceEvent'pos
           (\ x__ y__ -> x__ {_Ext4FallocateExitFtraceEvent'pos = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4FallocateExitFtraceEvent "blocks" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4FallocateExitFtraceEvent'blocks
           (\ x__ y__ -> x__ {_Ext4FallocateExitFtraceEvent'blocks = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4FallocateExitFtraceEvent "maybe'blocks" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4FallocateExitFtraceEvent'blocks
           (\ x__ y__ -> x__ {_Ext4FallocateExitFtraceEvent'blocks = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4FallocateExitFtraceEvent "ret" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4FallocateExitFtraceEvent'ret
           (\ x__ y__ -> x__ {_Ext4FallocateExitFtraceEvent'ret = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4FallocateExitFtraceEvent "maybe'ret" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4FallocateExitFtraceEvent'ret
           (\ x__ y__ -> x__ {_Ext4FallocateExitFtraceEvent'ret = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4FallocateExitFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4FallocateExitFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \\FSExt4FallocateExitFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DLE\n\
      \\ETXpos\CAN\ETX \SOH(\ETXR\ETXpos\DC2\SYN\n\
      \\ACKblocks\CAN\EOT \SOH(\rR\ACKblocks\DC2\DLE\n\
      \\ETXret\CAN\ENQ \SOH(\ENQR\ETXret"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4FallocateExitFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4FallocateExitFtraceEvent
        pos__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "pos"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'pos")) ::
              Data.ProtoLens.FieldDescriptor Ext4FallocateExitFtraceEvent
        blocks__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "blocks"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'blocks")) ::
              Data.ProtoLens.FieldDescriptor Ext4FallocateExitFtraceEvent
        ret__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ret"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ret")) ::
              Data.ProtoLens.FieldDescriptor Ext4FallocateExitFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, pos__field_descriptor),
           (Data.ProtoLens.Tag 4, blocks__field_descriptor),
           (Data.ProtoLens.Tag 5, ret__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4FallocateExitFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__ {_Ext4FallocateExitFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4FallocateExitFtraceEvent'_constructor
        {_Ext4FallocateExitFtraceEvent'dev = Prelude.Nothing,
         _Ext4FallocateExitFtraceEvent'ino = Prelude.Nothing,
         _Ext4FallocateExitFtraceEvent'pos = Prelude.Nothing,
         _Ext4FallocateExitFtraceEvent'blocks = Prelude.Nothing,
         _Ext4FallocateExitFtraceEvent'ret = Prelude.Nothing,
         _Ext4FallocateExitFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4FallocateExitFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4FallocateExitFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "pos"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"pos") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "blocks"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"blocks") y x)
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "ret"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ret") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "Ext4FallocateExitFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'pos") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'blocks") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ret") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral
                                      _v))
                         (Data.ProtoLens.Encoding.Wire.buildFieldSet
                            (Lens.Family2.view Data.ProtoLens.unknownFields _x))))))
instance Control.DeepSeq.NFData Ext4FallocateExitFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4FallocateExitFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4FallocateExitFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4FallocateExitFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4FallocateExitFtraceEvent'pos x__)
                      (Control.DeepSeq.deepseq
                         (_Ext4FallocateExitFtraceEvent'blocks x__)
                         (Control.DeepSeq.deepseq
                            (_Ext4FallocateExitFtraceEvent'ret x__) ())))))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4FindDelallocRangeFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4FindDelallocRangeFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4FindDelallocRangeFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4FindDelallocRangeFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.from' @:: Lens' Ext4FindDelallocRangeFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'from' @:: Lens' Ext4FindDelallocRangeFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.to' @:: Lens' Ext4FindDelallocRangeFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'to' @:: Lens' Ext4FindDelallocRangeFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.reverse' @:: Lens' Ext4FindDelallocRangeFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'reverse' @:: Lens' Ext4FindDelallocRangeFtraceEvent (Prelude.Maybe Data.Int.Int32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.found' @:: Lens' Ext4FindDelallocRangeFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'found' @:: Lens' Ext4FindDelallocRangeFtraceEvent (Prelude.Maybe Data.Int.Int32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.foundBlk' @:: Lens' Ext4FindDelallocRangeFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'foundBlk' @:: Lens' Ext4FindDelallocRangeFtraceEvent (Prelude.Maybe Data.Word.Word32)@ -}
data Ext4FindDelallocRangeFtraceEvent
  = Ext4FindDelallocRangeFtraceEvent'_constructor {_Ext4FindDelallocRangeFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                                   _Ext4FindDelallocRangeFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                                   _Ext4FindDelallocRangeFtraceEvent'from :: !(Prelude.Maybe Data.Word.Word32),
                                                   _Ext4FindDelallocRangeFtraceEvent'to :: !(Prelude.Maybe Data.Word.Word32),
                                                   _Ext4FindDelallocRangeFtraceEvent'reverse :: !(Prelude.Maybe Data.Int.Int32),
                                                   _Ext4FindDelallocRangeFtraceEvent'found :: !(Prelude.Maybe Data.Int.Int32),
                                                   _Ext4FindDelallocRangeFtraceEvent'foundBlk :: !(Prelude.Maybe Data.Word.Word32),
                                                   _Ext4FindDelallocRangeFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4FindDelallocRangeFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4FindDelallocRangeFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4FindDelallocRangeFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4FindDelallocRangeFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4FindDelallocRangeFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4FindDelallocRangeFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4FindDelallocRangeFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4FindDelallocRangeFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4FindDelallocRangeFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4FindDelallocRangeFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4FindDelallocRangeFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4FindDelallocRangeFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4FindDelallocRangeFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4FindDelallocRangeFtraceEvent "from" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4FindDelallocRangeFtraceEvent'from
           (\ x__ y__ -> x__ {_Ext4FindDelallocRangeFtraceEvent'from = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4FindDelallocRangeFtraceEvent "maybe'from" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4FindDelallocRangeFtraceEvent'from
           (\ x__ y__ -> x__ {_Ext4FindDelallocRangeFtraceEvent'from = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4FindDelallocRangeFtraceEvent "to" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4FindDelallocRangeFtraceEvent'to
           (\ x__ y__ -> x__ {_Ext4FindDelallocRangeFtraceEvent'to = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4FindDelallocRangeFtraceEvent "maybe'to" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4FindDelallocRangeFtraceEvent'to
           (\ x__ y__ -> x__ {_Ext4FindDelallocRangeFtraceEvent'to = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4FindDelallocRangeFtraceEvent "reverse" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4FindDelallocRangeFtraceEvent'reverse
           (\ x__ y__
              -> x__ {_Ext4FindDelallocRangeFtraceEvent'reverse = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4FindDelallocRangeFtraceEvent "maybe'reverse" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4FindDelallocRangeFtraceEvent'reverse
           (\ x__ y__
              -> x__ {_Ext4FindDelallocRangeFtraceEvent'reverse = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4FindDelallocRangeFtraceEvent "found" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4FindDelallocRangeFtraceEvent'found
           (\ x__ y__ -> x__ {_Ext4FindDelallocRangeFtraceEvent'found = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4FindDelallocRangeFtraceEvent "maybe'found" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4FindDelallocRangeFtraceEvent'found
           (\ x__ y__ -> x__ {_Ext4FindDelallocRangeFtraceEvent'found = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4FindDelallocRangeFtraceEvent "foundBlk" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4FindDelallocRangeFtraceEvent'foundBlk
           (\ x__ y__
              -> x__ {_Ext4FindDelallocRangeFtraceEvent'foundBlk = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4FindDelallocRangeFtraceEvent "maybe'foundBlk" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4FindDelallocRangeFtraceEvent'foundBlk
           (\ x__ y__
              -> x__ {_Ext4FindDelallocRangeFtraceEvent'foundBlk = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4FindDelallocRangeFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4FindDelallocRangeFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \ Ext4FindDelallocRangeFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DC2\n\
      \\EOTfrom\CAN\ETX \SOH(\rR\EOTfrom\DC2\SO\n\
      \\STXto\CAN\EOT \SOH(\rR\STXto\DC2\CAN\n\
      \\areverse\CAN\ENQ \SOH(\ENQR\areverse\DC2\DC4\n\
      \\ENQfound\CAN\ACK \SOH(\ENQR\ENQfound\DC2\ESC\n\
      \\tfound_blk\CAN\a \SOH(\rR\bfoundBlk"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4FindDelallocRangeFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4FindDelallocRangeFtraceEvent
        from__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "from"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'from")) ::
              Data.ProtoLens.FieldDescriptor Ext4FindDelallocRangeFtraceEvent
        to__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "to"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'to")) ::
              Data.ProtoLens.FieldDescriptor Ext4FindDelallocRangeFtraceEvent
        reverse__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "reverse"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'reverse")) ::
              Data.ProtoLens.FieldDescriptor Ext4FindDelallocRangeFtraceEvent
        found__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "found"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'found")) ::
              Data.ProtoLens.FieldDescriptor Ext4FindDelallocRangeFtraceEvent
        foundBlk__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "found_blk"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'foundBlk")) ::
              Data.ProtoLens.FieldDescriptor Ext4FindDelallocRangeFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, from__field_descriptor),
           (Data.ProtoLens.Tag 4, to__field_descriptor),
           (Data.ProtoLens.Tag 5, reverse__field_descriptor),
           (Data.ProtoLens.Tag 6, found__field_descriptor),
           (Data.ProtoLens.Tag 7, foundBlk__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4FindDelallocRangeFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__ {_Ext4FindDelallocRangeFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4FindDelallocRangeFtraceEvent'_constructor
        {_Ext4FindDelallocRangeFtraceEvent'dev = Prelude.Nothing,
         _Ext4FindDelallocRangeFtraceEvent'ino = Prelude.Nothing,
         _Ext4FindDelallocRangeFtraceEvent'from = Prelude.Nothing,
         _Ext4FindDelallocRangeFtraceEvent'to = Prelude.Nothing,
         _Ext4FindDelallocRangeFtraceEvent'reverse = Prelude.Nothing,
         _Ext4FindDelallocRangeFtraceEvent'found = Prelude.Nothing,
         _Ext4FindDelallocRangeFtraceEvent'foundBlk = Prelude.Nothing,
         _Ext4FindDelallocRangeFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4FindDelallocRangeFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4FindDelallocRangeFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "from"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"from") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "to"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"to") y x)
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "reverse"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"reverse") y x)
                        48
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "found"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"found") y x)
                        56
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "found_blk"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"foundBlk") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage)
          "Ext4FindDelallocRangeFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'from") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'to") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'reverse") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral
                                      _v))
                         ((Data.Monoid.<>)
                            (case
                                 Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'found") _x
                             of
                               Prelude.Nothing -> Data.Monoid.mempty
                               (Prelude.Just _v)
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 48)
                                      ((Prelude..)
                                         Data.ProtoLens.Encoding.Bytes.putVarInt
                                         Prelude.fromIntegral _v))
                            ((Data.Monoid.<>)
                               (case
                                    Lens.Family2.view
                                      (Data.ProtoLens.Field.field @"maybe'foundBlk") _x
                                of
                                  Prelude.Nothing -> Data.Monoid.mempty
                                  (Prelude.Just _v)
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt 56)
                                         ((Prelude..)
                                            Data.ProtoLens.Encoding.Bytes.putVarInt
                                            Prelude.fromIntegral _v))
                               (Data.ProtoLens.Encoding.Wire.buildFieldSet
                                  (Lens.Family2.view Data.ProtoLens.unknownFields _x))))))))
instance Control.DeepSeq.NFData Ext4FindDelallocRangeFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4FindDelallocRangeFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4FindDelallocRangeFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4FindDelallocRangeFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4FindDelallocRangeFtraceEvent'from x__)
                      (Control.DeepSeq.deepseq
                         (_Ext4FindDelallocRangeFtraceEvent'to x__)
                         (Control.DeepSeq.deepseq
                            (_Ext4FindDelallocRangeFtraceEvent'reverse x__)
                            (Control.DeepSeq.deepseq
                               (_Ext4FindDelallocRangeFtraceEvent'found x__)
                               (Control.DeepSeq.deepseq
                                  (_Ext4FindDelallocRangeFtraceEvent'foundBlk x__) ())))))))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4ForgetFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4ForgetFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4ForgetFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4ForgetFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.block' @:: Lens' Ext4ForgetFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'block' @:: Lens' Ext4ForgetFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.isMetadata' @:: Lens' Ext4ForgetFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'isMetadata' @:: Lens' Ext4ForgetFtraceEvent (Prelude.Maybe Data.Int.Int32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.mode' @:: Lens' Ext4ForgetFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'mode' @:: Lens' Ext4ForgetFtraceEvent (Prelude.Maybe Data.Word.Word32)@ -}
data Ext4ForgetFtraceEvent
  = Ext4ForgetFtraceEvent'_constructor {_Ext4ForgetFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                        _Ext4ForgetFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                        _Ext4ForgetFtraceEvent'block :: !(Prelude.Maybe Data.Word.Word64),
                                        _Ext4ForgetFtraceEvent'isMetadata :: !(Prelude.Maybe Data.Int.Int32),
                                        _Ext4ForgetFtraceEvent'mode :: !(Prelude.Maybe Data.Word.Word32),
                                        _Ext4ForgetFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4ForgetFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4ForgetFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ForgetFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4ForgetFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ForgetFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ForgetFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4ForgetFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ForgetFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ForgetFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4ForgetFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ForgetFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ForgetFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4ForgetFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ForgetFtraceEvent "block" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ForgetFtraceEvent'block
           (\ x__ y__ -> x__ {_Ext4ForgetFtraceEvent'block = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ForgetFtraceEvent "maybe'block" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ForgetFtraceEvent'block
           (\ x__ y__ -> x__ {_Ext4ForgetFtraceEvent'block = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ForgetFtraceEvent "isMetadata" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ForgetFtraceEvent'isMetadata
           (\ x__ y__ -> x__ {_Ext4ForgetFtraceEvent'isMetadata = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ForgetFtraceEvent "maybe'isMetadata" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ForgetFtraceEvent'isMetadata
           (\ x__ y__ -> x__ {_Ext4ForgetFtraceEvent'isMetadata = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ForgetFtraceEvent "mode" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ForgetFtraceEvent'mode
           (\ x__ y__ -> x__ {_Ext4ForgetFtraceEvent'mode = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ForgetFtraceEvent "maybe'mode" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ForgetFtraceEvent'mode
           (\ x__ y__ -> x__ {_Ext4ForgetFtraceEvent'mode = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4ForgetFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4ForgetFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \\NAKExt4ForgetFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DC4\n\
      \\ENQblock\CAN\ETX \SOH(\EOTR\ENQblock\DC2\US\n\
      \\vis_metadata\CAN\EOT \SOH(\ENQR\n\
      \isMetadata\DC2\DC2\n\
      \\EOTmode\CAN\ENQ \SOH(\rR\EOTmode"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4ForgetFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4ForgetFtraceEvent
        block__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "block"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'block")) ::
              Data.ProtoLens.FieldDescriptor Ext4ForgetFtraceEvent
        isMetadata__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "is_metadata"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'isMetadata")) ::
              Data.ProtoLens.FieldDescriptor Ext4ForgetFtraceEvent
        mode__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "mode"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'mode")) ::
              Data.ProtoLens.FieldDescriptor Ext4ForgetFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, block__field_descriptor),
           (Data.ProtoLens.Tag 4, isMetadata__field_descriptor),
           (Data.ProtoLens.Tag 5, mode__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4ForgetFtraceEvent'_unknownFields
        (\ x__ y__ -> x__ {_Ext4ForgetFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4ForgetFtraceEvent'_constructor
        {_Ext4ForgetFtraceEvent'dev = Prelude.Nothing,
         _Ext4ForgetFtraceEvent'ino = Prelude.Nothing,
         _Ext4ForgetFtraceEvent'block = Prelude.Nothing,
         _Ext4ForgetFtraceEvent'isMetadata = Prelude.Nothing,
         _Ext4ForgetFtraceEvent'mode = Prelude.Nothing,
         _Ext4ForgetFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4ForgetFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4ForgetFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "block"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"block") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "is_metadata"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"isMetadata") y x)
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "mode"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"mode") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "Ext4ForgetFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'block") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view
                             (Data.ProtoLens.Field.field @"maybe'isMetadata") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'mode") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral
                                      _v))
                         (Data.ProtoLens.Encoding.Wire.buildFieldSet
                            (Lens.Family2.view Data.ProtoLens.unknownFields _x))))))
instance Control.DeepSeq.NFData Ext4ForgetFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4ForgetFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4ForgetFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4ForgetFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4ForgetFtraceEvent'block x__)
                      (Control.DeepSeq.deepseq
                         (_Ext4ForgetFtraceEvent'isMetadata x__)
                         (Control.DeepSeq.deepseq (_Ext4ForgetFtraceEvent'mode x__) ())))))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4FreeBlocksFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4FreeBlocksFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4FreeBlocksFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4FreeBlocksFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.block' @:: Lens' Ext4FreeBlocksFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'block' @:: Lens' Ext4FreeBlocksFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.count' @:: Lens' Ext4FreeBlocksFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'count' @:: Lens' Ext4FreeBlocksFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.flags' @:: Lens' Ext4FreeBlocksFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'flags' @:: Lens' Ext4FreeBlocksFtraceEvent (Prelude.Maybe Data.Int.Int32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.mode' @:: Lens' Ext4FreeBlocksFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'mode' @:: Lens' Ext4FreeBlocksFtraceEvent (Prelude.Maybe Data.Word.Word32)@ -}
data Ext4FreeBlocksFtraceEvent
  = Ext4FreeBlocksFtraceEvent'_constructor {_Ext4FreeBlocksFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                            _Ext4FreeBlocksFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                            _Ext4FreeBlocksFtraceEvent'block :: !(Prelude.Maybe Data.Word.Word64),
                                            _Ext4FreeBlocksFtraceEvent'count :: !(Prelude.Maybe Data.Word.Word64),
                                            _Ext4FreeBlocksFtraceEvent'flags :: !(Prelude.Maybe Data.Int.Int32),
                                            _Ext4FreeBlocksFtraceEvent'mode :: !(Prelude.Maybe Data.Word.Word32),
                                            _Ext4FreeBlocksFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4FreeBlocksFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4FreeBlocksFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4FreeBlocksFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4FreeBlocksFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4FreeBlocksFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4FreeBlocksFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4FreeBlocksFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4FreeBlocksFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4FreeBlocksFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4FreeBlocksFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4FreeBlocksFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4FreeBlocksFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4FreeBlocksFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4FreeBlocksFtraceEvent "block" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4FreeBlocksFtraceEvent'block
           (\ x__ y__ -> x__ {_Ext4FreeBlocksFtraceEvent'block = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4FreeBlocksFtraceEvent "maybe'block" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4FreeBlocksFtraceEvent'block
           (\ x__ y__ -> x__ {_Ext4FreeBlocksFtraceEvent'block = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4FreeBlocksFtraceEvent "count" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4FreeBlocksFtraceEvent'count
           (\ x__ y__ -> x__ {_Ext4FreeBlocksFtraceEvent'count = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4FreeBlocksFtraceEvent "maybe'count" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4FreeBlocksFtraceEvent'count
           (\ x__ y__ -> x__ {_Ext4FreeBlocksFtraceEvent'count = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4FreeBlocksFtraceEvent "flags" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4FreeBlocksFtraceEvent'flags
           (\ x__ y__ -> x__ {_Ext4FreeBlocksFtraceEvent'flags = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4FreeBlocksFtraceEvent "maybe'flags" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4FreeBlocksFtraceEvent'flags
           (\ x__ y__ -> x__ {_Ext4FreeBlocksFtraceEvent'flags = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4FreeBlocksFtraceEvent "mode" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4FreeBlocksFtraceEvent'mode
           (\ x__ y__ -> x__ {_Ext4FreeBlocksFtraceEvent'mode = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4FreeBlocksFtraceEvent "maybe'mode" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4FreeBlocksFtraceEvent'mode
           (\ x__ y__ -> x__ {_Ext4FreeBlocksFtraceEvent'mode = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4FreeBlocksFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4FreeBlocksFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \\EMExt4FreeBlocksFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DC4\n\
      \\ENQblock\CAN\ETX \SOH(\EOTR\ENQblock\DC2\DC4\n\
      \\ENQcount\CAN\EOT \SOH(\EOTR\ENQcount\DC2\DC4\n\
      \\ENQflags\CAN\ENQ \SOH(\ENQR\ENQflags\DC2\DC2\n\
      \\EOTmode\CAN\ACK \SOH(\rR\EOTmode"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4FreeBlocksFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4FreeBlocksFtraceEvent
        block__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "block"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'block")) ::
              Data.ProtoLens.FieldDescriptor Ext4FreeBlocksFtraceEvent
        count__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "count"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'count")) ::
              Data.ProtoLens.FieldDescriptor Ext4FreeBlocksFtraceEvent
        flags__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "flags"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'flags")) ::
              Data.ProtoLens.FieldDescriptor Ext4FreeBlocksFtraceEvent
        mode__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "mode"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'mode")) ::
              Data.ProtoLens.FieldDescriptor Ext4FreeBlocksFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, block__field_descriptor),
           (Data.ProtoLens.Tag 4, count__field_descriptor),
           (Data.ProtoLens.Tag 5, flags__field_descriptor),
           (Data.ProtoLens.Tag 6, mode__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4FreeBlocksFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__ {_Ext4FreeBlocksFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4FreeBlocksFtraceEvent'_constructor
        {_Ext4FreeBlocksFtraceEvent'dev = Prelude.Nothing,
         _Ext4FreeBlocksFtraceEvent'ino = Prelude.Nothing,
         _Ext4FreeBlocksFtraceEvent'block = Prelude.Nothing,
         _Ext4FreeBlocksFtraceEvent'count = Prelude.Nothing,
         _Ext4FreeBlocksFtraceEvent'flags = Prelude.Nothing,
         _Ext4FreeBlocksFtraceEvent'mode = Prelude.Nothing,
         _Ext4FreeBlocksFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4FreeBlocksFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4FreeBlocksFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "block"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"block") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "count"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"count") y x)
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "flags"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"flags") y x)
                        48
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "mode"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"mode") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "Ext4FreeBlocksFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'block") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'count") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'flags") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral
                                      _v))
                         ((Data.Monoid.<>)
                            (case
                                 Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'mode") _x
                             of
                               Prelude.Nothing -> Data.Monoid.mempty
                               (Prelude.Just _v)
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 48)
                                      ((Prelude..)
                                         Data.ProtoLens.Encoding.Bytes.putVarInt
                                         Prelude.fromIntegral _v))
                            (Data.ProtoLens.Encoding.Wire.buildFieldSet
                               (Lens.Family2.view Data.ProtoLens.unknownFields _x)))))))
instance Control.DeepSeq.NFData Ext4FreeBlocksFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4FreeBlocksFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4FreeBlocksFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4FreeBlocksFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4FreeBlocksFtraceEvent'block x__)
                      (Control.DeepSeq.deepseq
                         (_Ext4FreeBlocksFtraceEvent'count x__)
                         (Control.DeepSeq.deepseq
                            (_Ext4FreeBlocksFtraceEvent'flags x__)
                            (Control.DeepSeq.deepseq
                               (_Ext4FreeBlocksFtraceEvent'mode x__) ()))))))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4FreeInodeFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4FreeInodeFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4FreeInodeFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4FreeInodeFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.uid' @:: Lens' Ext4FreeInodeFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'uid' @:: Lens' Ext4FreeInodeFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.gid' @:: Lens' Ext4FreeInodeFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'gid' @:: Lens' Ext4FreeInodeFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.blocks' @:: Lens' Ext4FreeInodeFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'blocks' @:: Lens' Ext4FreeInodeFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.mode' @:: Lens' Ext4FreeInodeFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'mode' @:: Lens' Ext4FreeInodeFtraceEvent (Prelude.Maybe Data.Word.Word32)@ -}
data Ext4FreeInodeFtraceEvent
  = Ext4FreeInodeFtraceEvent'_constructor {_Ext4FreeInodeFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                           _Ext4FreeInodeFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                           _Ext4FreeInodeFtraceEvent'uid :: !(Prelude.Maybe Data.Word.Word32),
                                           _Ext4FreeInodeFtraceEvent'gid :: !(Prelude.Maybe Data.Word.Word32),
                                           _Ext4FreeInodeFtraceEvent'blocks :: !(Prelude.Maybe Data.Word.Word64),
                                           _Ext4FreeInodeFtraceEvent'mode :: !(Prelude.Maybe Data.Word.Word32),
                                           _Ext4FreeInodeFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4FreeInodeFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4FreeInodeFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4FreeInodeFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4FreeInodeFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4FreeInodeFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4FreeInodeFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4FreeInodeFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4FreeInodeFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4FreeInodeFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4FreeInodeFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4FreeInodeFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4FreeInodeFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4FreeInodeFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4FreeInodeFtraceEvent "uid" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4FreeInodeFtraceEvent'uid
           (\ x__ y__ -> x__ {_Ext4FreeInodeFtraceEvent'uid = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4FreeInodeFtraceEvent "maybe'uid" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4FreeInodeFtraceEvent'uid
           (\ x__ y__ -> x__ {_Ext4FreeInodeFtraceEvent'uid = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4FreeInodeFtraceEvent "gid" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4FreeInodeFtraceEvent'gid
           (\ x__ y__ -> x__ {_Ext4FreeInodeFtraceEvent'gid = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4FreeInodeFtraceEvent "maybe'gid" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4FreeInodeFtraceEvent'gid
           (\ x__ y__ -> x__ {_Ext4FreeInodeFtraceEvent'gid = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4FreeInodeFtraceEvent "blocks" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4FreeInodeFtraceEvent'blocks
           (\ x__ y__ -> x__ {_Ext4FreeInodeFtraceEvent'blocks = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4FreeInodeFtraceEvent "maybe'blocks" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4FreeInodeFtraceEvent'blocks
           (\ x__ y__ -> x__ {_Ext4FreeInodeFtraceEvent'blocks = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4FreeInodeFtraceEvent "mode" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4FreeInodeFtraceEvent'mode
           (\ x__ y__ -> x__ {_Ext4FreeInodeFtraceEvent'mode = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4FreeInodeFtraceEvent "maybe'mode" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4FreeInodeFtraceEvent'mode
           (\ x__ y__ -> x__ {_Ext4FreeInodeFtraceEvent'mode = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4FreeInodeFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4FreeInodeFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \\CANExt4FreeInodeFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DLE\n\
      \\ETXuid\CAN\ETX \SOH(\rR\ETXuid\DC2\DLE\n\
      \\ETXgid\CAN\EOT \SOH(\rR\ETXgid\DC2\SYN\n\
      \\ACKblocks\CAN\ENQ \SOH(\EOTR\ACKblocks\DC2\DC2\n\
      \\EOTmode\CAN\ACK \SOH(\rR\EOTmode"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4FreeInodeFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4FreeInodeFtraceEvent
        uid__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "uid"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'uid")) ::
              Data.ProtoLens.FieldDescriptor Ext4FreeInodeFtraceEvent
        gid__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "gid"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'gid")) ::
              Data.ProtoLens.FieldDescriptor Ext4FreeInodeFtraceEvent
        blocks__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "blocks"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'blocks")) ::
              Data.ProtoLens.FieldDescriptor Ext4FreeInodeFtraceEvent
        mode__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "mode"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'mode")) ::
              Data.ProtoLens.FieldDescriptor Ext4FreeInodeFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, uid__field_descriptor),
           (Data.ProtoLens.Tag 4, gid__field_descriptor),
           (Data.ProtoLens.Tag 5, blocks__field_descriptor),
           (Data.ProtoLens.Tag 6, mode__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4FreeInodeFtraceEvent'_unknownFields
        (\ x__ y__ -> x__ {_Ext4FreeInodeFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4FreeInodeFtraceEvent'_constructor
        {_Ext4FreeInodeFtraceEvent'dev = Prelude.Nothing,
         _Ext4FreeInodeFtraceEvent'ino = Prelude.Nothing,
         _Ext4FreeInodeFtraceEvent'uid = Prelude.Nothing,
         _Ext4FreeInodeFtraceEvent'gid = Prelude.Nothing,
         _Ext4FreeInodeFtraceEvent'blocks = Prelude.Nothing,
         _Ext4FreeInodeFtraceEvent'mode = Prelude.Nothing,
         _Ext4FreeInodeFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4FreeInodeFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4FreeInodeFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "uid"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"uid") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "gid"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"gid") y x)
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "blocks"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"blocks") y x)
                        48
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "mode"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"mode") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "Ext4FreeInodeFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'uid") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'gid") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'blocks") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                         ((Data.Monoid.<>)
                            (case
                                 Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'mode") _x
                             of
                               Prelude.Nothing -> Data.Monoid.mempty
                               (Prelude.Just _v)
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 48)
                                      ((Prelude..)
                                         Data.ProtoLens.Encoding.Bytes.putVarInt
                                         Prelude.fromIntegral _v))
                            (Data.ProtoLens.Encoding.Wire.buildFieldSet
                               (Lens.Family2.view Data.ProtoLens.unknownFields _x)))))))
instance Control.DeepSeq.NFData Ext4FreeInodeFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4FreeInodeFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4FreeInodeFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4FreeInodeFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4FreeInodeFtraceEvent'uid x__)
                      (Control.DeepSeq.deepseq
                         (_Ext4FreeInodeFtraceEvent'gid x__)
                         (Control.DeepSeq.deepseq
                            (_Ext4FreeInodeFtraceEvent'blocks x__)
                            (Control.DeepSeq.deepseq
                               (_Ext4FreeInodeFtraceEvent'mode x__) ()))))))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4GetImpliedClusterAllocExitFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4GetImpliedClusterAllocExitFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.flags' @:: Lens' Ext4GetImpliedClusterAllocExitFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'flags' @:: Lens' Ext4GetImpliedClusterAllocExitFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.lblk' @:: Lens' Ext4GetImpliedClusterAllocExitFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'lblk' @:: Lens' Ext4GetImpliedClusterAllocExitFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.pblk' @:: Lens' Ext4GetImpliedClusterAllocExitFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'pblk' @:: Lens' Ext4GetImpliedClusterAllocExitFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.len' @:: Lens' Ext4GetImpliedClusterAllocExitFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'len' @:: Lens' Ext4GetImpliedClusterAllocExitFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ret' @:: Lens' Ext4GetImpliedClusterAllocExitFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ret' @:: Lens' Ext4GetImpliedClusterAllocExitFtraceEvent (Prelude.Maybe Data.Int.Int32)@ -}
data Ext4GetImpliedClusterAllocExitFtraceEvent
  = Ext4GetImpliedClusterAllocExitFtraceEvent'_constructor {_Ext4GetImpliedClusterAllocExitFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                                            _Ext4GetImpliedClusterAllocExitFtraceEvent'flags :: !(Prelude.Maybe Data.Word.Word32),
                                                            _Ext4GetImpliedClusterAllocExitFtraceEvent'lblk :: !(Prelude.Maybe Data.Word.Word32),
                                                            _Ext4GetImpliedClusterAllocExitFtraceEvent'pblk :: !(Prelude.Maybe Data.Word.Word64),
                                                            _Ext4GetImpliedClusterAllocExitFtraceEvent'len :: !(Prelude.Maybe Data.Word.Word32),
                                                            _Ext4GetImpliedClusterAllocExitFtraceEvent'ret :: !(Prelude.Maybe Data.Int.Int32),
                                                            _Ext4GetImpliedClusterAllocExitFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4GetImpliedClusterAllocExitFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4GetImpliedClusterAllocExitFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4GetImpliedClusterAllocExitFtraceEvent'dev
           (\ x__ y__
              -> x__ {_Ext4GetImpliedClusterAllocExitFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4GetImpliedClusterAllocExitFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4GetImpliedClusterAllocExitFtraceEvent'dev
           (\ x__ y__
              -> x__ {_Ext4GetImpliedClusterAllocExitFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4GetImpliedClusterAllocExitFtraceEvent "flags" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4GetImpliedClusterAllocExitFtraceEvent'flags
           (\ x__ y__
              -> x__ {_Ext4GetImpliedClusterAllocExitFtraceEvent'flags = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4GetImpliedClusterAllocExitFtraceEvent "maybe'flags" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4GetImpliedClusterAllocExitFtraceEvent'flags
           (\ x__ y__
              -> x__ {_Ext4GetImpliedClusterAllocExitFtraceEvent'flags = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4GetImpliedClusterAllocExitFtraceEvent "lblk" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4GetImpliedClusterAllocExitFtraceEvent'lblk
           (\ x__ y__
              -> x__ {_Ext4GetImpliedClusterAllocExitFtraceEvent'lblk = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4GetImpliedClusterAllocExitFtraceEvent "maybe'lblk" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4GetImpliedClusterAllocExitFtraceEvent'lblk
           (\ x__ y__
              -> x__ {_Ext4GetImpliedClusterAllocExitFtraceEvent'lblk = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4GetImpliedClusterAllocExitFtraceEvent "pblk" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4GetImpliedClusterAllocExitFtraceEvent'pblk
           (\ x__ y__
              -> x__ {_Ext4GetImpliedClusterAllocExitFtraceEvent'pblk = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4GetImpliedClusterAllocExitFtraceEvent "maybe'pblk" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4GetImpliedClusterAllocExitFtraceEvent'pblk
           (\ x__ y__
              -> x__ {_Ext4GetImpliedClusterAllocExitFtraceEvent'pblk = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4GetImpliedClusterAllocExitFtraceEvent "len" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4GetImpliedClusterAllocExitFtraceEvent'len
           (\ x__ y__
              -> x__ {_Ext4GetImpliedClusterAllocExitFtraceEvent'len = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4GetImpliedClusterAllocExitFtraceEvent "maybe'len" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4GetImpliedClusterAllocExitFtraceEvent'len
           (\ x__ y__
              -> x__ {_Ext4GetImpliedClusterAllocExitFtraceEvent'len = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4GetImpliedClusterAllocExitFtraceEvent "ret" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4GetImpliedClusterAllocExitFtraceEvent'ret
           (\ x__ y__
              -> x__ {_Ext4GetImpliedClusterAllocExitFtraceEvent'ret = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4GetImpliedClusterAllocExitFtraceEvent "maybe'ret" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4GetImpliedClusterAllocExitFtraceEvent'ret
           (\ x__ y__
              -> x__ {_Ext4GetImpliedClusterAllocExitFtraceEvent'ret = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4GetImpliedClusterAllocExitFtraceEvent where
  messageName _
    = Data.Text.pack
        "perfetto.protos.Ext4GetImpliedClusterAllocExitFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \)Ext4GetImpliedClusterAllocExitFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DC4\n\
      \\ENQflags\CAN\STX \SOH(\rR\ENQflags\DC2\DC2\n\
      \\EOTlblk\CAN\ETX \SOH(\rR\EOTlblk\DC2\DC2\n\
      \\EOTpblk\CAN\EOT \SOH(\EOTR\EOTpblk\DC2\DLE\n\
      \\ETXlen\CAN\ENQ \SOH(\rR\ETXlen\DC2\DLE\n\
      \\ETXret\CAN\ACK \SOH(\ENQR\ETXret"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4GetImpliedClusterAllocExitFtraceEvent
        flags__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "flags"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'flags")) ::
              Data.ProtoLens.FieldDescriptor Ext4GetImpliedClusterAllocExitFtraceEvent
        lblk__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "lblk"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'lblk")) ::
              Data.ProtoLens.FieldDescriptor Ext4GetImpliedClusterAllocExitFtraceEvent
        pblk__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "pblk"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'pblk")) ::
              Data.ProtoLens.FieldDescriptor Ext4GetImpliedClusterAllocExitFtraceEvent
        len__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "len"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'len")) ::
              Data.ProtoLens.FieldDescriptor Ext4GetImpliedClusterAllocExitFtraceEvent
        ret__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ret"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ret")) ::
              Data.ProtoLens.FieldDescriptor Ext4GetImpliedClusterAllocExitFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, flags__field_descriptor),
           (Data.ProtoLens.Tag 3, lblk__field_descriptor),
           (Data.ProtoLens.Tag 4, pblk__field_descriptor),
           (Data.ProtoLens.Tag 5, len__field_descriptor),
           (Data.ProtoLens.Tag 6, ret__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4GetImpliedClusterAllocExitFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__
                {_Ext4GetImpliedClusterAllocExitFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4GetImpliedClusterAllocExitFtraceEvent'_constructor
        {_Ext4GetImpliedClusterAllocExitFtraceEvent'dev = Prelude.Nothing,
         _Ext4GetImpliedClusterAllocExitFtraceEvent'flags = Prelude.Nothing,
         _Ext4GetImpliedClusterAllocExitFtraceEvent'lblk = Prelude.Nothing,
         _Ext4GetImpliedClusterAllocExitFtraceEvent'pblk = Prelude.Nothing,
         _Ext4GetImpliedClusterAllocExitFtraceEvent'len = Prelude.Nothing,
         _Ext4GetImpliedClusterAllocExitFtraceEvent'ret = Prelude.Nothing,
         _Ext4GetImpliedClusterAllocExitFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4GetImpliedClusterAllocExitFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4GetImpliedClusterAllocExitFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "flags"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"flags") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "lblk"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"lblk") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "pblk"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"pblk") y x)
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "len"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"len") y x)
                        48
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "ret"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ret") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage)
          "Ext4GetImpliedClusterAllocExitFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'flags") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          ((Prelude..)
                             Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'lblk") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'pblk") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'len") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral
                                      _v))
                         ((Data.Monoid.<>)
                            (case
                                 Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ret") _x
                             of
                               Prelude.Nothing -> Data.Monoid.mempty
                               (Prelude.Just _v)
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 48)
                                      ((Prelude..)
                                         Data.ProtoLens.Encoding.Bytes.putVarInt
                                         Prelude.fromIntegral _v))
                            (Data.ProtoLens.Encoding.Wire.buildFieldSet
                               (Lens.Family2.view Data.ProtoLens.unknownFields _x)))))))
instance Control.DeepSeq.NFData Ext4GetImpliedClusterAllocExitFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4GetImpliedClusterAllocExitFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4GetImpliedClusterAllocExitFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4GetImpliedClusterAllocExitFtraceEvent'flags x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4GetImpliedClusterAllocExitFtraceEvent'lblk x__)
                      (Control.DeepSeq.deepseq
                         (_Ext4GetImpliedClusterAllocExitFtraceEvent'pblk x__)
                         (Control.DeepSeq.deepseq
                            (_Ext4GetImpliedClusterAllocExitFtraceEvent'len x__)
                            (Control.DeepSeq.deepseq
                               (_Ext4GetImpliedClusterAllocExitFtraceEvent'ret x__) ()))))))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4GetReservedClusterAllocFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4GetReservedClusterAllocFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4GetReservedClusterAllocFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4GetReservedClusterAllocFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.lblk' @:: Lens' Ext4GetReservedClusterAllocFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'lblk' @:: Lens' Ext4GetReservedClusterAllocFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.len' @:: Lens' Ext4GetReservedClusterAllocFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'len' @:: Lens' Ext4GetReservedClusterAllocFtraceEvent (Prelude.Maybe Data.Word.Word32)@ -}
data Ext4GetReservedClusterAllocFtraceEvent
  = Ext4GetReservedClusterAllocFtraceEvent'_constructor {_Ext4GetReservedClusterAllocFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                                         _Ext4GetReservedClusterAllocFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                                         _Ext4GetReservedClusterAllocFtraceEvent'lblk :: !(Prelude.Maybe Data.Word.Word32),
                                                         _Ext4GetReservedClusterAllocFtraceEvent'len :: !(Prelude.Maybe Data.Word.Word32),
                                                         _Ext4GetReservedClusterAllocFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4GetReservedClusterAllocFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4GetReservedClusterAllocFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4GetReservedClusterAllocFtraceEvent'dev
           (\ x__ y__
              -> x__ {_Ext4GetReservedClusterAllocFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4GetReservedClusterAllocFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4GetReservedClusterAllocFtraceEvent'dev
           (\ x__ y__
              -> x__ {_Ext4GetReservedClusterAllocFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4GetReservedClusterAllocFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4GetReservedClusterAllocFtraceEvent'ino
           (\ x__ y__
              -> x__ {_Ext4GetReservedClusterAllocFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4GetReservedClusterAllocFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4GetReservedClusterAllocFtraceEvent'ino
           (\ x__ y__
              -> x__ {_Ext4GetReservedClusterAllocFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4GetReservedClusterAllocFtraceEvent "lblk" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4GetReservedClusterAllocFtraceEvent'lblk
           (\ x__ y__
              -> x__ {_Ext4GetReservedClusterAllocFtraceEvent'lblk = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4GetReservedClusterAllocFtraceEvent "maybe'lblk" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4GetReservedClusterAllocFtraceEvent'lblk
           (\ x__ y__
              -> x__ {_Ext4GetReservedClusterAllocFtraceEvent'lblk = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4GetReservedClusterAllocFtraceEvent "len" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4GetReservedClusterAllocFtraceEvent'len
           (\ x__ y__
              -> x__ {_Ext4GetReservedClusterAllocFtraceEvent'len = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4GetReservedClusterAllocFtraceEvent "maybe'len" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4GetReservedClusterAllocFtraceEvent'len
           (\ x__ y__
              -> x__ {_Ext4GetReservedClusterAllocFtraceEvent'len = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4GetReservedClusterAllocFtraceEvent where
  messageName _
    = Data.Text.pack
        "perfetto.protos.Ext4GetReservedClusterAllocFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \&Ext4GetReservedClusterAllocFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DC2\n\
      \\EOTlblk\CAN\ETX \SOH(\rR\EOTlblk\DC2\DLE\n\
      \\ETXlen\CAN\EOT \SOH(\rR\ETXlen"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4GetReservedClusterAllocFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4GetReservedClusterAllocFtraceEvent
        lblk__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "lblk"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'lblk")) ::
              Data.ProtoLens.FieldDescriptor Ext4GetReservedClusterAllocFtraceEvent
        len__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "len"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'len")) ::
              Data.ProtoLens.FieldDescriptor Ext4GetReservedClusterAllocFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, lblk__field_descriptor),
           (Data.ProtoLens.Tag 4, len__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4GetReservedClusterAllocFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__
                {_Ext4GetReservedClusterAllocFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4GetReservedClusterAllocFtraceEvent'_constructor
        {_Ext4GetReservedClusterAllocFtraceEvent'dev = Prelude.Nothing,
         _Ext4GetReservedClusterAllocFtraceEvent'ino = Prelude.Nothing,
         _Ext4GetReservedClusterAllocFtraceEvent'lblk = Prelude.Nothing,
         _Ext4GetReservedClusterAllocFtraceEvent'len = Prelude.Nothing,
         _Ext4GetReservedClusterAllocFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4GetReservedClusterAllocFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4GetReservedClusterAllocFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "lblk"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"lblk") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "len"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"len") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage)
          "Ext4GetReservedClusterAllocFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'lblk") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'len") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                      (Data.ProtoLens.Encoding.Wire.buildFieldSet
                         (Lens.Family2.view Data.ProtoLens.unknownFields _x)))))
instance Control.DeepSeq.NFData Ext4GetReservedClusterAllocFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4GetReservedClusterAllocFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4GetReservedClusterAllocFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4GetReservedClusterAllocFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4GetReservedClusterAllocFtraceEvent'lblk x__)
                      (Control.DeepSeq.deepseq
                         (_Ext4GetReservedClusterAllocFtraceEvent'len x__) ()))))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4IndMapBlocksEnterFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4IndMapBlocksEnterFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4IndMapBlocksEnterFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4IndMapBlocksEnterFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.lblk' @:: Lens' Ext4IndMapBlocksEnterFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'lblk' @:: Lens' Ext4IndMapBlocksEnterFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.len' @:: Lens' Ext4IndMapBlocksEnterFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'len' @:: Lens' Ext4IndMapBlocksEnterFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.flags' @:: Lens' Ext4IndMapBlocksEnterFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'flags' @:: Lens' Ext4IndMapBlocksEnterFtraceEvent (Prelude.Maybe Data.Word.Word32)@ -}
data Ext4IndMapBlocksEnterFtraceEvent
  = Ext4IndMapBlocksEnterFtraceEvent'_constructor {_Ext4IndMapBlocksEnterFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                                   _Ext4IndMapBlocksEnterFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                                   _Ext4IndMapBlocksEnterFtraceEvent'lblk :: !(Prelude.Maybe Data.Word.Word32),
                                                   _Ext4IndMapBlocksEnterFtraceEvent'len :: !(Prelude.Maybe Data.Word.Word32),
                                                   _Ext4IndMapBlocksEnterFtraceEvent'flags :: !(Prelude.Maybe Data.Word.Word32),
                                                   _Ext4IndMapBlocksEnterFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4IndMapBlocksEnterFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4IndMapBlocksEnterFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4IndMapBlocksEnterFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4IndMapBlocksEnterFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4IndMapBlocksEnterFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4IndMapBlocksEnterFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4IndMapBlocksEnterFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4IndMapBlocksEnterFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4IndMapBlocksEnterFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4IndMapBlocksEnterFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4IndMapBlocksEnterFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4IndMapBlocksEnterFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4IndMapBlocksEnterFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4IndMapBlocksEnterFtraceEvent "lblk" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4IndMapBlocksEnterFtraceEvent'lblk
           (\ x__ y__ -> x__ {_Ext4IndMapBlocksEnterFtraceEvent'lblk = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4IndMapBlocksEnterFtraceEvent "maybe'lblk" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4IndMapBlocksEnterFtraceEvent'lblk
           (\ x__ y__ -> x__ {_Ext4IndMapBlocksEnterFtraceEvent'lblk = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4IndMapBlocksEnterFtraceEvent "len" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4IndMapBlocksEnterFtraceEvent'len
           (\ x__ y__ -> x__ {_Ext4IndMapBlocksEnterFtraceEvent'len = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4IndMapBlocksEnterFtraceEvent "maybe'len" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4IndMapBlocksEnterFtraceEvent'len
           (\ x__ y__ -> x__ {_Ext4IndMapBlocksEnterFtraceEvent'len = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4IndMapBlocksEnterFtraceEvent "flags" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4IndMapBlocksEnterFtraceEvent'flags
           (\ x__ y__ -> x__ {_Ext4IndMapBlocksEnterFtraceEvent'flags = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4IndMapBlocksEnterFtraceEvent "maybe'flags" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4IndMapBlocksEnterFtraceEvent'flags
           (\ x__ y__ -> x__ {_Ext4IndMapBlocksEnterFtraceEvent'flags = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4IndMapBlocksEnterFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4IndMapBlocksEnterFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \ Ext4IndMapBlocksEnterFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DC2\n\
      \\EOTlblk\CAN\ETX \SOH(\rR\EOTlblk\DC2\DLE\n\
      \\ETXlen\CAN\EOT \SOH(\rR\ETXlen\DC2\DC4\n\
      \\ENQflags\CAN\ENQ \SOH(\rR\ENQflags"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4IndMapBlocksEnterFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4IndMapBlocksEnterFtraceEvent
        lblk__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "lblk"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'lblk")) ::
              Data.ProtoLens.FieldDescriptor Ext4IndMapBlocksEnterFtraceEvent
        len__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "len"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'len")) ::
              Data.ProtoLens.FieldDescriptor Ext4IndMapBlocksEnterFtraceEvent
        flags__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "flags"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'flags")) ::
              Data.ProtoLens.FieldDescriptor Ext4IndMapBlocksEnterFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, lblk__field_descriptor),
           (Data.ProtoLens.Tag 4, len__field_descriptor),
           (Data.ProtoLens.Tag 5, flags__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4IndMapBlocksEnterFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__ {_Ext4IndMapBlocksEnterFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4IndMapBlocksEnterFtraceEvent'_constructor
        {_Ext4IndMapBlocksEnterFtraceEvent'dev = Prelude.Nothing,
         _Ext4IndMapBlocksEnterFtraceEvent'ino = Prelude.Nothing,
         _Ext4IndMapBlocksEnterFtraceEvent'lblk = Prelude.Nothing,
         _Ext4IndMapBlocksEnterFtraceEvent'len = Prelude.Nothing,
         _Ext4IndMapBlocksEnterFtraceEvent'flags = Prelude.Nothing,
         _Ext4IndMapBlocksEnterFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4IndMapBlocksEnterFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4IndMapBlocksEnterFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "lblk"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"lblk") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "len"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"len") y x)
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "flags"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"flags") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage)
          "Ext4IndMapBlocksEnterFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'lblk") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'len") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'flags") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral
                                      _v))
                         (Data.ProtoLens.Encoding.Wire.buildFieldSet
                            (Lens.Family2.view Data.ProtoLens.unknownFields _x))))))
instance Control.DeepSeq.NFData Ext4IndMapBlocksEnterFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4IndMapBlocksEnterFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4IndMapBlocksEnterFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4IndMapBlocksEnterFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4IndMapBlocksEnterFtraceEvent'lblk x__)
                      (Control.DeepSeq.deepseq
                         (_Ext4IndMapBlocksEnterFtraceEvent'len x__)
                         (Control.DeepSeq.deepseq
                            (_Ext4IndMapBlocksEnterFtraceEvent'flags x__) ())))))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4IndMapBlocksExitFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4IndMapBlocksExitFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4IndMapBlocksExitFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4IndMapBlocksExitFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.flags' @:: Lens' Ext4IndMapBlocksExitFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'flags' @:: Lens' Ext4IndMapBlocksExitFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.pblk' @:: Lens' Ext4IndMapBlocksExitFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'pblk' @:: Lens' Ext4IndMapBlocksExitFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.lblk' @:: Lens' Ext4IndMapBlocksExitFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'lblk' @:: Lens' Ext4IndMapBlocksExitFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.len' @:: Lens' Ext4IndMapBlocksExitFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'len' @:: Lens' Ext4IndMapBlocksExitFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.mflags' @:: Lens' Ext4IndMapBlocksExitFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'mflags' @:: Lens' Ext4IndMapBlocksExitFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ret' @:: Lens' Ext4IndMapBlocksExitFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ret' @:: Lens' Ext4IndMapBlocksExitFtraceEvent (Prelude.Maybe Data.Int.Int32)@ -}
data Ext4IndMapBlocksExitFtraceEvent
  = Ext4IndMapBlocksExitFtraceEvent'_constructor {_Ext4IndMapBlocksExitFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                                  _Ext4IndMapBlocksExitFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                                  _Ext4IndMapBlocksExitFtraceEvent'flags :: !(Prelude.Maybe Data.Word.Word32),
                                                  _Ext4IndMapBlocksExitFtraceEvent'pblk :: !(Prelude.Maybe Data.Word.Word64),
                                                  _Ext4IndMapBlocksExitFtraceEvent'lblk :: !(Prelude.Maybe Data.Word.Word32),
                                                  _Ext4IndMapBlocksExitFtraceEvent'len :: !(Prelude.Maybe Data.Word.Word32),
                                                  _Ext4IndMapBlocksExitFtraceEvent'mflags :: !(Prelude.Maybe Data.Word.Word32),
                                                  _Ext4IndMapBlocksExitFtraceEvent'ret :: !(Prelude.Maybe Data.Int.Int32),
                                                  _Ext4IndMapBlocksExitFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4IndMapBlocksExitFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4IndMapBlocksExitFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4IndMapBlocksExitFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4IndMapBlocksExitFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4IndMapBlocksExitFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4IndMapBlocksExitFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4IndMapBlocksExitFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4IndMapBlocksExitFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4IndMapBlocksExitFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4IndMapBlocksExitFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4IndMapBlocksExitFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4IndMapBlocksExitFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4IndMapBlocksExitFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4IndMapBlocksExitFtraceEvent "flags" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4IndMapBlocksExitFtraceEvent'flags
           (\ x__ y__ -> x__ {_Ext4IndMapBlocksExitFtraceEvent'flags = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4IndMapBlocksExitFtraceEvent "maybe'flags" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4IndMapBlocksExitFtraceEvent'flags
           (\ x__ y__ -> x__ {_Ext4IndMapBlocksExitFtraceEvent'flags = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4IndMapBlocksExitFtraceEvent "pblk" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4IndMapBlocksExitFtraceEvent'pblk
           (\ x__ y__ -> x__ {_Ext4IndMapBlocksExitFtraceEvent'pblk = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4IndMapBlocksExitFtraceEvent "maybe'pblk" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4IndMapBlocksExitFtraceEvent'pblk
           (\ x__ y__ -> x__ {_Ext4IndMapBlocksExitFtraceEvent'pblk = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4IndMapBlocksExitFtraceEvent "lblk" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4IndMapBlocksExitFtraceEvent'lblk
           (\ x__ y__ -> x__ {_Ext4IndMapBlocksExitFtraceEvent'lblk = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4IndMapBlocksExitFtraceEvent "maybe'lblk" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4IndMapBlocksExitFtraceEvent'lblk
           (\ x__ y__ -> x__ {_Ext4IndMapBlocksExitFtraceEvent'lblk = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4IndMapBlocksExitFtraceEvent "len" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4IndMapBlocksExitFtraceEvent'len
           (\ x__ y__ -> x__ {_Ext4IndMapBlocksExitFtraceEvent'len = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4IndMapBlocksExitFtraceEvent "maybe'len" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4IndMapBlocksExitFtraceEvent'len
           (\ x__ y__ -> x__ {_Ext4IndMapBlocksExitFtraceEvent'len = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4IndMapBlocksExitFtraceEvent "mflags" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4IndMapBlocksExitFtraceEvent'mflags
           (\ x__ y__ -> x__ {_Ext4IndMapBlocksExitFtraceEvent'mflags = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4IndMapBlocksExitFtraceEvent "maybe'mflags" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4IndMapBlocksExitFtraceEvent'mflags
           (\ x__ y__ -> x__ {_Ext4IndMapBlocksExitFtraceEvent'mflags = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4IndMapBlocksExitFtraceEvent "ret" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4IndMapBlocksExitFtraceEvent'ret
           (\ x__ y__ -> x__ {_Ext4IndMapBlocksExitFtraceEvent'ret = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4IndMapBlocksExitFtraceEvent "maybe'ret" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4IndMapBlocksExitFtraceEvent'ret
           (\ x__ y__ -> x__ {_Ext4IndMapBlocksExitFtraceEvent'ret = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4IndMapBlocksExitFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4IndMapBlocksExitFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \\USExt4IndMapBlocksExitFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DC4\n\
      \\ENQflags\CAN\ETX \SOH(\rR\ENQflags\DC2\DC2\n\
      \\EOTpblk\CAN\EOT \SOH(\EOTR\EOTpblk\DC2\DC2\n\
      \\EOTlblk\CAN\ENQ \SOH(\rR\EOTlblk\DC2\DLE\n\
      \\ETXlen\CAN\ACK \SOH(\rR\ETXlen\DC2\SYN\n\
      \\ACKmflags\CAN\a \SOH(\rR\ACKmflags\DC2\DLE\n\
      \\ETXret\CAN\b \SOH(\ENQR\ETXret"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4IndMapBlocksExitFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4IndMapBlocksExitFtraceEvent
        flags__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "flags"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'flags")) ::
              Data.ProtoLens.FieldDescriptor Ext4IndMapBlocksExitFtraceEvent
        pblk__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "pblk"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'pblk")) ::
              Data.ProtoLens.FieldDescriptor Ext4IndMapBlocksExitFtraceEvent
        lblk__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "lblk"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'lblk")) ::
              Data.ProtoLens.FieldDescriptor Ext4IndMapBlocksExitFtraceEvent
        len__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "len"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'len")) ::
              Data.ProtoLens.FieldDescriptor Ext4IndMapBlocksExitFtraceEvent
        mflags__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "mflags"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'mflags")) ::
              Data.ProtoLens.FieldDescriptor Ext4IndMapBlocksExitFtraceEvent
        ret__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ret"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ret")) ::
              Data.ProtoLens.FieldDescriptor Ext4IndMapBlocksExitFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, flags__field_descriptor),
           (Data.ProtoLens.Tag 4, pblk__field_descriptor),
           (Data.ProtoLens.Tag 5, lblk__field_descriptor),
           (Data.ProtoLens.Tag 6, len__field_descriptor),
           (Data.ProtoLens.Tag 7, mflags__field_descriptor),
           (Data.ProtoLens.Tag 8, ret__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4IndMapBlocksExitFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__ {_Ext4IndMapBlocksExitFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4IndMapBlocksExitFtraceEvent'_constructor
        {_Ext4IndMapBlocksExitFtraceEvent'dev = Prelude.Nothing,
         _Ext4IndMapBlocksExitFtraceEvent'ino = Prelude.Nothing,
         _Ext4IndMapBlocksExitFtraceEvent'flags = Prelude.Nothing,
         _Ext4IndMapBlocksExitFtraceEvent'pblk = Prelude.Nothing,
         _Ext4IndMapBlocksExitFtraceEvent'lblk = Prelude.Nothing,
         _Ext4IndMapBlocksExitFtraceEvent'len = Prelude.Nothing,
         _Ext4IndMapBlocksExitFtraceEvent'mflags = Prelude.Nothing,
         _Ext4IndMapBlocksExitFtraceEvent'ret = Prelude.Nothing,
         _Ext4IndMapBlocksExitFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4IndMapBlocksExitFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4IndMapBlocksExitFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "flags"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"flags") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "pblk"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"pblk") y x)
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "lblk"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"lblk") y x)
                        48
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "len"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"len") y x)
                        56
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "mflags"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"mflags") y x)
                        64
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "ret"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ret") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage)
          "Ext4IndMapBlocksExitFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'flags") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'pblk") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'lblk") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral
                                      _v))
                         ((Data.Monoid.<>)
                            (case
                                 Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'len") _x
                             of
                               Prelude.Nothing -> Data.Monoid.mempty
                               (Prelude.Just _v)
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 48)
                                      ((Prelude..)
                                         Data.ProtoLens.Encoding.Bytes.putVarInt
                                         Prelude.fromIntegral _v))
                            ((Data.Monoid.<>)
                               (case
                                    Lens.Family2.view
                                      (Data.ProtoLens.Field.field @"maybe'mflags") _x
                                of
                                  Prelude.Nothing -> Data.Monoid.mempty
                                  (Prelude.Just _v)
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt 56)
                                         ((Prelude..)
                                            Data.ProtoLens.Encoding.Bytes.putVarInt
                                            Prelude.fromIntegral _v))
                               ((Data.Monoid.<>)
                                  (case
                                       Lens.Family2.view
                                         (Data.ProtoLens.Field.field @"maybe'ret") _x
                                   of
                                     Prelude.Nothing -> Data.Monoid.mempty
                                     (Prelude.Just _v)
                                       -> (Data.Monoid.<>)
                                            (Data.ProtoLens.Encoding.Bytes.putVarInt 64)
                                            ((Prelude..)
                                               Data.ProtoLens.Encoding.Bytes.putVarInt
                                               Prelude.fromIntegral _v))
                                  (Data.ProtoLens.Encoding.Wire.buildFieldSet
                                     (Lens.Family2.view Data.ProtoLens.unknownFields _x)))))))))
instance Control.DeepSeq.NFData Ext4IndMapBlocksExitFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4IndMapBlocksExitFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4IndMapBlocksExitFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4IndMapBlocksExitFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4IndMapBlocksExitFtraceEvent'flags x__)
                      (Control.DeepSeq.deepseq
                         (_Ext4IndMapBlocksExitFtraceEvent'pblk x__)
                         (Control.DeepSeq.deepseq
                            (_Ext4IndMapBlocksExitFtraceEvent'lblk x__)
                            (Control.DeepSeq.deepseq
                               (_Ext4IndMapBlocksExitFtraceEvent'len x__)
                               (Control.DeepSeq.deepseq
                                  (_Ext4IndMapBlocksExitFtraceEvent'mflags x__)
                                  (Control.DeepSeq.deepseq
                                     (_Ext4IndMapBlocksExitFtraceEvent'ret x__) ()))))))))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4InsertRangeFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4InsertRangeFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4InsertRangeFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4InsertRangeFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.offset' @:: Lens' Ext4InsertRangeFtraceEvent Data.Int.Int64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'offset' @:: Lens' Ext4InsertRangeFtraceEvent (Prelude.Maybe Data.Int.Int64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.len' @:: Lens' Ext4InsertRangeFtraceEvent Data.Int.Int64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'len' @:: Lens' Ext4InsertRangeFtraceEvent (Prelude.Maybe Data.Int.Int64)@ -}
data Ext4InsertRangeFtraceEvent
  = Ext4InsertRangeFtraceEvent'_constructor {_Ext4InsertRangeFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                             _Ext4InsertRangeFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                             _Ext4InsertRangeFtraceEvent'offset :: !(Prelude.Maybe Data.Int.Int64),
                                             _Ext4InsertRangeFtraceEvent'len :: !(Prelude.Maybe Data.Int.Int64),
                                             _Ext4InsertRangeFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4InsertRangeFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4InsertRangeFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4InsertRangeFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4InsertRangeFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4InsertRangeFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4InsertRangeFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4InsertRangeFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4InsertRangeFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4InsertRangeFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4InsertRangeFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4InsertRangeFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4InsertRangeFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4InsertRangeFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4InsertRangeFtraceEvent "offset" Data.Int.Int64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4InsertRangeFtraceEvent'offset
           (\ x__ y__ -> x__ {_Ext4InsertRangeFtraceEvent'offset = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4InsertRangeFtraceEvent "maybe'offset" (Prelude.Maybe Data.Int.Int64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4InsertRangeFtraceEvent'offset
           (\ x__ y__ -> x__ {_Ext4InsertRangeFtraceEvent'offset = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4InsertRangeFtraceEvent "len" Data.Int.Int64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4InsertRangeFtraceEvent'len
           (\ x__ y__ -> x__ {_Ext4InsertRangeFtraceEvent'len = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4InsertRangeFtraceEvent "maybe'len" (Prelude.Maybe Data.Int.Int64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4InsertRangeFtraceEvent'len
           (\ x__ y__ -> x__ {_Ext4InsertRangeFtraceEvent'len = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4InsertRangeFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4InsertRangeFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \\SUBExt4InsertRangeFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\SYN\n\
      \\ACKoffset\CAN\ETX \SOH(\ETXR\ACKoffset\DC2\DLE\n\
      \\ETXlen\CAN\EOT \SOH(\ETXR\ETXlen"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4InsertRangeFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4InsertRangeFtraceEvent
        offset__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "offset"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'offset")) ::
              Data.ProtoLens.FieldDescriptor Ext4InsertRangeFtraceEvent
        len__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "len"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'len")) ::
              Data.ProtoLens.FieldDescriptor Ext4InsertRangeFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, offset__field_descriptor),
           (Data.ProtoLens.Tag 4, len__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4InsertRangeFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__ {_Ext4InsertRangeFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4InsertRangeFtraceEvent'_constructor
        {_Ext4InsertRangeFtraceEvent'dev = Prelude.Nothing,
         _Ext4InsertRangeFtraceEvent'ino = Prelude.Nothing,
         _Ext4InsertRangeFtraceEvent'offset = Prelude.Nothing,
         _Ext4InsertRangeFtraceEvent'len = Prelude.Nothing,
         _Ext4InsertRangeFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4InsertRangeFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4InsertRangeFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "offset"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"offset") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "len"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"len") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "Ext4InsertRangeFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'offset") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'len") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                      (Data.ProtoLens.Encoding.Wire.buildFieldSet
                         (Lens.Family2.view Data.ProtoLens.unknownFields _x)))))
instance Control.DeepSeq.NFData Ext4InsertRangeFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4InsertRangeFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4InsertRangeFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4InsertRangeFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4InsertRangeFtraceEvent'offset x__)
                      (Control.DeepSeq.deepseq
                         (_Ext4InsertRangeFtraceEvent'len x__) ()))))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4InvalidatepageFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4InvalidatepageFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4InvalidatepageFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4InvalidatepageFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.index' @:: Lens' Ext4InvalidatepageFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'index' @:: Lens' Ext4InvalidatepageFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.offset' @:: Lens' Ext4InvalidatepageFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'offset' @:: Lens' Ext4InvalidatepageFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.length' @:: Lens' Ext4InvalidatepageFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'length' @:: Lens' Ext4InvalidatepageFtraceEvent (Prelude.Maybe Data.Word.Word32)@ -}
data Ext4InvalidatepageFtraceEvent
  = Ext4InvalidatepageFtraceEvent'_constructor {_Ext4InvalidatepageFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                                _Ext4InvalidatepageFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                                _Ext4InvalidatepageFtraceEvent'index :: !(Prelude.Maybe Data.Word.Word64),
                                                _Ext4InvalidatepageFtraceEvent'offset :: !(Prelude.Maybe Data.Word.Word64),
                                                _Ext4InvalidatepageFtraceEvent'length :: !(Prelude.Maybe Data.Word.Word32),
                                                _Ext4InvalidatepageFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4InvalidatepageFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4InvalidatepageFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4InvalidatepageFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4InvalidatepageFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4InvalidatepageFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4InvalidatepageFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4InvalidatepageFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4InvalidatepageFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4InvalidatepageFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4InvalidatepageFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4InvalidatepageFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4InvalidatepageFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4InvalidatepageFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4InvalidatepageFtraceEvent "index" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4InvalidatepageFtraceEvent'index
           (\ x__ y__ -> x__ {_Ext4InvalidatepageFtraceEvent'index = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4InvalidatepageFtraceEvent "maybe'index" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4InvalidatepageFtraceEvent'index
           (\ x__ y__ -> x__ {_Ext4InvalidatepageFtraceEvent'index = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4InvalidatepageFtraceEvent "offset" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4InvalidatepageFtraceEvent'offset
           (\ x__ y__ -> x__ {_Ext4InvalidatepageFtraceEvent'offset = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4InvalidatepageFtraceEvent "maybe'offset" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4InvalidatepageFtraceEvent'offset
           (\ x__ y__ -> x__ {_Ext4InvalidatepageFtraceEvent'offset = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4InvalidatepageFtraceEvent "length" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4InvalidatepageFtraceEvent'length
           (\ x__ y__ -> x__ {_Ext4InvalidatepageFtraceEvent'length = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4InvalidatepageFtraceEvent "maybe'length" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4InvalidatepageFtraceEvent'length
           (\ x__ y__ -> x__ {_Ext4InvalidatepageFtraceEvent'length = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4InvalidatepageFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4InvalidatepageFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \\GSExt4InvalidatepageFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DC4\n\
      \\ENQindex\CAN\ETX \SOH(\EOTR\ENQindex\DC2\SYN\n\
      \\ACKoffset\CAN\EOT \SOH(\EOTR\ACKoffset\DC2\SYN\n\
      \\ACKlength\CAN\ENQ \SOH(\rR\ACKlength"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4InvalidatepageFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4InvalidatepageFtraceEvent
        index__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "index"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'index")) ::
              Data.ProtoLens.FieldDescriptor Ext4InvalidatepageFtraceEvent
        offset__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "offset"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'offset")) ::
              Data.ProtoLens.FieldDescriptor Ext4InvalidatepageFtraceEvent
        length__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "length"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'length")) ::
              Data.ProtoLens.FieldDescriptor Ext4InvalidatepageFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, index__field_descriptor),
           (Data.ProtoLens.Tag 4, offset__field_descriptor),
           (Data.ProtoLens.Tag 5, length__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4InvalidatepageFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__ {_Ext4InvalidatepageFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4InvalidatepageFtraceEvent'_constructor
        {_Ext4InvalidatepageFtraceEvent'dev = Prelude.Nothing,
         _Ext4InvalidatepageFtraceEvent'ino = Prelude.Nothing,
         _Ext4InvalidatepageFtraceEvent'index = Prelude.Nothing,
         _Ext4InvalidatepageFtraceEvent'offset = Prelude.Nothing,
         _Ext4InvalidatepageFtraceEvent'length = Prelude.Nothing,
         _Ext4InvalidatepageFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4InvalidatepageFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4InvalidatepageFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "index"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"index") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "offset"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"offset") y x)
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "length"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"length") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "Ext4InvalidatepageFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'index") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'offset") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'length") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral
                                      _v))
                         (Data.ProtoLens.Encoding.Wire.buildFieldSet
                            (Lens.Family2.view Data.ProtoLens.unknownFields _x))))))
instance Control.DeepSeq.NFData Ext4InvalidatepageFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4InvalidatepageFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4InvalidatepageFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4InvalidatepageFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4InvalidatepageFtraceEvent'index x__)
                      (Control.DeepSeq.deepseq
                         (_Ext4InvalidatepageFtraceEvent'offset x__)
                         (Control.DeepSeq.deepseq
                            (_Ext4InvalidatepageFtraceEvent'length x__) ())))))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4JournalStartFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4JournalStartFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ip' @:: Lens' Ext4JournalStartFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ip' @:: Lens' Ext4JournalStartFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.blocks' @:: Lens' Ext4JournalStartFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'blocks' @:: Lens' Ext4JournalStartFtraceEvent (Prelude.Maybe Data.Int.Int32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.rsvBlocks' @:: Lens' Ext4JournalStartFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'rsvBlocks' @:: Lens' Ext4JournalStartFtraceEvent (Prelude.Maybe Data.Int.Int32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.nblocks' @:: Lens' Ext4JournalStartFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'nblocks' @:: Lens' Ext4JournalStartFtraceEvent (Prelude.Maybe Data.Int.Int32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.revokeCreds' @:: Lens' Ext4JournalStartFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'revokeCreds' @:: Lens' Ext4JournalStartFtraceEvent (Prelude.Maybe Data.Int.Int32)@ -}
data Ext4JournalStartFtraceEvent
  = Ext4JournalStartFtraceEvent'_constructor {_Ext4JournalStartFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                              _Ext4JournalStartFtraceEvent'ip :: !(Prelude.Maybe Data.Word.Word64),
                                              _Ext4JournalStartFtraceEvent'blocks :: !(Prelude.Maybe Data.Int.Int32),
                                              _Ext4JournalStartFtraceEvent'rsvBlocks :: !(Prelude.Maybe Data.Int.Int32),
                                              _Ext4JournalStartFtraceEvent'nblocks :: !(Prelude.Maybe Data.Int.Int32),
                                              _Ext4JournalStartFtraceEvent'revokeCreds :: !(Prelude.Maybe Data.Int.Int32),
                                              _Ext4JournalStartFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4JournalStartFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4JournalStartFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4JournalStartFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4JournalStartFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4JournalStartFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4JournalStartFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4JournalStartFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4JournalStartFtraceEvent "ip" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4JournalStartFtraceEvent'ip
           (\ x__ y__ -> x__ {_Ext4JournalStartFtraceEvent'ip = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4JournalStartFtraceEvent "maybe'ip" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4JournalStartFtraceEvent'ip
           (\ x__ y__ -> x__ {_Ext4JournalStartFtraceEvent'ip = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4JournalStartFtraceEvent "blocks" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4JournalStartFtraceEvent'blocks
           (\ x__ y__ -> x__ {_Ext4JournalStartFtraceEvent'blocks = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4JournalStartFtraceEvent "maybe'blocks" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4JournalStartFtraceEvent'blocks
           (\ x__ y__ -> x__ {_Ext4JournalStartFtraceEvent'blocks = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4JournalStartFtraceEvent "rsvBlocks" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4JournalStartFtraceEvent'rsvBlocks
           (\ x__ y__ -> x__ {_Ext4JournalStartFtraceEvent'rsvBlocks = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4JournalStartFtraceEvent "maybe'rsvBlocks" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4JournalStartFtraceEvent'rsvBlocks
           (\ x__ y__ -> x__ {_Ext4JournalStartFtraceEvent'rsvBlocks = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4JournalStartFtraceEvent "nblocks" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4JournalStartFtraceEvent'nblocks
           (\ x__ y__ -> x__ {_Ext4JournalStartFtraceEvent'nblocks = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4JournalStartFtraceEvent "maybe'nblocks" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4JournalStartFtraceEvent'nblocks
           (\ x__ y__ -> x__ {_Ext4JournalStartFtraceEvent'nblocks = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4JournalStartFtraceEvent "revokeCreds" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4JournalStartFtraceEvent'revokeCreds
           (\ x__ y__
              -> x__ {_Ext4JournalStartFtraceEvent'revokeCreds = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4JournalStartFtraceEvent "maybe'revokeCreds" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4JournalStartFtraceEvent'revokeCreds
           (\ x__ y__
              -> x__ {_Ext4JournalStartFtraceEvent'revokeCreds = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4JournalStartFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4JournalStartFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \\ESCExt4JournalStartFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\SO\n\
      \\STXip\CAN\STX \SOH(\EOTR\STXip\DC2\SYN\n\
      \\ACKblocks\CAN\ETX \SOH(\ENQR\ACKblocks\DC2\GS\n\
      \\n\
      \rsv_blocks\CAN\EOT \SOH(\ENQR\trsvBlocks\DC2\CAN\n\
      \\anblocks\CAN\ENQ \SOH(\ENQR\anblocks\DC2!\n\
      \\frevoke_creds\CAN\ACK \SOH(\ENQR\vrevokeCreds"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4JournalStartFtraceEvent
        ip__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ip"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ip")) ::
              Data.ProtoLens.FieldDescriptor Ext4JournalStartFtraceEvent
        blocks__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "blocks"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'blocks")) ::
              Data.ProtoLens.FieldDescriptor Ext4JournalStartFtraceEvent
        rsvBlocks__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "rsv_blocks"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'rsvBlocks")) ::
              Data.ProtoLens.FieldDescriptor Ext4JournalStartFtraceEvent
        nblocks__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "nblocks"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'nblocks")) ::
              Data.ProtoLens.FieldDescriptor Ext4JournalStartFtraceEvent
        revokeCreds__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "revoke_creds"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'revokeCreds")) ::
              Data.ProtoLens.FieldDescriptor Ext4JournalStartFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ip__field_descriptor),
           (Data.ProtoLens.Tag 3, blocks__field_descriptor),
           (Data.ProtoLens.Tag 4, rsvBlocks__field_descriptor),
           (Data.ProtoLens.Tag 5, nblocks__field_descriptor),
           (Data.ProtoLens.Tag 6, revokeCreds__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4JournalStartFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__ {_Ext4JournalStartFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4JournalStartFtraceEvent'_constructor
        {_Ext4JournalStartFtraceEvent'dev = Prelude.Nothing,
         _Ext4JournalStartFtraceEvent'ip = Prelude.Nothing,
         _Ext4JournalStartFtraceEvent'blocks = Prelude.Nothing,
         _Ext4JournalStartFtraceEvent'rsvBlocks = Prelude.Nothing,
         _Ext4JournalStartFtraceEvent'nblocks = Prelude.Nothing,
         _Ext4JournalStartFtraceEvent'revokeCreds = Prelude.Nothing,
         _Ext4JournalStartFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4JournalStartFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4JournalStartFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ip"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ip") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "blocks"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"blocks") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "rsv_blocks"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"rsvBlocks") y x)
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "nblocks"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"nblocks") y x)
                        48
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "revoke_creds"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"revokeCreds") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "Ext4JournalStartFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ip") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'blocks") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view
                             (Data.ProtoLens.Field.field @"maybe'rsvBlocks") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'nblocks") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral
                                      _v))
                         ((Data.Monoid.<>)
                            (case
                                 Lens.Family2.view
                                   (Data.ProtoLens.Field.field @"maybe'revokeCreds") _x
                             of
                               Prelude.Nothing -> Data.Monoid.mempty
                               (Prelude.Just _v)
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 48)
                                      ((Prelude..)
                                         Data.ProtoLens.Encoding.Bytes.putVarInt
                                         Prelude.fromIntegral _v))
                            (Data.ProtoLens.Encoding.Wire.buildFieldSet
                               (Lens.Family2.view Data.ProtoLens.unknownFields _x)))))))
instance Control.DeepSeq.NFData Ext4JournalStartFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4JournalStartFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4JournalStartFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4JournalStartFtraceEvent'ip x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4JournalStartFtraceEvent'blocks x__)
                      (Control.DeepSeq.deepseq
                         (_Ext4JournalStartFtraceEvent'rsvBlocks x__)
                         (Control.DeepSeq.deepseq
                            (_Ext4JournalStartFtraceEvent'nblocks x__)
                            (Control.DeepSeq.deepseq
                               (_Ext4JournalStartFtraceEvent'revokeCreds x__) ()))))))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4JournalStartReservedFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4JournalStartReservedFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ip' @:: Lens' Ext4JournalStartReservedFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ip' @:: Lens' Ext4JournalStartReservedFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.blocks' @:: Lens' Ext4JournalStartReservedFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'blocks' @:: Lens' Ext4JournalStartReservedFtraceEvent (Prelude.Maybe Data.Int.Int32)@ -}
data Ext4JournalStartReservedFtraceEvent
  = Ext4JournalStartReservedFtraceEvent'_constructor {_Ext4JournalStartReservedFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                                      _Ext4JournalStartReservedFtraceEvent'ip :: !(Prelude.Maybe Data.Word.Word64),
                                                      _Ext4JournalStartReservedFtraceEvent'blocks :: !(Prelude.Maybe Data.Int.Int32),
                                                      _Ext4JournalStartReservedFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4JournalStartReservedFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4JournalStartReservedFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4JournalStartReservedFtraceEvent'dev
           (\ x__ y__
              -> x__ {_Ext4JournalStartReservedFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4JournalStartReservedFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4JournalStartReservedFtraceEvent'dev
           (\ x__ y__
              -> x__ {_Ext4JournalStartReservedFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4JournalStartReservedFtraceEvent "ip" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4JournalStartReservedFtraceEvent'ip
           (\ x__ y__ -> x__ {_Ext4JournalStartReservedFtraceEvent'ip = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4JournalStartReservedFtraceEvent "maybe'ip" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4JournalStartReservedFtraceEvent'ip
           (\ x__ y__ -> x__ {_Ext4JournalStartReservedFtraceEvent'ip = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4JournalStartReservedFtraceEvent "blocks" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4JournalStartReservedFtraceEvent'blocks
           (\ x__ y__
              -> x__ {_Ext4JournalStartReservedFtraceEvent'blocks = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4JournalStartReservedFtraceEvent "maybe'blocks" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4JournalStartReservedFtraceEvent'blocks
           (\ x__ y__
              -> x__ {_Ext4JournalStartReservedFtraceEvent'blocks = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4JournalStartReservedFtraceEvent where
  messageName _
    = Data.Text.pack
        "perfetto.protos.Ext4JournalStartReservedFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \#Ext4JournalStartReservedFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\SO\n\
      \\STXip\CAN\STX \SOH(\EOTR\STXip\DC2\SYN\n\
      \\ACKblocks\CAN\ETX \SOH(\ENQR\ACKblocks"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4JournalStartReservedFtraceEvent
        ip__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ip"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ip")) ::
              Data.ProtoLens.FieldDescriptor Ext4JournalStartReservedFtraceEvent
        blocks__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "blocks"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'blocks")) ::
              Data.ProtoLens.FieldDescriptor Ext4JournalStartReservedFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ip__field_descriptor),
           (Data.ProtoLens.Tag 3, blocks__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4JournalStartReservedFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__ {_Ext4JournalStartReservedFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4JournalStartReservedFtraceEvent'_constructor
        {_Ext4JournalStartReservedFtraceEvent'dev = Prelude.Nothing,
         _Ext4JournalStartReservedFtraceEvent'ip = Prelude.Nothing,
         _Ext4JournalStartReservedFtraceEvent'blocks = Prelude.Nothing,
         _Ext4JournalStartReservedFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4JournalStartReservedFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4JournalStartReservedFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ip"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ip") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "blocks"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"blocks") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage)
          "Ext4JournalStartReservedFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ip") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'blocks") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   (Data.ProtoLens.Encoding.Wire.buildFieldSet
                      (Lens.Family2.view Data.ProtoLens.unknownFields _x))))
instance Control.DeepSeq.NFData Ext4JournalStartReservedFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4JournalStartReservedFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4JournalStartReservedFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4JournalStartReservedFtraceEvent'ip x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4JournalStartReservedFtraceEvent'blocks x__) ())))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4JournalledInvalidatepageFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4JournalledInvalidatepageFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4JournalledInvalidatepageFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4JournalledInvalidatepageFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.index' @:: Lens' Ext4JournalledInvalidatepageFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'index' @:: Lens' Ext4JournalledInvalidatepageFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.offset' @:: Lens' Ext4JournalledInvalidatepageFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'offset' @:: Lens' Ext4JournalledInvalidatepageFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.length' @:: Lens' Ext4JournalledInvalidatepageFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'length' @:: Lens' Ext4JournalledInvalidatepageFtraceEvent (Prelude.Maybe Data.Word.Word32)@ -}
data Ext4JournalledInvalidatepageFtraceEvent
  = Ext4JournalledInvalidatepageFtraceEvent'_constructor {_Ext4JournalledInvalidatepageFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                                          _Ext4JournalledInvalidatepageFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                                          _Ext4JournalledInvalidatepageFtraceEvent'index :: !(Prelude.Maybe Data.Word.Word64),
                                                          _Ext4JournalledInvalidatepageFtraceEvent'offset :: !(Prelude.Maybe Data.Word.Word64),
                                                          _Ext4JournalledInvalidatepageFtraceEvent'length :: !(Prelude.Maybe Data.Word.Word32),
                                                          _Ext4JournalledInvalidatepageFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4JournalledInvalidatepageFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4JournalledInvalidatepageFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4JournalledInvalidatepageFtraceEvent'dev
           (\ x__ y__
              -> x__ {_Ext4JournalledInvalidatepageFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4JournalledInvalidatepageFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4JournalledInvalidatepageFtraceEvent'dev
           (\ x__ y__
              -> x__ {_Ext4JournalledInvalidatepageFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4JournalledInvalidatepageFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4JournalledInvalidatepageFtraceEvent'ino
           (\ x__ y__
              -> x__ {_Ext4JournalledInvalidatepageFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4JournalledInvalidatepageFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4JournalledInvalidatepageFtraceEvent'ino
           (\ x__ y__
              -> x__ {_Ext4JournalledInvalidatepageFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4JournalledInvalidatepageFtraceEvent "index" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4JournalledInvalidatepageFtraceEvent'index
           (\ x__ y__
              -> x__ {_Ext4JournalledInvalidatepageFtraceEvent'index = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4JournalledInvalidatepageFtraceEvent "maybe'index" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4JournalledInvalidatepageFtraceEvent'index
           (\ x__ y__
              -> x__ {_Ext4JournalledInvalidatepageFtraceEvent'index = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4JournalledInvalidatepageFtraceEvent "offset" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4JournalledInvalidatepageFtraceEvent'offset
           (\ x__ y__
              -> x__ {_Ext4JournalledInvalidatepageFtraceEvent'offset = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4JournalledInvalidatepageFtraceEvent "maybe'offset" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4JournalledInvalidatepageFtraceEvent'offset
           (\ x__ y__
              -> x__ {_Ext4JournalledInvalidatepageFtraceEvent'offset = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4JournalledInvalidatepageFtraceEvent "length" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4JournalledInvalidatepageFtraceEvent'length
           (\ x__ y__
              -> x__ {_Ext4JournalledInvalidatepageFtraceEvent'length = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4JournalledInvalidatepageFtraceEvent "maybe'length" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4JournalledInvalidatepageFtraceEvent'length
           (\ x__ y__
              -> x__ {_Ext4JournalledInvalidatepageFtraceEvent'length = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4JournalledInvalidatepageFtraceEvent where
  messageName _
    = Data.Text.pack
        "perfetto.protos.Ext4JournalledInvalidatepageFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \'Ext4JournalledInvalidatepageFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DC4\n\
      \\ENQindex\CAN\ETX \SOH(\EOTR\ENQindex\DC2\SYN\n\
      \\ACKoffset\CAN\EOT \SOH(\EOTR\ACKoffset\DC2\SYN\n\
      \\ACKlength\CAN\ENQ \SOH(\rR\ACKlength"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4JournalledInvalidatepageFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4JournalledInvalidatepageFtraceEvent
        index__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "index"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'index")) ::
              Data.ProtoLens.FieldDescriptor Ext4JournalledInvalidatepageFtraceEvent
        offset__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "offset"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'offset")) ::
              Data.ProtoLens.FieldDescriptor Ext4JournalledInvalidatepageFtraceEvent
        length__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "length"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'length")) ::
              Data.ProtoLens.FieldDescriptor Ext4JournalledInvalidatepageFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, index__field_descriptor),
           (Data.ProtoLens.Tag 4, offset__field_descriptor),
           (Data.ProtoLens.Tag 5, length__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4JournalledInvalidatepageFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__
                {_Ext4JournalledInvalidatepageFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4JournalledInvalidatepageFtraceEvent'_constructor
        {_Ext4JournalledInvalidatepageFtraceEvent'dev = Prelude.Nothing,
         _Ext4JournalledInvalidatepageFtraceEvent'ino = Prelude.Nothing,
         _Ext4JournalledInvalidatepageFtraceEvent'index = Prelude.Nothing,
         _Ext4JournalledInvalidatepageFtraceEvent'offset = Prelude.Nothing,
         _Ext4JournalledInvalidatepageFtraceEvent'length = Prelude.Nothing,
         _Ext4JournalledInvalidatepageFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4JournalledInvalidatepageFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4JournalledInvalidatepageFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "index"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"index") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "offset"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"offset") y x)
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "length"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"length") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage)
          "Ext4JournalledInvalidatepageFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'index") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'offset") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'length") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral
                                      _v))
                         (Data.ProtoLens.Encoding.Wire.buildFieldSet
                            (Lens.Family2.view Data.ProtoLens.unknownFields _x))))))
instance Control.DeepSeq.NFData Ext4JournalledInvalidatepageFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4JournalledInvalidatepageFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4JournalledInvalidatepageFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4JournalledInvalidatepageFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4JournalledInvalidatepageFtraceEvent'index x__)
                      (Control.DeepSeq.deepseq
                         (_Ext4JournalledInvalidatepageFtraceEvent'offset x__)
                         (Control.DeepSeq.deepseq
                            (_Ext4JournalledInvalidatepageFtraceEvent'length x__) ())))))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4JournalledWriteEndFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4JournalledWriteEndFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4JournalledWriteEndFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4JournalledWriteEndFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.pos' @:: Lens' Ext4JournalledWriteEndFtraceEvent Data.Int.Int64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'pos' @:: Lens' Ext4JournalledWriteEndFtraceEvent (Prelude.Maybe Data.Int.Int64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.len' @:: Lens' Ext4JournalledWriteEndFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'len' @:: Lens' Ext4JournalledWriteEndFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.copied' @:: Lens' Ext4JournalledWriteEndFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'copied' @:: Lens' Ext4JournalledWriteEndFtraceEvent (Prelude.Maybe Data.Word.Word32)@ -}
data Ext4JournalledWriteEndFtraceEvent
  = Ext4JournalledWriteEndFtraceEvent'_constructor {_Ext4JournalledWriteEndFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                                    _Ext4JournalledWriteEndFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                                    _Ext4JournalledWriteEndFtraceEvent'pos :: !(Prelude.Maybe Data.Int.Int64),
                                                    _Ext4JournalledWriteEndFtraceEvent'len :: !(Prelude.Maybe Data.Word.Word32),
                                                    _Ext4JournalledWriteEndFtraceEvent'copied :: !(Prelude.Maybe Data.Word.Word32),
                                                    _Ext4JournalledWriteEndFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4JournalledWriteEndFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4JournalledWriteEndFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4JournalledWriteEndFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4JournalledWriteEndFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4JournalledWriteEndFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4JournalledWriteEndFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4JournalledWriteEndFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4JournalledWriteEndFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4JournalledWriteEndFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4JournalledWriteEndFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4JournalledWriteEndFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4JournalledWriteEndFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4JournalledWriteEndFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4JournalledWriteEndFtraceEvent "pos" Data.Int.Int64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4JournalledWriteEndFtraceEvent'pos
           (\ x__ y__ -> x__ {_Ext4JournalledWriteEndFtraceEvent'pos = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4JournalledWriteEndFtraceEvent "maybe'pos" (Prelude.Maybe Data.Int.Int64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4JournalledWriteEndFtraceEvent'pos
           (\ x__ y__ -> x__ {_Ext4JournalledWriteEndFtraceEvent'pos = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4JournalledWriteEndFtraceEvent "len" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4JournalledWriteEndFtraceEvent'len
           (\ x__ y__ -> x__ {_Ext4JournalledWriteEndFtraceEvent'len = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4JournalledWriteEndFtraceEvent "maybe'len" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4JournalledWriteEndFtraceEvent'len
           (\ x__ y__ -> x__ {_Ext4JournalledWriteEndFtraceEvent'len = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4JournalledWriteEndFtraceEvent "copied" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4JournalledWriteEndFtraceEvent'copied
           (\ x__ y__
              -> x__ {_Ext4JournalledWriteEndFtraceEvent'copied = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4JournalledWriteEndFtraceEvent "maybe'copied" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4JournalledWriteEndFtraceEvent'copied
           (\ x__ y__
              -> x__ {_Ext4JournalledWriteEndFtraceEvent'copied = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4JournalledWriteEndFtraceEvent where
  messageName _
    = Data.Text.pack
        "perfetto.protos.Ext4JournalledWriteEndFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \!Ext4JournalledWriteEndFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DLE\n\
      \\ETXpos\CAN\ETX \SOH(\ETXR\ETXpos\DC2\DLE\n\
      \\ETXlen\CAN\EOT \SOH(\rR\ETXlen\DC2\SYN\n\
      \\ACKcopied\CAN\ENQ \SOH(\rR\ACKcopied"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4JournalledWriteEndFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4JournalledWriteEndFtraceEvent
        pos__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "pos"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'pos")) ::
              Data.ProtoLens.FieldDescriptor Ext4JournalledWriteEndFtraceEvent
        len__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "len"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'len")) ::
              Data.ProtoLens.FieldDescriptor Ext4JournalledWriteEndFtraceEvent
        copied__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "copied"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'copied")) ::
              Data.ProtoLens.FieldDescriptor Ext4JournalledWriteEndFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, pos__field_descriptor),
           (Data.ProtoLens.Tag 4, len__field_descriptor),
           (Data.ProtoLens.Tag 5, copied__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4JournalledWriteEndFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__ {_Ext4JournalledWriteEndFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4JournalledWriteEndFtraceEvent'_constructor
        {_Ext4JournalledWriteEndFtraceEvent'dev = Prelude.Nothing,
         _Ext4JournalledWriteEndFtraceEvent'ino = Prelude.Nothing,
         _Ext4JournalledWriteEndFtraceEvent'pos = Prelude.Nothing,
         _Ext4JournalledWriteEndFtraceEvent'len = Prelude.Nothing,
         _Ext4JournalledWriteEndFtraceEvent'copied = Prelude.Nothing,
         _Ext4JournalledWriteEndFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4JournalledWriteEndFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4JournalledWriteEndFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "pos"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"pos") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "len"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"len") y x)
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "copied"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"copied") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage)
          "Ext4JournalledWriteEndFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'pos") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'len") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'copied") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral
                                      _v))
                         (Data.ProtoLens.Encoding.Wire.buildFieldSet
                            (Lens.Family2.view Data.ProtoLens.unknownFields _x))))))
instance Control.DeepSeq.NFData Ext4JournalledWriteEndFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4JournalledWriteEndFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4JournalledWriteEndFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4JournalledWriteEndFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4JournalledWriteEndFtraceEvent'pos x__)
                      (Control.DeepSeq.deepseq
                         (_Ext4JournalledWriteEndFtraceEvent'len x__)
                         (Control.DeepSeq.deepseq
                            (_Ext4JournalledWriteEndFtraceEvent'copied x__) ())))))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4LoadInodeBitmapFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4LoadInodeBitmapFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.group' @:: Lens' Ext4LoadInodeBitmapFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'group' @:: Lens' Ext4LoadInodeBitmapFtraceEvent (Prelude.Maybe Data.Word.Word32)@ -}
data Ext4LoadInodeBitmapFtraceEvent
  = Ext4LoadInodeBitmapFtraceEvent'_constructor {_Ext4LoadInodeBitmapFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                                 _Ext4LoadInodeBitmapFtraceEvent'group :: !(Prelude.Maybe Data.Word.Word32),
                                                 _Ext4LoadInodeBitmapFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4LoadInodeBitmapFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4LoadInodeBitmapFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4LoadInodeBitmapFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4LoadInodeBitmapFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4LoadInodeBitmapFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4LoadInodeBitmapFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4LoadInodeBitmapFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4LoadInodeBitmapFtraceEvent "group" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4LoadInodeBitmapFtraceEvent'group
           (\ x__ y__ -> x__ {_Ext4LoadInodeBitmapFtraceEvent'group = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4LoadInodeBitmapFtraceEvent "maybe'group" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4LoadInodeBitmapFtraceEvent'group
           (\ x__ y__ -> x__ {_Ext4LoadInodeBitmapFtraceEvent'group = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4LoadInodeBitmapFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4LoadInodeBitmapFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \\RSExt4LoadInodeBitmapFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DC4\n\
      \\ENQgroup\CAN\STX \SOH(\rR\ENQgroup"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4LoadInodeBitmapFtraceEvent
        group__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "group"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'group")) ::
              Data.ProtoLens.FieldDescriptor Ext4LoadInodeBitmapFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, group__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4LoadInodeBitmapFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__ {_Ext4LoadInodeBitmapFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4LoadInodeBitmapFtraceEvent'_constructor
        {_Ext4LoadInodeBitmapFtraceEvent'dev = Prelude.Nothing,
         _Ext4LoadInodeBitmapFtraceEvent'group = Prelude.Nothing,
         _Ext4LoadInodeBitmapFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4LoadInodeBitmapFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4LoadInodeBitmapFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "group"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"group") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage)
          "Ext4LoadInodeBitmapFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'group") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          ((Prelude..)
                             Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData Ext4LoadInodeBitmapFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4LoadInodeBitmapFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4LoadInodeBitmapFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4LoadInodeBitmapFtraceEvent'group x__) ()))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4LoadInodeFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4LoadInodeFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4LoadInodeFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4LoadInodeFtraceEvent (Prelude.Maybe Data.Word.Word64)@ -}
data Ext4LoadInodeFtraceEvent
  = Ext4LoadInodeFtraceEvent'_constructor {_Ext4LoadInodeFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                           _Ext4LoadInodeFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                           _Ext4LoadInodeFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4LoadInodeFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4LoadInodeFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4LoadInodeFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4LoadInodeFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4LoadInodeFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4LoadInodeFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4LoadInodeFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4LoadInodeFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4LoadInodeFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4LoadInodeFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4LoadInodeFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4LoadInodeFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4LoadInodeFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4LoadInodeFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4LoadInodeFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \\CANExt4LoadInodeFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4LoadInodeFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4LoadInodeFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4LoadInodeFtraceEvent'_unknownFields
        (\ x__ y__ -> x__ {_Ext4LoadInodeFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4LoadInodeFtraceEvent'_constructor
        {_Ext4LoadInodeFtraceEvent'dev = Prelude.Nothing,
         _Ext4LoadInodeFtraceEvent'ino = Prelude.Nothing,
         _Ext4LoadInodeFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4LoadInodeFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4LoadInodeFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "Ext4LoadInodeFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData Ext4LoadInodeFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4LoadInodeFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4LoadInodeFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq (_Ext4LoadInodeFtraceEvent'ino x__) ()))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4MarkInodeDirtyFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4MarkInodeDirtyFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4MarkInodeDirtyFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4MarkInodeDirtyFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ip' @:: Lens' Ext4MarkInodeDirtyFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ip' @:: Lens' Ext4MarkInodeDirtyFtraceEvent (Prelude.Maybe Data.Word.Word64)@ -}
data Ext4MarkInodeDirtyFtraceEvent
  = Ext4MarkInodeDirtyFtraceEvent'_constructor {_Ext4MarkInodeDirtyFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                                _Ext4MarkInodeDirtyFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                                _Ext4MarkInodeDirtyFtraceEvent'ip :: !(Prelude.Maybe Data.Word.Word64),
                                                _Ext4MarkInodeDirtyFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4MarkInodeDirtyFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4MarkInodeDirtyFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MarkInodeDirtyFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4MarkInodeDirtyFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4MarkInodeDirtyFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MarkInodeDirtyFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4MarkInodeDirtyFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4MarkInodeDirtyFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MarkInodeDirtyFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4MarkInodeDirtyFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4MarkInodeDirtyFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MarkInodeDirtyFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4MarkInodeDirtyFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4MarkInodeDirtyFtraceEvent "ip" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MarkInodeDirtyFtraceEvent'ip
           (\ x__ y__ -> x__ {_Ext4MarkInodeDirtyFtraceEvent'ip = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4MarkInodeDirtyFtraceEvent "maybe'ip" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MarkInodeDirtyFtraceEvent'ip
           (\ x__ y__ -> x__ {_Ext4MarkInodeDirtyFtraceEvent'ip = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4MarkInodeDirtyFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4MarkInodeDirtyFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \\GSExt4MarkInodeDirtyFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\SO\n\
      \\STXip\CAN\ETX \SOH(\EOTR\STXip"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4MarkInodeDirtyFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4MarkInodeDirtyFtraceEvent
        ip__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ip"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ip")) ::
              Data.ProtoLens.FieldDescriptor Ext4MarkInodeDirtyFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, ip__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4MarkInodeDirtyFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__ {_Ext4MarkInodeDirtyFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4MarkInodeDirtyFtraceEvent'_constructor
        {_Ext4MarkInodeDirtyFtraceEvent'dev = Prelude.Nothing,
         _Ext4MarkInodeDirtyFtraceEvent'ino = Prelude.Nothing,
         _Ext4MarkInodeDirtyFtraceEvent'ip = Prelude.Nothing,
         _Ext4MarkInodeDirtyFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4MarkInodeDirtyFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4MarkInodeDirtyFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ip"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ip") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "Ext4MarkInodeDirtyFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ip") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                   (Data.ProtoLens.Encoding.Wire.buildFieldSet
                      (Lens.Family2.view Data.ProtoLens.unknownFields _x))))
instance Control.DeepSeq.NFData Ext4MarkInodeDirtyFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4MarkInodeDirtyFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4MarkInodeDirtyFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4MarkInodeDirtyFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4MarkInodeDirtyFtraceEvent'ip x__) ())))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4MbBitmapLoadFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4MbBitmapLoadFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.group' @:: Lens' Ext4MbBitmapLoadFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'group' @:: Lens' Ext4MbBitmapLoadFtraceEvent (Prelude.Maybe Data.Word.Word32)@ -}
data Ext4MbBitmapLoadFtraceEvent
  = Ext4MbBitmapLoadFtraceEvent'_constructor {_Ext4MbBitmapLoadFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                              _Ext4MbBitmapLoadFtraceEvent'group :: !(Prelude.Maybe Data.Word.Word32),
                                              _Ext4MbBitmapLoadFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4MbBitmapLoadFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4MbBitmapLoadFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MbBitmapLoadFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4MbBitmapLoadFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4MbBitmapLoadFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MbBitmapLoadFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4MbBitmapLoadFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4MbBitmapLoadFtraceEvent "group" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MbBitmapLoadFtraceEvent'group
           (\ x__ y__ -> x__ {_Ext4MbBitmapLoadFtraceEvent'group = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4MbBitmapLoadFtraceEvent "maybe'group" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MbBitmapLoadFtraceEvent'group
           (\ x__ y__ -> x__ {_Ext4MbBitmapLoadFtraceEvent'group = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4MbBitmapLoadFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4MbBitmapLoadFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \\ESCExt4MbBitmapLoadFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DC4\n\
      \\ENQgroup\CAN\STX \SOH(\rR\ENQgroup"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4MbBitmapLoadFtraceEvent
        group__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "group"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'group")) ::
              Data.ProtoLens.FieldDescriptor Ext4MbBitmapLoadFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, group__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4MbBitmapLoadFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__ {_Ext4MbBitmapLoadFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4MbBitmapLoadFtraceEvent'_constructor
        {_Ext4MbBitmapLoadFtraceEvent'dev = Prelude.Nothing,
         _Ext4MbBitmapLoadFtraceEvent'group = Prelude.Nothing,
         _Ext4MbBitmapLoadFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4MbBitmapLoadFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4MbBitmapLoadFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "group"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"group") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "Ext4MbBitmapLoadFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'group") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          ((Prelude..)
                             Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData Ext4MbBitmapLoadFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4MbBitmapLoadFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4MbBitmapLoadFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4MbBitmapLoadFtraceEvent'group x__) ()))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4MbBuddyBitmapLoadFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4MbBuddyBitmapLoadFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.group' @:: Lens' Ext4MbBuddyBitmapLoadFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'group' @:: Lens' Ext4MbBuddyBitmapLoadFtraceEvent (Prelude.Maybe Data.Word.Word32)@ -}
data Ext4MbBuddyBitmapLoadFtraceEvent
  = Ext4MbBuddyBitmapLoadFtraceEvent'_constructor {_Ext4MbBuddyBitmapLoadFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                                   _Ext4MbBuddyBitmapLoadFtraceEvent'group :: !(Prelude.Maybe Data.Word.Word32),
                                                   _Ext4MbBuddyBitmapLoadFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4MbBuddyBitmapLoadFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4MbBuddyBitmapLoadFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MbBuddyBitmapLoadFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4MbBuddyBitmapLoadFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4MbBuddyBitmapLoadFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MbBuddyBitmapLoadFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4MbBuddyBitmapLoadFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4MbBuddyBitmapLoadFtraceEvent "group" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MbBuddyBitmapLoadFtraceEvent'group
           (\ x__ y__ -> x__ {_Ext4MbBuddyBitmapLoadFtraceEvent'group = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4MbBuddyBitmapLoadFtraceEvent "maybe'group" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MbBuddyBitmapLoadFtraceEvent'group
           (\ x__ y__ -> x__ {_Ext4MbBuddyBitmapLoadFtraceEvent'group = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4MbBuddyBitmapLoadFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4MbBuddyBitmapLoadFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \ Ext4MbBuddyBitmapLoadFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DC4\n\
      \\ENQgroup\CAN\STX \SOH(\rR\ENQgroup"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4MbBuddyBitmapLoadFtraceEvent
        group__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "group"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'group")) ::
              Data.ProtoLens.FieldDescriptor Ext4MbBuddyBitmapLoadFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, group__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4MbBuddyBitmapLoadFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__ {_Ext4MbBuddyBitmapLoadFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4MbBuddyBitmapLoadFtraceEvent'_constructor
        {_Ext4MbBuddyBitmapLoadFtraceEvent'dev = Prelude.Nothing,
         _Ext4MbBuddyBitmapLoadFtraceEvent'group = Prelude.Nothing,
         _Ext4MbBuddyBitmapLoadFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4MbBuddyBitmapLoadFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4MbBuddyBitmapLoadFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "group"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"group") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage)
          "Ext4MbBuddyBitmapLoadFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'group") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          ((Prelude..)
                             Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData Ext4MbBuddyBitmapLoadFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4MbBuddyBitmapLoadFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4MbBuddyBitmapLoadFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4MbBuddyBitmapLoadFtraceEvent'group x__) ()))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4MbDiscardPreallocationsFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4MbDiscardPreallocationsFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.needed' @:: Lens' Ext4MbDiscardPreallocationsFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'needed' @:: Lens' Ext4MbDiscardPreallocationsFtraceEvent (Prelude.Maybe Data.Int.Int32)@ -}
data Ext4MbDiscardPreallocationsFtraceEvent
  = Ext4MbDiscardPreallocationsFtraceEvent'_constructor {_Ext4MbDiscardPreallocationsFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                                         _Ext4MbDiscardPreallocationsFtraceEvent'needed :: !(Prelude.Maybe Data.Int.Int32),
                                                         _Ext4MbDiscardPreallocationsFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4MbDiscardPreallocationsFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4MbDiscardPreallocationsFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MbDiscardPreallocationsFtraceEvent'dev
           (\ x__ y__
              -> x__ {_Ext4MbDiscardPreallocationsFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4MbDiscardPreallocationsFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MbDiscardPreallocationsFtraceEvent'dev
           (\ x__ y__
              -> x__ {_Ext4MbDiscardPreallocationsFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4MbDiscardPreallocationsFtraceEvent "needed" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MbDiscardPreallocationsFtraceEvent'needed
           (\ x__ y__
              -> x__ {_Ext4MbDiscardPreallocationsFtraceEvent'needed = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4MbDiscardPreallocationsFtraceEvent "maybe'needed" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MbDiscardPreallocationsFtraceEvent'needed
           (\ x__ y__
              -> x__ {_Ext4MbDiscardPreallocationsFtraceEvent'needed = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4MbDiscardPreallocationsFtraceEvent where
  messageName _
    = Data.Text.pack
        "perfetto.protos.Ext4MbDiscardPreallocationsFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \&Ext4MbDiscardPreallocationsFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\SYN\n\
      \\ACKneeded\CAN\STX \SOH(\ENQR\ACKneeded"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4MbDiscardPreallocationsFtraceEvent
        needed__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "needed"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'needed")) ::
              Data.ProtoLens.FieldDescriptor Ext4MbDiscardPreallocationsFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, needed__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4MbDiscardPreallocationsFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__
                {_Ext4MbDiscardPreallocationsFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4MbDiscardPreallocationsFtraceEvent'_constructor
        {_Ext4MbDiscardPreallocationsFtraceEvent'dev = Prelude.Nothing,
         _Ext4MbDiscardPreallocationsFtraceEvent'needed = Prelude.Nothing,
         _Ext4MbDiscardPreallocationsFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4MbDiscardPreallocationsFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4MbDiscardPreallocationsFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "needed"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"needed") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage)
          "Ext4MbDiscardPreallocationsFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'needed") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          ((Prelude..)
                             Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData Ext4MbDiscardPreallocationsFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4MbDiscardPreallocationsFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4MbDiscardPreallocationsFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4MbDiscardPreallocationsFtraceEvent'needed x__) ()))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4MbNewGroupPaFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4MbNewGroupPaFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4MbNewGroupPaFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4MbNewGroupPaFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.paPstart' @:: Lens' Ext4MbNewGroupPaFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'paPstart' @:: Lens' Ext4MbNewGroupPaFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.paLstart' @:: Lens' Ext4MbNewGroupPaFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'paLstart' @:: Lens' Ext4MbNewGroupPaFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.paLen' @:: Lens' Ext4MbNewGroupPaFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'paLen' @:: Lens' Ext4MbNewGroupPaFtraceEvent (Prelude.Maybe Data.Word.Word32)@ -}
data Ext4MbNewGroupPaFtraceEvent
  = Ext4MbNewGroupPaFtraceEvent'_constructor {_Ext4MbNewGroupPaFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                              _Ext4MbNewGroupPaFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                              _Ext4MbNewGroupPaFtraceEvent'paPstart :: !(Prelude.Maybe Data.Word.Word64),
                                              _Ext4MbNewGroupPaFtraceEvent'paLstart :: !(Prelude.Maybe Data.Word.Word64),
                                              _Ext4MbNewGroupPaFtraceEvent'paLen :: !(Prelude.Maybe Data.Word.Word32),
                                              _Ext4MbNewGroupPaFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4MbNewGroupPaFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4MbNewGroupPaFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MbNewGroupPaFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4MbNewGroupPaFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4MbNewGroupPaFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MbNewGroupPaFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4MbNewGroupPaFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4MbNewGroupPaFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MbNewGroupPaFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4MbNewGroupPaFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4MbNewGroupPaFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MbNewGroupPaFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4MbNewGroupPaFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4MbNewGroupPaFtraceEvent "paPstart" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MbNewGroupPaFtraceEvent'paPstart
           (\ x__ y__ -> x__ {_Ext4MbNewGroupPaFtraceEvent'paPstart = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4MbNewGroupPaFtraceEvent "maybe'paPstart" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MbNewGroupPaFtraceEvent'paPstart
           (\ x__ y__ -> x__ {_Ext4MbNewGroupPaFtraceEvent'paPstart = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4MbNewGroupPaFtraceEvent "paLstart" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MbNewGroupPaFtraceEvent'paLstart
           (\ x__ y__ -> x__ {_Ext4MbNewGroupPaFtraceEvent'paLstart = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4MbNewGroupPaFtraceEvent "maybe'paLstart" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MbNewGroupPaFtraceEvent'paLstart
           (\ x__ y__ -> x__ {_Ext4MbNewGroupPaFtraceEvent'paLstart = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4MbNewGroupPaFtraceEvent "paLen" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MbNewGroupPaFtraceEvent'paLen
           (\ x__ y__ -> x__ {_Ext4MbNewGroupPaFtraceEvent'paLen = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4MbNewGroupPaFtraceEvent "maybe'paLen" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MbNewGroupPaFtraceEvent'paLen
           (\ x__ y__ -> x__ {_Ext4MbNewGroupPaFtraceEvent'paLen = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4MbNewGroupPaFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4MbNewGroupPaFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \\ESCExt4MbNewGroupPaFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\ESC\n\
      \\tpa_pstart\CAN\ETX \SOH(\EOTR\bpaPstart\DC2\ESC\n\
      \\tpa_lstart\CAN\EOT \SOH(\EOTR\bpaLstart\DC2\NAK\n\
      \\ACKpa_len\CAN\ENQ \SOH(\rR\ENQpaLen"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4MbNewGroupPaFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4MbNewGroupPaFtraceEvent
        paPstart__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "pa_pstart"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'paPstart")) ::
              Data.ProtoLens.FieldDescriptor Ext4MbNewGroupPaFtraceEvent
        paLstart__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "pa_lstart"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'paLstart")) ::
              Data.ProtoLens.FieldDescriptor Ext4MbNewGroupPaFtraceEvent
        paLen__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "pa_len"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'paLen")) ::
              Data.ProtoLens.FieldDescriptor Ext4MbNewGroupPaFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, paPstart__field_descriptor),
           (Data.ProtoLens.Tag 4, paLstart__field_descriptor),
           (Data.ProtoLens.Tag 5, paLen__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4MbNewGroupPaFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__ {_Ext4MbNewGroupPaFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4MbNewGroupPaFtraceEvent'_constructor
        {_Ext4MbNewGroupPaFtraceEvent'dev = Prelude.Nothing,
         _Ext4MbNewGroupPaFtraceEvent'ino = Prelude.Nothing,
         _Ext4MbNewGroupPaFtraceEvent'paPstart = Prelude.Nothing,
         _Ext4MbNewGroupPaFtraceEvent'paLstart = Prelude.Nothing,
         _Ext4MbNewGroupPaFtraceEvent'paLen = Prelude.Nothing,
         _Ext4MbNewGroupPaFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4MbNewGroupPaFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4MbNewGroupPaFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "pa_pstart"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"paPstart") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "pa_lstart"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"paLstart") y x)
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "pa_len"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"paLen") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "Ext4MbNewGroupPaFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'paPstart") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'paLstart") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'paLen") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral
                                      _v))
                         (Data.ProtoLens.Encoding.Wire.buildFieldSet
                            (Lens.Family2.view Data.ProtoLens.unknownFields _x))))))
instance Control.DeepSeq.NFData Ext4MbNewGroupPaFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4MbNewGroupPaFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4MbNewGroupPaFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4MbNewGroupPaFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4MbNewGroupPaFtraceEvent'paPstart x__)
                      (Control.DeepSeq.deepseq
                         (_Ext4MbNewGroupPaFtraceEvent'paLstart x__)
                         (Control.DeepSeq.deepseq
                            (_Ext4MbNewGroupPaFtraceEvent'paLen x__) ())))))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4MbNewInodePaFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4MbNewInodePaFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4MbNewInodePaFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4MbNewInodePaFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.paPstart' @:: Lens' Ext4MbNewInodePaFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'paPstart' @:: Lens' Ext4MbNewInodePaFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.paLstart' @:: Lens' Ext4MbNewInodePaFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'paLstart' @:: Lens' Ext4MbNewInodePaFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.paLen' @:: Lens' Ext4MbNewInodePaFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'paLen' @:: Lens' Ext4MbNewInodePaFtraceEvent (Prelude.Maybe Data.Word.Word32)@ -}
data Ext4MbNewInodePaFtraceEvent
  = Ext4MbNewInodePaFtraceEvent'_constructor {_Ext4MbNewInodePaFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                              _Ext4MbNewInodePaFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                              _Ext4MbNewInodePaFtraceEvent'paPstart :: !(Prelude.Maybe Data.Word.Word64),
                                              _Ext4MbNewInodePaFtraceEvent'paLstart :: !(Prelude.Maybe Data.Word.Word64),
                                              _Ext4MbNewInodePaFtraceEvent'paLen :: !(Prelude.Maybe Data.Word.Word32),
                                              _Ext4MbNewInodePaFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4MbNewInodePaFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4MbNewInodePaFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MbNewInodePaFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4MbNewInodePaFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4MbNewInodePaFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MbNewInodePaFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4MbNewInodePaFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4MbNewInodePaFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MbNewInodePaFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4MbNewInodePaFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4MbNewInodePaFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MbNewInodePaFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4MbNewInodePaFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4MbNewInodePaFtraceEvent "paPstart" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MbNewInodePaFtraceEvent'paPstart
           (\ x__ y__ -> x__ {_Ext4MbNewInodePaFtraceEvent'paPstart = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4MbNewInodePaFtraceEvent "maybe'paPstart" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MbNewInodePaFtraceEvent'paPstart
           (\ x__ y__ -> x__ {_Ext4MbNewInodePaFtraceEvent'paPstart = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4MbNewInodePaFtraceEvent "paLstart" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MbNewInodePaFtraceEvent'paLstart
           (\ x__ y__ -> x__ {_Ext4MbNewInodePaFtraceEvent'paLstart = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4MbNewInodePaFtraceEvent "maybe'paLstart" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MbNewInodePaFtraceEvent'paLstart
           (\ x__ y__ -> x__ {_Ext4MbNewInodePaFtraceEvent'paLstart = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4MbNewInodePaFtraceEvent "paLen" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MbNewInodePaFtraceEvent'paLen
           (\ x__ y__ -> x__ {_Ext4MbNewInodePaFtraceEvent'paLen = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4MbNewInodePaFtraceEvent "maybe'paLen" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MbNewInodePaFtraceEvent'paLen
           (\ x__ y__ -> x__ {_Ext4MbNewInodePaFtraceEvent'paLen = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4MbNewInodePaFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4MbNewInodePaFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \\ESCExt4MbNewInodePaFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\ESC\n\
      \\tpa_pstart\CAN\ETX \SOH(\EOTR\bpaPstart\DC2\ESC\n\
      \\tpa_lstart\CAN\EOT \SOH(\EOTR\bpaLstart\DC2\NAK\n\
      \\ACKpa_len\CAN\ENQ \SOH(\rR\ENQpaLen"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4MbNewInodePaFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4MbNewInodePaFtraceEvent
        paPstart__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "pa_pstart"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'paPstart")) ::
              Data.ProtoLens.FieldDescriptor Ext4MbNewInodePaFtraceEvent
        paLstart__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "pa_lstart"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'paLstart")) ::
              Data.ProtoLens.FieldDescriptor Ext4MbNewInodePaFtraceEvent
        paLen__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "pa_len"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'paLen")) ::
              Data.ProtoLens.FieldDescriptor Ext4MbNewInodePaFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, paPstart__field_descriptor),
           (Data.ProtoLens.Tag 4, paLstart__field_descriptor),
           (Data.ProtoLens.Tag 5, paLen__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4MbNewInodePaFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__ {_Ext4MbNewInodePaFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4MbNewInodePaFtraceEvent'_constructor
        {_Ext4MbNewInodePaFtraceEvent'dev = Prelude.Nothing,
         _Ext4MbNewInodePaFtraceEvent'ino = Prelude.Nothing,
         _Ext4MbNewInodePaFtraceEvent'paPstart = Prelude.Nothing,
         _Ext4MbNewInodePaFtraceEvent'paLstart = Prelude.Nothing,
         _Ext4MbNewInodePaFtraceEvent'paLen = Prelude.Nothing,
         _Ext4MbNewInodePaFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4MbNewInodePaFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4MbNewInodePaFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "pa_pstart"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"paPstart") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "pa_lstart"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"paLstart") y x)
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "pa_len"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"paLen") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "Ext4MbNewInodePaFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'paPstart") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'paLstart") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'paLen") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral
                                      _v))
                         (Data.ProtoLens.Encoding.Wire.buildFieldSet
                            (Lens.Family2.view Data.ProtoLens.unknownFields _x))))))
instance Control.DeepSeq.NFData Ext4MbNewInodePaFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4MbNewInodePaFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4MbNewInodePaFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4MbNewInodePaFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4MbNewInodePaFtraceEvent'paPstart x__)
                      (Control.DeepSeq.deepseq
                         (_Ext4MbNewInodePaFtraceEvent'paLstart x__)
                         (Control.DeepSeq.deepseq
                            (_Ext4MbNewInodePaFtraceEvent'paLen x__) ())))))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4MbReleaseGroupPaFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4MbReleaseGroupPaFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.paPstart' @:: Lens' Ext4MbReleaseGroupPaFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'paPstart' @:: Lens' Ext4MbReleaseGroupPaFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.paLen' @:: Lens' Ext4MbReleaseGroupPaFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'paLen' @:: Lens' Ext4MbReleaseGroupPaFtraceEvent (Prelude.Maybe Data.Word.Word32)@ -}
data Ext4MbReleaseGroupPaFtraceEvent
  = Ext4MbReleaseGroupPaFtraceEvent'_constructor {_Ext4MbReleaseGroupPaFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                                  _Ext4MbReleaseGroupPaFtraceEvent'paPstart :: !(Prelude.Maybe Data.Word.Word64),
                                                  _Ext4MbReleaseGroupPaFtraceEvent'paLen :: !(Prelude.Maybe Data.Word.Word32),
                                                  _Ext4MbReleaseGroupPaFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4MbReleaseGroupPaFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4MbReleaseGroupPaFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MbReleaseGroupPaFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4MbReleaseGroupPaFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4MbReleaseGroupPaFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MbReleaseGroupPaFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4MbReleaseGroupPaFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4MbReleaseGroupPaFtraceEvent "paPstart" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MbReleaseGroupPaFtraceEvent'paPstart
           (\ x__ y__
              -> x__ {_Ext4MbReleaseGroupPaFtraceEvent'paPstart = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4MbReleaseGroupPaFtraceEvent "maybe'paPstart" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MbReleaseGroupPaFtraceEvent'paPstart
           (\ x__ y__
              -> x__ {_Ext4MbReleaseGroupPaFtraceEvent'paPstart = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4MbReleaseGroupPaFtraceEvent "paLen" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MbReleaseGroupPaFtraceEvent'paLen
           (\ x__ y__ -> x__ {_Ext4MbReleaseGroupPaFtraceEvent'paLen = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4MbReleaseGroupPaFtraceEvent "maybe'paLen" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MbReleaseGroupPaFtraceEvent'paLen
           (\ x__ y__ -> x__ {_Ext4MbReleaseGroupPaFtraceEvent'paLen = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4MbReleaseGroupPaFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4MbReleaseGroupPaFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \\USExt4MbReleaseGroupPaFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\ESC\n\
      \\tpa_pstart\CAN\STX \SOH(\EOTR\bpaPstart\DC2\NAK\n\
      \\ACKpa_len\CAN\ETX \SOH(\rR\ENQpaLen"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4MbReleaseGroupPaFtraceEvent
        paPstart__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "pa_pstart"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'paPstart")) ::
              Data.ProtoLens.FieldDescriptor Ext4MbReleaseGroupPaFtraceEvent
        paLen__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "pa_len"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'paLen")) ::
              Data.ProtoLens.FieldDescriptor Ext4MbReleaseGroupPaFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, paPstart__field_descriptor),
           (Data.ProtoLens.Tag 3, paLen__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4MbReleaseGroupPaFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__ {_Ext4MbReleaseGroupPaFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4MbReleaseGroupPaFtraceEvent'_constructor
        {_Ext4MbReleaseGroupPaFtraceEvent'dev = Prelude.Nothing,
         _Ext4MbReleaseGroupPaFtraceEvent'paPstart = Prelude.Nothing,
         _Ext4MbReleaseGroupPaFtraceEvent'paLen = Prelude.Nothing,
         _Ext4MbReleaseGroupPaFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4MbReleaseGroupPaFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4MbReleaseGroupPaFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "pa_pstart"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"paPstart") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "pa_len"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"paLen") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage)
          "Ext4MbReleaseGroupPaFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'paPstart") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'paLen") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   (Data.ProtoLens.Encoding.Wire.buildFieldSet
                      (Lens.Family2.view Data.ProtoLens.unknownFields _x))))
instance Control.DeepSeq.NFData Ext4MbReleaseGroupPaFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4MbReleaseGroupPaFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4MbReleaseGroupPaFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4MbReleaseGroupPaFtraceEvent'paPstart x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4MbReleaseGroupPaFtraceEvent'paLen x__) ())))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4MbReleaseInodePaFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4MbReleaseInodePaFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4MbReleaseInodePaFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4MbReleaseInodePaFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.block' @:: Lens' Ext4MbReleaseInodePaFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'block' @:: Lens' Ext4MbReleaseInodePaFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.count' @:: Lens' Ext4MbReleaseInodePaFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'count' @:: Lens' Ext4MbReleaseInodePaFtraceEvent (Prelude.Maybe Data.Word.Word32)@ -}
data Ext4MbReleaseInodePaFtraceEvent
  = Ext4MbReleaseInodePaFtraceEvent'_constructor {_Ext4MbReleaseInodePaFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                                  _Ext4MbReleaseInodePaFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                                  _Ext4MbReleaseInodePaFtraceEvent'block :: !(Prelude.Maybe Data.Word.Word64),
                                                  _Ext4MbReleaseInodePaFtraceEvent'count :: !(Prelude.Maybe Data.Word.Word32),
                                                  _Ext4MbReleaseInodePaFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4MbReleaseInodePaFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4MbReleaseInodePaFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MbReleaseInodePaFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4MbReleaseInodePaFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4MbReleaseInodePaFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MbReleaseInodePaFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4MbReleaseInodePaFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4MbReleaseInodePaFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MbReleaseInodePaFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4MbReleaseInodePaFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4MbReleaseInodePaFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MbReleaseInodePaFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4MbReleaseInodePaFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4MbReleaseInodePaFtraceEvent "block" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MbReleaseInodePaFtraceEvent'block
           (\ x__ y__ -> x__ {_Ext4MbReleaseInodePaFtraceEvent'block = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4MbReleaseInodePaFtraceEvent "maybe'block" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MbReleaseInodePaFtraceEvent'block
           (\ x__ y__ -> x__ {_Ext4MbReleaseInodePaFtraceEvent'block = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4MbReleaseInodePaFtraceEvent "count" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MbReleaseInodePaFtraceEvent'count
           (\ x__ y__ -> x__ {_Ext4MbReleaseInodePaFtraceEvent'count = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4MbReleaseInodePaFtraceEvent "maybe'count" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MbReleaseInodePaFtraceEvent'count
           (\ x__ y__ -> x__ {_Ext4MbReleaseInodePaFtraceEvent'count = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4MbReleaseInodePaFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4MbReleaseInodePaFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \\USExt4MbReleaseInodePaFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DC4\n\
      \\ENQblock\CAN\ETX \SOH(\EOTR\ENQblock\DC2\DC4\n\
      \\ENQcount\CAN\EOT \SOH(\rR\ENQcount"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4MbReleaseInodePaFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4MbReleaseInodePaFtraceEvent
        block__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "block"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'block")) ::
              Data.ProtoLens.FieldDescriptor Ext4MbReleaseInodePaFtraceEvent
        count__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "count"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'count")) ::
              Data.ProtoLens.FieldDescriptor Ext4MbReleaseInodePaFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, block__field_descriptor),
           (Data.ProtoLens.Tag 4, count__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4MbReleaseInodePaFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__ {_Ext4MbReleaseInodePaFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4MbReleaseInodePaFtraceEvent'_constructor
        {_Ext4MbReleaseInodePaFtraceEvent'dev = Prelude.Nothing,
         _Ext4MbReleaseInodePaFtraceEvent'ino = Prelude.Nothing,
         _Ext4MbReleaseInodePaFtraceEvent'block = Prelude.Nothing,
         _Ext4MbReleaseInodePaFtraceEvent'count = Prelude.Nothing,
         _Ext4MbReleaseInodePaFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4MbReleaseInodePaFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4MbReleaseInodePaFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "block"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"block") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "count"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"count") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage)
          "Ext4MbReleaseInodePaFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'block") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'count") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                      (Data.ProtoLens.Encoding.Wire.buildFieldSet
                         (Lens.Family2.view Data.ProtoLens.unknownFields _x)))))
instance Control.DeepSeq.NFData Ext4MbReleaseInodePaFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4MbReleaseInodePaFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4MbReleaseInodePaFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4MbReleaseInodePaFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4MbReleaseInodePaFtraceEvent'block x__)
                      (Control.DeepSeq.deepseq
                         (_Ext4MbReleaseInodePaFtraceEvent'count x__) ()))))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4MballocAllocFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4MballocAllocFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4MballocAllocFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4MballocAllocFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.origLogical' @:: Lens' Ext4MballocAllocFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'origLogical' @:: Lens' Ext4MballocAllocFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.origStart' @:: Lens' Ext4MballocAllocFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'origStart' @:: Lens' Ext4MballocAllocFtraceEvent (Prelude.Maybe Data.Int.Int32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.origGroup' @:: Lens' Ext4MballocAllocFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'origGroup' @:: Lens' Ext4MballocAllocFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.origLen' @:: Lens' Ext4MballocAllocFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'origLen' @:: Lens' Ext4MballocAllocFtraceEvent (Prelude.Maybe Data.Int.Int32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.goalLogical' @:: Lens' Ext4MballocAllocFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'goalLogical' @:: Lens' Ext4MballocAllocFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.goalStart' @:: Lens' Ext4MballocAllocFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'goalStart' @:: Lens' Ext4MballocAllocFtraceEvent (Prelude.Maybe Data.Int.Int32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.goalGroup' @:: Lens' Ext4MballocAllocFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'goalGroup' @:: Lens' Ext4MballocAllocFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.goalLen' @:: Lens' Ext4MballocAllocFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'goalLen' @:: Lens' Ext4MballocAllocFtraceEvent (Prelude.Maybe Data.Int.Int32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.resultLogical' @:: Lens' Ext4MballocAllocFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'resultLogical' @:: Lens' Ext4MballocAllocFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.resultStart' @:: Lens' Ext4MballocAllocFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'resultStart' @:: Lens' Ext4MballocAllocFtraceEvent (Prelude.Maybe Data.Int.Int32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.resultGroup' @:: Lens' Ext4MballocAllocFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'resultGroup' @:: Lens' Ext4MballocAllocFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.resultLen' @:: Lens' Ext4MballocAllocFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'resultLen' @:: Lens' Ext4MballocAllocFtraceEvent (Prelude.Maybe Data.Int.Int32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.found' @:: Lens' Ext4MballocAllocFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'found' @:: Lens' Ext4MballocAllocFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.groups' @:: Lens' Ext4MballocAllocFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'groups' @:: Lens' Ext4MballocAllocFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.buddy' @:: Lens' Ext4MballocAllocFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'buddy' @:: Lens' Ext4MballocAllocFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.flags' @:: Lens' Ext4MballocAllocFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'flags' @:: Lens' Ext4MballocAllocFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.tail' @:: Lens' Ext4MballocAllocFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'tail' @:: Lens' Ext4MballocAllocFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.cr' @:: Lens' Ext4MballocAllocFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'cr' @:: Lens' Ext4MballocAllocFtraceEvent (Prelude.Maybe Data.Word.Word32)@ -}
data Ext4MballocAllocFtraceEvent
  = Ext4MballocAllocFtraceEvent'_constructor {_Ext4MballocAllocFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                              _Ext4MballocAllocFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                              _Ext4MballocAllocFtraceEvent'origLogical :: !(Prelude.Maybe Data.Word.Word32),
                                              _Ext4MballocAllocFtraceEvent'origStart :: !(Prelude.Maybe Data.Int.Int32),
                                              _Ext4MballocAllocFtraceEvent'origGroup :: !(Prelude.Maybe Data.Word.Word32),
                                              _Ext4MballocAllocFtraceEvent'origLen :: !(Prelude.Maybe Data.Int.Int32),
                                              _Ext4MballocAllocFtraceEvent'goalLogical :: !(Prelude.Maybe Data.Word.Word32),
                                              _Ext4MballocAllocFtraceEvent'goalStart :: !(Prelude.Maybe Data.Int.Int32),
                                              _Ext4MballocAllocFtraceEvent'goalGroup :: !(Prelude.Maybe Data.Word.Word32),
                                              _Ext4MballocAllocFtraceEvent'goalLen :: !(Prelude.Maybe Data.Int.Int32),
                                              _Ext4MballocAllocFtraceEvent'resultLogical :: !(Prelude.Maybe Data.Word.Word32),
                                              _Ext4MballocAllocFtraceEvent'resultStart :: !(Prelude.Maybe Data.Int.Int32),
                                              _Ext4MballocAllocFtraceEvent'resultGroup :: !(Prelude.Maybe Data.Word.Word32),
                                              _Ext4MballocAllocFtraceEvent'resultLen :: !(Prelude.Maybe Data.Int.Int32),
                                              _Ext4MballocAllocFtraceEvent'found :: !(Prelude.Maybe Data.Word.Word32),
                                              _Ext4MballocAllocFtraceEvent'groups :: !(Prelude.Maybe Data.Word.Word32),
                                              _Ext4MballocAllocFtraceEvent'buddy :: !(Prelude.Maybe Data.Word.Word32),
                                              _Ext4MballocAllocFtraceEvent'flags :: !(Prelude.Maybe Data.Word.Word32),
                                              _Ext4MballocAllocFtraceEvent'tail :: !(Prelude.Maybe Data.Word.Word32),
                                              _Ext4MballocAllocFtraceEvent'cr :: !(Prelude.Maybe Data.Word.Word32),
                                              _Ext4MballocAllocFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4MballocAllocFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4MballocAllocFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocAllocFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4MballocAllocFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4MballocAllocFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocAllocFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4MballocAllocFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4MballocAllocFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocAllocFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4MballocAllocFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4MballocAllocFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocAllocFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4MballocAllocFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4MballocAllocFtraceEvent "origLogical" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocAllocFtraceEvent'origLogical
           (\ x__ y__
              -> x__ {_Ext4MballocAllocFtraceEvent'origLogical = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4MballocAllocFtraceEvent "maybe'origLogical" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocAllocFtraceEvent'origLogical
           (\ x__ y__
              -> x__ {_Ext4MballocAllocFtraceEvent'origLogical = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4MballocAllocFtraceEvent "origStart" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocAllocFtraceEvent'origStart
           (\ x__ y__ -> x__ {_Ext4MballocAllocFtraceEvent'origStart = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4MballocAllocFtraceEvent "maybe'origStart" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocAllocFtraceEvent'origStart
           (\ x__ y__ -> x__ {_Ext4MballocAllocFtraceEvent'origStart = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4MballocAllocFtraceEvent "origGroup" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocAllocFtraceEvent'origGroup
           (\ x__ y__ -> x__ {_Ext4MballocAllocFtraceEvent'origGroup = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4MballocAllocFtraceEvent "maybe'origGroup" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocAllocFtraceEvent'origGroup
           (\ x__ y__ -> x__ {_Ext4MballocAllocFtraceEvent'origGroup = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4MballocAllocFtraceEvent "origLen" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocAllocFtraceEvent'origLen
           (\ x__ y__ -> x__ {_Ext4MballocAllocFtraceEvent'origLen = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4MballocAllocFtraceEvent "maybe'origLen" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocAllocFtraceEvent'origLen
           (\ x__ y__ -> x__ {_Ext4MballocAllocFtraceEvent'origLen = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4MballocAllocFtraceEvent "goalLogical" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocAllocFtraceEvent'goalLogical
           (\ x__ y__
              -> x__ {_Ext4MballocAllocFtraceEvent'goalLogical = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4MballocAllocFtraceEvent "maybe'goalLogical" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocAllocFtraceEvent'goalLogical
           (\ x__ y__
              -> x__ {_Ext4MballocAllocFtraceEvent'goalLogical = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4MballocAllocFtraceEvent "goalStart" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocAllocFtraceEvent'goalStart
           (\ x__ y__ -> x__ {_Ext4MballocAllocFtraceEvent'goalStart = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4MballocAllocFtraceEvent "maybe'goalStart" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocAllocFtraceEvent'goalStart
           (\ x__ y__ -> x__ {_Ext4MballocAllocFtraceEvent'goalStart = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4MballocAllocFtraceEvent "goalGroup" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocAllocFtraceEvent'goalGroup
           (\ x__ y__ -> x__ {_Ext4MballocAllocFtraceEvent'goalGroup = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4MballocAllocFtraceEvent "maybe'goalGroup" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocAllocFtraceEvent'goalGroup
           (\ x__ y__ -> x__ {_Ext4MballocAllocFtraceEvent'goalGroup = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4MballocAllocFtraceEvent "goalLen" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocAllocFtraceEvent'goalLen
           (\ x__ y__ -> x__ {_Ext4MballocAllocFtraceEvent'goalLen = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4MballocAllocFtraceEvent "maybe'goalLen" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocAllocFtraceEvent'goalLen
           (\ x__ y__ -> x__ {_Ext4MballocAllocFtraceEvent'goalLen = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4MballocAllocFtraceEvent "resultLogical" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocAllocFtraceEvent'resultLogical
           (\ x__ y__
              -> x__ {_Ext4MballocAllocFtraceEvent'resultLogical = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4MballocAllocFtraceEvent "maybe'resultLogical" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocAllocFtraceEvent'resultLogical
           (\ x__ y__
              -> x__ {_Ext4MballocAllocFtraceEvent'resultLogical = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4MballocAllocFtraceEvent "resultStart" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocAllocFtraceEvent'resultStart
           (\ x__ y__
              -> x__ {_Ext4MballocAllocFtraceEvent'resultStart = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4MballocAllocFtraceEvent "maybe'resultStart" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocAllocFtraceEvent'resultStart
           (\ x__ y__
              -> x__ {_Ext4MballocAllocFtraceEvent'resultStart = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4MballocAllocFtraceEvent "resultGroup" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocAllocFtraceEvent'resultGroup
           (\ x__ y__
              -> x__ {_Ext4MballocAllocFtraceEvent'resultGroup = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4MballocAllocFtraceEvent "maybe'resultGroup" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocAllocFtraceEvent'resultGroup
           (\ x__ y__
              -> x__ {_Ext4MballocAllocFtraceEvent'resultGroup = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4MballocAllocFtraceEvent "resultLen" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocAllocFtraceEvent'resultLen
           (\ x__ y__ -> x__ {_Ext4MballocAllocFtraceEvent'resultLen = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4MballocAllocFtraceEvent "maybe'resultLen" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocAllocFtraceEvent'resultLen
           (\ x__ y__ -> x__ {_Ext4MballocAllocFtraceEvent'resultLen = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4MballocAllocFtraceEvent "found" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocAllocFtraceEvent'found
           (\ x__ y__ -> x__ {_Ext4MballocAllocFtraceEvent'found = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4MballocAllocFtraceEvent "maybe'found" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocAllocFtraceEvent'found
           (\ x__ y__ -> x__ {_Ext4MballocAllocFtraceEvent'found = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4MballocAllocFtraceEvent "groups" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocAllocFtraceEvent'groups
           (\ x__ y__ -> x__ {_Ext4MballocAllocFtraceEvent'groups = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4MballocAllocFtraceEvent "maybe'groups" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocAllocFtraceEvent'groups
           (\ x__ y__ -> x__ {_Ext4MballocAllocFtraceEvent'groups = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4MballocAllocFtraceEvent "buddy" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocAllocFtraceEvent'buddy
           (\ x__ y__ -> x__ {_Ext4MballocAllocFtraceEvent'buddy = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4MballocAllocFtraceEvent "maybe'buddy" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocAllocFtraceEvent'buddy
           (\ x__ y__ -> x__ {_Ext4MballocAllocFtraceEvent'buddy = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4MballocAllocFtraceEvent "flags" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocAllocFtraceEvent'flags
           (\ x__ y__ -> x__ {_Ext4MballocAllocFtraceEvent'flags = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4MballocAllocFtraceEvent "maybe'flags" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocAllocFtraceEvent'flags
           (\ x__ y__ -> x__ {_Ext4MballocAllocFtraceEvent'flags = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4MballocAllocFtraceEvent "tail" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocAllocFtraceEvent'tail
           (\ x__ y__ -> x__ {_Ext4MballocAllocFtraceEvent'tail = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4MballocAllocFtraceEvent "maybe'tail" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocAllocFtraceEvent'tail
           (\ x__ y__ -> x__ {_Ext4MballocAllocFtraceEvent'tail = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4MballocAllocFtraceEvent "cr" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocAllocFtraceEvent'cr
           (\ x__ y__ -> x__ {_Ext4MballocAllocFtraceEvent'cr = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4MballocAllocFtraceEvent "maybe'cr" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocAllocFtraceEvent'cr
           (\ x__ y__ -> x__ {_Ext4MballocAllocFtraceEvent'cr = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4MballocAllocFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4MballocAllocFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \\ESCExt4MballocAllocFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2!\n\
      \\forig_logical\CAN\ETX \SOH(\rR\vorigLogical\DC2\GS\n\
      \\n\
      \orig_start\CAN\EOT \SOH(\ENQR\torigStart\DC2\GS\n\
      \\n\
      \orig_group\CAN\ENQ \SOH(\rR\torigGroup\DC2\EM\n\
      \\borig_len\CAN\ACK \SOH(\ENQR\aorigLen\DC2!\n\
      \\fgoal_logical\CAN\a \SOH(\rR\vgoalLogical\DC2\GS\n\
      \\n\
      \goal_start\CAN\b \SOH(\ENQR\tgoalStart\DC2\GS\n\
      \\n\
      \goal_group\CAN\t \SOH(\rR\tgoalGroup\DC2\EM\n\
      \\bgoal_len\CAN\n\
      \ \SOH(\ENQR\agoalLen\DC2%\n\
      \\SOresult_logical\CAN\v \SOH(\rR\rresultLogical\DC2!\n\
      \\fresult_start\CAN\f \SOH(\ENQR\vresultStart\DC2!\n\
      \\fresult_group\CAN\r \SOH(\rR\vresultGroup\DC2\GS\n\
      \\n\
      \result_len\CAN\SO \SOH(\ENQR\tresultLen\DC2\DC4\n\
      \\ENQfound\CAN\SI \SOH(\rR\ENQfound\DC2\SYN\n\
      \\ACKgroups\CAN\DLE \SOH(\rR\ACKgroups\DC2\DC4\n\
      \\ENQbuddy\CAN\DC1 \SOH(\rR\ENQbuddy\DC2\DC4\n\
      \\ENQflags\CAN\DC2 \SOH(\rR\ENQflags\DC2\DC2\n\
      \\EOTtail\CAN\DC3 \SOH(\rR\EOTtail\DC2\SO\n\
      \\STXcr\CAN\DC4 \SOH(\rR\STXcr"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4MballocAllocFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4MballocAllocFtraceEvent
        origLogical__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "orig_logical"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'origLogical")) ::
              Data.ProtoLens.FieldDescriptor Ext4MballocAllocFtraceEvent
        origStart__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "orig_start"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'origStart")) ::
              Data.ProtoLens.FieldDescriptor Ext4MballocAllocFtraceEvent
        origGroup__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "orig_group"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'origGroup")) ::
              Data.ProtoLens.FieldDescriptor Ext4MballocAllocFtraceEvent
        origLen__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "orig_len"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'origLen")) ::
              Data.ProtoLens.FieldDescriptor Ext4MballocAllocFtraceEvent
        goalLogical__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "goal_logical"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'goalLogical")) ::
              Data.ProtoLens.FieldDescriptor Ext4MballocAllocFtraceEvent
        goalStart__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "goal_start"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'goalStart")) ::
              Data.ProtoLens.FieldDescriptor Ext4MballocAllocFtraceEvent
        goalGroup__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "goal_group"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'goalGroup")) ::
              Data.ProtoLens.FieldDescriptor Ext4MballocAllocFtraceEvent
        goalLen__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "goal_len"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'goalLen")) ::
              Data.ProtoLens.FieldDescriptor Ext4MballocAllocFtraceEvent
        resultLogical__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "result_logical"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'resultLogical")) ::
              Data.ProtoLens.FieldDescriptor Ext4MballocAllocFtraceEvent
        resultStart__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "result_start"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'resultStart")) ::
              Data.ProtoLens.FieldDescriptor Ext4MballocAllocFtraceEvent
        resultGroup__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "result_group"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'resultGroup")) ::
              Data.ProtoLens.FieldDescriptor Ext4MballocAllocFtraceEvent
        resultLen__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "result_len"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'resultLen")) ::
              Data.ProtoLens.FieldDescriptor Ext4MballocAllocFtraceEvent
        found__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "found"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'found")) ::
              Data.ProtoLens.FieldDescriptor Ext4MballocAllocFtraceEvent
        groups__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "groups"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'groups")) ::
              Data.ProtoLens.FieldDescriptor Ext4MballocAllocFtraceEvent
        buddy__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "buddy"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'buddy")) ::
              Data.ProtoLens.FieldDescriptor Ext4MballocAllocFtraceEvent
        flags__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "flags"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'flags")) ::
              Data.ProtoLens.FieldDescriptor Ext4MballocAllocFtraceEvent
        tail__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "tail"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'tail")) ::
              Data.ProtoLens.FieldDescriptor Ext4MballocAllocFtraceEvent
        cr__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "cr"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'cr")) ::
              Data.ProtoLens.FieldDescriptor Ext4MballocAllocFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, origLogical__field_descriptor),
           (Data.ProtoLens.Tag 4, origStart__field_descriptor),
           (Data.ProtoLens.Tag 5, origGroup__field_descriptor),
           (Data.ProtoLens.Tag 6, origLen__field_descriptor),
           (Data.ProtoLens.Tag 7, goalLogical__field_descriptor),
           (Data.ProtoLens.Tag 8, goalStart__field_descriptor),
           (Data.ProtoLens.Tag 9, goalGroup__field_descriptor),
           (Data.ProtoLens.Tag 10, goalLen__field_descriptor),
           (Data.ProtoLens.Tag 11, resultLogical__field_descriptor),
           (Data.ProtoLens.Tag 12, resultStart__field_descriptor),
           (Data.ProtoLens.Tag 13, resultGroup__field_descriptor),
           (Data.ProtoLens.Tag 14, resultLen__field_descriptor),
           (Data.ProtoLens.Tag 15, found__field_descriptor),
           (Data.ProtoLens.Tag 16, groups__field_descriptor),
           (Data.ProtoLens.Tag 17, buddy__field_descriptor),
           (Data.ProtoLens.Tag 18, flags__field_descriptor),
           (Data.ProtoLens.Tag 19, tail__field_descriptor),
           (Data.ProtoLens.Tag 20, cr__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4MballocAllocFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__ {_Ext4MballocAllocFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4MballocAllocFtraceEvent'_constructor
        {_Ext4MballocAllocFtraceEvent'dev = Prelude.Nothing,
         _Ext4MballocAllocFtraceEvent'ino = Prelude.Nothing,
         _Ext4MballocAllocFtraceEvent'origLogical = Prelude.Nothing,
         _Ext4MballocAllocFtraceEvent'origStart = Prelude.Nothing,
         _Ext4MballocAllocFtraceEvent'origGroup = Prelude.Nothing,
         _Ext4MballocAllocFtraceEvent'origLen = Prelude.Nothing,
         _Ext4MballocAllocFtraceEvent'goalLogical = Prelude.Nothing,
         _Ext4MballocAllocFtraceEvent'goalStart = Prelude.Nothing,
         _Ext4MballocAllocFtraceEvent'goalGroup = Prelude.Nothing,
         _Ext4MballocAllocFtraceEvent'goalLen = Prelude.Nothing,
         _Ext4MballocAllocFtraceEvent'resultLogical = Prelude.Nothing,
         _Ext4MballocAllocFtraceEvent'resultStart = Prelude.Nothing,
         _Ext4MballocAllocFtraceEvent'resultGroup = Prelude.Nothing,
         _Ext4MballocAllocFtraceEvent'resultLen = Prelude.Nothing,
         _Ext4MballocAllocFtraceEvent'found = Prelude.Nothing,
         _Ext4MballocAllocFtraceEvent'groups = Prelude.Nothing,
         _Ext4MballocAllocFtraceEvent'buddy = Prelude.Nothing,
         _Ext4MballocAllocFtraceEvent'flags = Prelude.Nothing,
         _Ext4MballocAllocFtraceEvent'tail = Prelude.Nothing,
         _Ext4MballocAllocFtraceEvent'cr = Prelude.Nothing,
         _Ext4MballocAllocFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4MballocAllocFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4MballocAllocFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "orig_logical"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"origLogical") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "orig_start"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"origStart") y x)
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "orig_group"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"origGroup") y x)
                        48
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "orig_len"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"origLen") y x)
                        56
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "goal_logical"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"goalLogical") y x)
                        64
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "goal_start"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"goalStart") y x)
                        72
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "goal_group"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"goalGroup") y x)
                        80
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "goal_len"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"goalLen") y x)
                        88
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "result_logical"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"resultLogical") y x)
                        96
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "result_start"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"resultStart") y x)
                        104
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "result_group"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"resultGroup") y x)
                        112
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "result_len"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"resultLen") y x)
                        120
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "found"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"found") y x)
                        128
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "groups"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"groups") y x)
                        136
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "buddy"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"buddy") y x)
                        144
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "flags"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"flags") y x)
                        152
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "tail"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"tail") y x)
                        160
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "cr"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"cr") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "Ext4MballocAllocFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view
                          (Data.ProtoLens.Field.field @"maybe'origLogical") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view
                             (Data.ProtoLens.Field.field @"maybe'origStart") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view
                                (Data.ProtoLens.Field.field @"maybe'origGroup") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral
                                      _v))
                         ((Data.Monoid.<>)
                            (case
                                 Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'origLen") _x
                             of
                               Prelude.Nothing -> Data.Monoid.mempty
                               (Prelude.Just _v)
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 48)
                                      ((Prelude..)
                                         Data.ProtoLens.Encoding.Bytes.putVarInt
                                         Prelude.fromIntegral _v))
                            ((Data.Monoid.<>)
                               (case
                                    Lens.Family2.view
                                      (Data.ProtoLens.Field.field @"maybe'goalLogical") _x
                                of
                                  Prelude.Nothing -> Data.Monoid.mempty
                                  (Prelude.Just _v)
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt 56)
                                         ((Prelude..)
                                            Data.ProtoLens.Encoding.Bytes.putVarInt
                                            Prelude.fromIntegral _v))
                               ((Data.Monoid.<>)
                                  (case
                                       Lens.Family2.view
                                         (Data.ProtoLens.Field.field @"maybe'goalStart") _x
                                   of
                                     Prelude.Nothing -> Data.Monoid.mempty
                                     (Prelude.Just _v)
                                       -> (Data.Monoid.<>)
                                            (Data.ProtoLens.Encoding.Bytes.putVarInt 64)
                                            ((Prelude..)
                                               Data.ProtoLens.Encoding.Bytes.putVarInt
                                               Prelude.fromIntegral _v))
                                  ((Data.Monoid.<>)
                                     (case
                                          Lens.Family2.view
                                            (Data.ProtoLens.Field.field @"maybe'goalGroup") _x
                                      of
                                        Prelude.Nothing -> Data.Monoid.mempty
                                        (Prelude.Just _v)
                                          -> (Data.Monoid.<>)
                                               (Data.ProtoLens.Encoding.Bytes.putVarInt 72)
                                               ((Prelude..)
                                                  Data.ProtoLens.Encoding.Bytes.putVarInt
                                                  Prelude.fromIntegral _v))
                                     ((Data.Monoid.<>)
                                        (case
                                             Lens.Family2.view
                                               (Data.ProtoLens.Field.field @"maybe'goalLen") _x
                                         of
                                           Prelude.Nothing -> Data.Monoid.mempty
                                           (Prelude.Just _v)
                                             -> (Data.Monoid.<>)
                                                  (Data.ProtoLens.Encoding.Bytes.putVarInt 80)
                                                  ((Prelude..)
                                                     Data.ProtoLens.Encoding.Bytes.putVarInt
                                                     Prelude.fromIntegral _v))
                                        ((Data.Monoid.<>)
                                           (case
                                                Lens.Family2.view
                                                  (Data.ProtoLens.Field.field
                                                     @"maybe'resultLogical")
                                                  _x
                                            of
                                              Prelude.Nothing -> Data.Monoid.mempty
                                              (Prelude.Just _v)
                                                -> (Data.Monoid.<>)
                                                     (Data.ProtoLens.Encoding.Bytes.putVarInt 88)
                                                     ((Prelude..)
                                                        Data.ProtoLens.Encoding.Bytes.putVarInt
                                                        Prelude.fromIntegral _v))
                                           ((Data.Monoid.<>)
                                              (case
                                                   Lens.Family2.view
                                                     (Data.ProtoLens.Field.field
                                                        @"maybe'resultStart")
                                                     _x
                                               of
                                                 Prelude.Nothing -> Data.Monoid.mempty
                                                 (Prelude.Just _v)
                                                   -> (Data.Monoid.<>)
                                                        (Data.ProtoLens.Encoding.Bytes.putVarInt 96)
                                                        ((Prelude..)
                                                           Data.ProtoLens.Encoding.Bytes.putVarInt
                                                           Prelude.fromIntegral _v))
                                              ((Data.Monoid.<>)
                                                 (case
                                                      Lens.Family2.view
                                                        (Data.ProtoLens.Field.field
                                                           @"maybe'resultGroup")
                                                        _x
                                                  of
                                                    Prelude.Nothing -> Data.Monoid.mempty
                                                    (Prelude.Just _v)
                                                      -> (Data.Monoid.<>)
                                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                              104)
                                                           ((Prelude..)
                                                              Data.ProtoLens.Encoding.Bytes.putVarInt
                                                              Prelude.fromIntegral _v))
                                                 ((Data.Monoid.<>)
                                                    (case
                                                         Lens.Family2.view
                                                           (Data.ProtoLens.Field.field
                                                              @"maybe'resultLen")
                                                           _x
                                                     of
                                                       Prelude.Nothing -> Data.Monoid.mempty
                                                       (Prelude.Just _v)
                                                         -> (Data.Monoid.<>)
                                                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                 112)
                                                              ((Prelude..)
                                                                 Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                 Prelude.fromIntegral _v))
                                                    ((Data.Monoid.<>)
                                                       (case
                                                            Lens.Family2.view
                                                              (Data.ProtoLens.Field.field
                                                                 @"maybe'found")
                                                              _x
                                                        of
                                                          Prelude.Nothing -> Data.Monoid.mempty
                                                          (Prelude.Just _v)
                                                            -> (Data.Monoid.<>)
                                                                 (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                    120)
                                                                 ((Prelude..)
                                                                    Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                    Prelude.fromIntegral _v))
                                                       ((Data.Monoid.<>)
                                                          (case
                                                               Lens.Family2.view
                                                                 (Data.ProtoLens.Field.field
                                                                    @"maybe'groups")
                                                                 _x
                                                           of
                                                             Prelude.Nothing -> Data.Monoid.mempty
                                                             (Prelude.Just _v)
                                                               -> (Data.Monoid.<>)
                                                                    (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                       128)
                                                                    ((Prelude..)
                                                                       Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                       Prelude.fromIntegral _v))
                                                          ((Data.Monoid.<>)
                                                             (case
                                                                  Lens.Family2.view
                                                                    (Data.ProtoLens.Field.field
                                                                       @"maybe'buddy")
                                                                    _x
                                                              of
                                                                Prelude.Nothing
                                                                  -> Data.Monoid.mempty
                                                                (Prelude.Just _v)
                                                                  -> (Data.Monoid.<>)
                                                                       (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                          136)
                                                                       ((Prelude..)
                                                                          Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                          Prelude.fromIntegral _v))
                                                             ((Data.Monoid.<>)
                                                                (case
                                                                     Lens.Family2.view
                                                                       (Data.ProtoLens.Field.field
                                                                          @"maybe'flags")
                                                                       _x
                                                                 of
                                                                   Prelude.Nothing
                                                                     -> Data.Monoid.mempty
                                                                   (Prelude.Just _v)
                                                                     -> (Data.Monoid.<>)
                                                                          (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                             144)
                                                                          ((Prelude..)
                                                                             Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                             Prelude.fromIntegral
                                                                             _v))
                                                                ((Data.Monoid.<>)
                                                                   (case
                                                                        Lens.Family2.view
                                                                          (Data.ProtoLens.Field.field
                                                                             @"maybe'tail")
                                                                          _x
                                                                    of
                                                                      Prelude.Nothing
                                                                        -> Data.Monoid.mempty
                                                                      (Prelude.Just _v)
                                                                        -> (Data.Monoid.<>)
                                                                             (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                152)
                                                                             ((Prelude..)
                                                                                Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                Prelude.fromIntegral
                                                                                _v))
                                                                   ((Data.Monoid.<>)
                                                                      (case
                                                                           Lens.Family2.view
                                                                             (Data.ProtoLens.Field.field
                                                                                @"maybe'cr")
                                                                             _x
                                                                       of
                                                                         Prelude.Nothing
                                                                           -> Data.Monoid.mempty
                                                                         (Prelude.Just _v)
                                                                           -> (Data.Monoid.<>)
                                                                                (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                   160)
                                                                                ((Prelude..)
                                                                                   Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                   Prelude.fromIntegral
                                                                                   _v))
                                                                      (Data.ProtoLens.Encoding.Wire.buildFieldSet
                                                                         (Lens.Family2.view
                                                                            Data.ProtoLens.unknownFields
                                                                            _x)))))))))))))))))))))
instance Control.DeepSeq.NFData Ext4MballocAllocFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4MballocAllocFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4MballocAllocFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4MballocAllocFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4MballocAllocFtraceEvent'origLogical x__)
                      (Control.DeepSeq.deepseq
                         (_Ext4MballocAllocFtraceEvent'origStart x__)
                         (Control.DeepSeq.deepseq
                            (_Ext4MballocAllocFtraceEvent'origGroup x__)
                            (Control.DeepSeq.deepseq
                               (_Ext4MballocAllocFtraceEvent'origLen x__)
                               (Control.DeepSeq.deepseq
                                  (_Ext4MballocAllocFtraceEvent'goalLogical x__)
                                  (Control.DeepSeq.deepseq
                                     (_Ext4MballocAllocFtraceEvent'goalStart x__)
                                     (Control.DeepSeq.deepseq
                                        (_Ext4MballocAllocFtraceEvent'goalGroup x__)
                                        (Control.DeepSeq.deepseq
                                           (_Ext4MballocAllocFtraceEvent'goalLen x__)
                                           (Control.DeepSeq.deepseq
                                              (_Ext4MballocAllocFtraceEvent'resultLogical x__)
                                              (Control.DeepSeq.deepseq
                                                 (_Ext4MballocAllocFtraceEvent'resultStart x__)
                                                 (Control.DeepSeq.deepseq
                                                    (_Ext4MballocAllocFtraceEvent'resultGroup x__)
                                                    (Control.DeepSeq.deepseq
                                                       (_Ext4MballocAllocFtraceEvent'resultLen x__)
                                                       (Control.DeepSeq.deepseq
                                                          (_Ext4MballocAllocFtraceEvent'found x__)
                                                          (Control.DeepSeq.deepseq
                                                             (_Ext4MballocAllocFtraceEvent'groups
                                                                x__)
                                                             (Control.DeepSeq.deepseq
                                                                (_Ext4MballocAllocFtraceEvent'buddy
                                                                   x__)
                                                                (Control.DeepSeq.deepseq
                                                                   (_Ext4MballocAllocFtraceEvent'flags
                                                                      x__)
                                                                   (Control.DeepSeq.deepseq
                                                                      (_Ext4MballocAllocFtraceEvent'tail
                                                                         x__)
                                                                      (Control.DeepSeq.deepseq
                                                                         (_Ext4MballocAllocFtraceEvent'cr
                                                                            x__)
                                                                         ()))))))))))))))))))))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4MballocDiscardFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4MballocDiscardFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4MballocDiscardFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4MballocDiscardFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.resultStart' @:: Lens' Ext4MballocDiscardFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'resultStart' @:: Lens' Ext4MballocDiscardFtraceEvent (Prelude.Maybe Data.Int.Int32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.resultGroup' @:: Lens' Ext4MballocDiscardFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'resultGroup' @:: Lens' Ext4MballocDiscardFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.resultLen' @:: Lens' Ext4MballocDiscardFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'resultLen' @:: Lens' Ext4MballocDiscardFtraceEvent (Prelude.Maybe Data.Int.Int32)@ -}
data Ext4MballocDiscardFtraceEvent
  = Ext4MballocDiscardFtraceEvent'_constructor {_Ext4MballocDiscardFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                                _Ext4MballocDiscardFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                                _Ext4MballocDiscardFtraceEvent'resultStart :: !(Prelude.Maybe Data.Int.Int32),
                                                _Ext4MballocDiscardFtraceEvent'resultGroup :: !(Prelude.Maybe Data.Word.Word32),
                                                _Ext4MballocDiscardFtraceEvent'resultLen :: !(Prelude.Maybe Data.Int.Int32),
                                                _Ext4MballocDiscardFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4MballocDiscardFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4MballocDiscardFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocDiscardFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4MballocDiscardFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4MballocDiscardFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocDiscardFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4MballocDiscardFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4MballocDiscardFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocDiscardFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4MballocDiscardFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4MballocDiscardFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocDiscardFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4MballocDiscardFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4MballocDiscardFtraceEvent "resultStart" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocDiscardFtraceEvent'resultStart
           (\ x__ y__
              -> x__ {_Ext4MballocDiscardFtraceEvent'resultStart = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4MballocDiscardFtraceEvent "maybe'resultStart" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocDiscardFtraceEvent'resultStart
           (\ x__ y__
              -> x__ {_Ext4MballocDiscardFtraceEvent'resultStart = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4MballocDiscardFtraceEvent "resultGroup" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocDiscardFtraceEvent'resultGroup
           (\ x__ y__
              -> x__ {_Ext4MballocDiscardFtraceEvent'resultGroup = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4MballocDiscardFtraceEvent "maybe'resultGroup" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocDiscardFtraceEvent'resultGroup
           (\ x__ y__
              -> x__ {_Ext4MballocDiscardFtraceEvent'resultGroup = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4MballocDiscardFtraceEvent "resultLen" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocDiscardFtraceEvent'resultLen
           (\ x__ y__
              -> x__ {_Ext4MballocDiscardFtraceEvent'resultLen = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4MballocDiscardFtraceEvent "maybe'resultLen" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocDiscardFtraceEvent'resultLen
           (\ x__ y__
              -> x__ {_Ext4MballocDiscardFtraceEvent'resultLen = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4MballocDiscardFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4MballocDiscardFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \\GSExt4MballocDiscardFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2!\n\
      \\fresult_start\CAN\ETX \SOH(\ENQR\vresultStart\DC2!\n\
      \\fresult_group\CAN\EOT \SOH(\rR\vresultGroup\DC2\GS\n\
      \\n\
      \result_len\CAN\ENQ \SOH(\ENQR\tresultLen"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4MballocDiscardFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4MballocDiscardFtraceEvent
        resultStart__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "result_start"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'resultStart")) ::
              Data.ProtoLens.FieldDescriptor Ext4MballocDiscardFtraceEvent
        resultGroup__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "result_group"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'resultGroup")) ::
              Data.ProtoLens.FieldDescriptor Ext4MballocDiscardFtraceEvent
        resultLen__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "result_len"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'resultLen")) ::
              Data.ProtoLens.FieldDescriptor Ext4MballocDiscardFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, resultStart__field_descriptor),
           (Data.ProtoLens.Tag 4, resultGroup__field_descriptor),
           (Data.ProtoLens.Tag 5, resultLen__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4MballocDiscardFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__ {_Ext4MballocDiscardFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4MballocDiscardFtraceEvent'_constructor
        {_Ext4MballocDiscardFtraceEvent'dev = Prelude.Nothing,
         _Ext4MballocDiscardFtraceEvent'ino = Prelude.Nothing,
         _Ext4MballocDiscardFtraceEvent'resultStart = Prelude.Nothing,
         _Ext4MballocDiscardFtraceEvent'resultGroup = Prelude.Nothing,
         _Ext4MballocDiscardFtraceEvent'resultLen = Prelude.Nothing,
         _Ext4MballocDiscardFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4MballocDiscardFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4MballocDiscardFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "result_start"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"resultStart") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "result_group"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"resultGroup") y x)
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "result_len"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"resultLen") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "Ext4MballocDiscardFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view
                          (Data.ProtoLens.Field.field @"maybe'resultStart") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view
                             (Data.ProtoLens.Field.field @"maybe'resultGroup") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view
                                (Data.ProtoLens.Field.field @"maybe'resultLen") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral
                                      _v))
                         (Data.ProtoLens.Encoding.Wire.buildFieldSet
                            (Lens.Family2.view Data.ProtoLens.unknownFields _x))))))
instance Control.DeepSeq.NFData Ext4MballocDiscardFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4MballocDiscardFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4MballocDiscardFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4MballocDiscardFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4MballocDiscardFtraceEvent'resultStart x__)
                      (Control.DeepSeq.deepseq
                         (_Ext4MballocDiscardFtraceEvent'resultGroup x__)
                         (Control.DeepSeq.deepseq
                            (_Ext4MballocDiscardFtraceEvent'resultLen x__) ())))))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4MballocFreeFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4MballocFreeFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4MballocFreeFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4MballocFreeFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.resultStart' @:: Lens' Ext4MballocFreeFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'resultStart' @:: Lens' Ext4MballocFreeFtraceEvent (Prelude.Maybe Data.Int.Int32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.resultGroup' @:: Lens' Ext4MballocFreeFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'resultGroup' @:: Lens' Ext4MballocFreeFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.resultLen' @:: Lens' Ext4MballocFreeFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'resultLen' @:: Lens' Ext4MballocFreeFtraceEvent (Prelude.Maybe Data.Int.Int32)@ -}
data Ext4MballocFreeFtraceEvent
  = Ext4MballocFreeFtraceEvent'_constructor {_Ext4MballocFreeFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                             _Ext4MballocFreeFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                             _Ext4MballocFreeFtraceEvent'resultStart :: !(Prelude.Maybe Data.Int.Int32),
                                             _Ext4MballocFreeFtraceEvent'resultGroup :: !(Prelude.Maybe Data.Word.Word32),
                                             _Ext4MballocFreeFtraceEvent'resultLen :: !(Prelude.Maybe Data.Int.Int32),
                                             _Ext4MballocFreeFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4MballocFreeFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4MballocFreeFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocFreeFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4MballocFreeFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4MballocFreeFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocFreeFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4MballocFreeFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4MballocFreeFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocFreeFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4MballocFreeFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4MballocFreeFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocFreeFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4MballocFreeFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4MballocFreeFtraceEvent "resultStart" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocFreeFtraceEvent'resultStart
           (\ x__ y__ -> x__ {_Ext4MballocFreeFtraceEvent'resultStart = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4MballocFreeFtraceEvent "maybe'resultStart" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocFreeFtraceEvent'resultStart
           (\ x__ y__ -> x__ {_Ext4MballocFreeFtraceEvent'resultStart = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4MballocFreeFtraceEvent "resultGroup" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocFreeFtraceEvent'resultGroup
           (\ x__ y__ -> x__ {_Ext4MballocFreeFtraceEvent'resultGroup = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4MballocFreeFtraceEvent "maybe'resultGroup" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocFreeFtraceEvent'resultGroup
           (\ x__ y__ -> x__ {_Ext4MballocFreeFtraceEvent'resultGroup = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4MballocFreeFtraceEvent "resultLen" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocFreeFtraceEvent'resultLen
           (\ x__ y__ -> x__ {_Ext4MballocFreeFtraceEvent'resultLen = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4MballocFreeFtraceEvent "maybe'resultLen" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocFreeFtraceEvent'resultLen
           (\ x__ y__ -> x__ {_Ext4MballocFreeFtraceEvent'resultLen = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4MballocFreeFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4MballocFreeFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \\SUBExt4MballocFreeFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2!\n\
      \\fresult_start\CAN\ETX \SOH(\ENQR\vresultStart\DC2!\n\
      \\fresult_group\CAN\EOT \SOH(\rR\vresultGroup\DC2\GS\n\
      \\n\
      \result_len\CAN\ENQ \SOH(\ENQR\tresultLen"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4MballocFreeFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4MballocFreeFtraceEvent
        resultStart__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "result_start"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'resultStart")) ::
              Data.ProtoLens.FieldDescriptor Ext4MballocFreeFtraceEvent
        resultGroup__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "result_group"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'resultGroup")) ::
              Data.ProtoLens.FieldDescriptor Ext4MballocFreeFtraceEvent
        resultLen__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "result_len"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'resultLen")) ::
              Data.ProtoLens.FieldDescriptor Ext4MballocFreeFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, resultStart__field_descriptor),
           (Data.ProtoLens.Tag 4, resultGroup__field_descriptor),
           (Data.ProtoLens.Tag 5, resultLen__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4MballocFreeFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__ {_Ext4MballocFreeFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4MballocFreeFtraceEvent'_constructor
        {_Ext4MballocFreeFtraceEvent'dev = Prelude.Nothing,
         _Ext4MballocFreeFtraceEvent'ino = Prelude.Nothing,
         _Ext4MballocFreeFtraceEvent'resultStart = Prelude.Nothing,
         _Ext4MballocFreeFtraceEvent'resultGroup = Prelude.Nothing,
         _Ext4MballocFreeFtraceEvent'resultLen = Prelude.Nothing,
         _Ext4MballocFreeFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4MballocFreeFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4MballocFreeFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "result_start"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"resultStart") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "result_group"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"resultGroup") y x)
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "result_len"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"resultLen") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "Ext4MballocFreeFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view
                          (Data.ProtoLens.Field.field @"maybe'resultStart") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view
                             (Data.ProtoLens.Field.field @"maybe'resultGroup") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view
                                (Data.ProtoLens.Field.field @"maybe'resultLen") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral
                                      _v))
                         (Data.ProtoLens.Encoding.Wire.buildFieldSet
                            (Lens.Family2.view Data.ProtoLens.unknownFields _x))))))
instance Control.DeepSeq.NFData Ext4MballocFreeFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4MballocFreeFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4MballocFreeFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4MballocFreeFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4MballocFreeFtraceEvent'resultStart x__)
                      (Control.DeepSeq.deepseq
                         (_Ext4MballocFreeFtraceEvent'resultGroup x__)
                         (Control.DeepSeq.deepseq
                            (_Ext4MballocFreeFtraceEvent'resultLen x__) ())))))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4MballocPreallocFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4MballocPreallocFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4MballocPreallocFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4MballocPreallocFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.origLogical' @:: Lens' Ext4MballocPreallocFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'origLogical' @:: Lens' Ext4MballocPreallocFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.origStart' @:: Lens' Ext4MballocPreallocFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'origStart' @:: Lens' Ext4MballocPreallocFtraceEvent (Prelude.Maybe Data.Int.Int32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.origGroup' @:: Lens' Ext4MballocPreallocFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'origGroup' @:: Lens' Ext4MballocPreallocFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.origLen' @:: Lens' Ext4MballocPreallocFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'origLen' @:: Lens' Ext4MballocPreallocFtraceEvent (Prelude.Maybe Data.Int.Int32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.resultLogical' @:: Lens' Ext4MballocPreallocFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'resultLogical' @:: Lens' Ext4MballocPreallocFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.resultStart' @:: Lens' Ext4MballocPreallocFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'resultStart' @:: Lens' Ext4MballocPreallocFtraceEvent (Prelude.Maybe Data.Int.Int32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.resultGroup' @:: Lens' Ext4MballocPreallocFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'resultGroup' @:: Lens' Ext4MballocPreallocFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.resultLen' @:: Lens' Ext4MballocPreallocFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'resultLen' @:: Lens' Ext4MballocPreallocFtraceEvent (Prelude.Maybe Data.Int.Int32)@ -}
data Ext4MballocPreallocFtraceEvent
  = Ext4MballocPreallocFtraceEvent'_constructor {_Ext4MballocPreallocFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                                 _Ext4MballocPreallocFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                                 _Ext4MballocPreallocFtraceEvent'origLogical :: !(Prelude.Maybe Data.Word.Word32),
                                                 _Ext4MballocPreallocFtraceEvent'origStart :: !(Prelude.Maybe Data.Int.Int32),
                                                 _Ext4MballocPreallocFtraceEvent'origGroup :: !(Prelude.Maybe Data.Word.Word32),
                                                 _Ext4MballocPreallocFtraceEvent'origLen :: !(Prelude.Maybe Data.Int.Int32),
                                                 _Ext4MballocPreallocFtraceEvent'resultLogical :: !(Prelude.Maybe Data.Word.Word32),
                                                 _Ext4MballocPreallocFtraceEvent'resultStart :: !(Prelude.Maybe Data.Int.Int32),
                                                 _Ext4MballocPreallocFtraceEvent'resultGroup :: !(Prelude.Maybe Data.Word.Word32),
                                                 _Ext4MballocPreallocFtraceEvent'resultLen :: !(Prelude.Maybe Data.Int.Int32),
                                                 _Ext4MballocPreallocFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4MballocPreallocFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4MballocPreallocFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocPreallocFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4MballocPreallocFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4MballocPreallocFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocPreallocFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4MballocPreallocFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4MballocPreallocFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocPreallocFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4MballocPreallocFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4MballocPreallocFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocPreallocFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4MballocPreallocFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4MballocPreallocFtraceEvent "origLogical" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocPreallocFtraceEvent'origLogical
           (\ x__ y__
              -> x__ {_Ext4MballocPreallocFtraceEvent'origLogical = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4MballocPreallocFtraceEvent "maybe'origLogical" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocPreallocFtraceEvent'origLogical
           (\ x__ y__
              -> x__ {_Ext4MballocPreallocFtraceEvent'origLogical = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4MballocPreallocFtraceEvent "origStart" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocPreallocFtraceEvent'origStart
           (\ x__ y__
              -> x__ {_Ext4MballocPreallocFtraceEvent'origStart = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4MballocPreallocFtraceEvent "maybe'origStart" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocPreallocFtraceEvent'origStart
           (\ x__ y__
              -> x__ {_Ext4MballocPreallocFtraceEvent'origStart = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4MballocPreallocFtraceEvent "origGroup" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocPreallocFtraceEvent'origGroup
           (\ x__ y__
              -> x__ {_Ext4MballocPreallocFtraceEvent'origGroup = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4MballocPreallocFtraceEvent "maybe'origGroup" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocPreallocFtraceEvent'origGroup
           (\ x__ y__
              -> x__ {_Ext4MballocPreallocFtraceEvent'origGroup = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4MballocPreallocFtraceEvent "origLen" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocPreallocFtraceEvent'origLen
           (\ x__ y__ -> x__ {_Ext4MballocPreallocFtraceEvent'origLen = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4MballocPreallocFtraceEvent "maybe'origLen" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocPreallocFtraceEvent'origLen
           (\ x__ y__ -> x__ {_Ext4MballocPreallocFtraceEvent'origLen = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4MballocPreallocFtraceEvent "resultLogical" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocPreallocFtraceEvent'resultLogical
           (\ x__ y__
              -> x__ {_Ext4MballocPreallocFtraceEvent'resultLogical = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4MballocPreallocFtraceEvent "maybe'resultLogical" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocPreallocFtraceEvent'resultLogical
           (\ x__ y__
              -> x__ {_Ext4MballocPreallocFtraceEvent'resultLogical = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4MballocPreallocFtraceEvent "resultStart" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocPreallocFtraceEvent'resultStart
           (\ x__ y__
              -> x__ {_Ext4MballocPreallocFtraceEvent'resultStart = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4MballocPreallocFtraceEvent "maybe'resultStart" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocPreallocFtraceEvent'resultStart
           (\ x__ y__
              -> x__ {_Ext4MballocPreallocFtraceEvent'resultStart = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4MballocPreallocFtraceEvent "resultGroup" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocPreallocFtraceEvent'resultGroup
           (\ x__ y__
              -> x__ {_Ext4MballocPreallocFtraceEvent'resultGroup = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4MballocPreallocFtraceEvent "maybe'resultGroup" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocPreallocFtraceEvent'resultGroup
           (\ x__ y__
              -> x__ {_Ext4MballocPreallocFtraceEvent'resultGroup = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4MballocPreallocFtraceEvent "resultLen" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocPreallocFtraceEvent'resultLen
           (\ x__ y__
              -> x__ {_Ext4MballocPreallocFtraceEvent'resultLen = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4MballocPreallocFtraceEvent "maybe'resultLen" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4MballocPreallocFtraceEvent'resultLen
           (\ x__ y__
              -> x__ {_Ext4MballocPreallocFtraceEvent'resultLen = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4MballocPreallocFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4MballocPreallocFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \\RSExt4MballocPreallocFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2!\n\
      \\forig_logical\CAN\ETX \SOH(\rR\vorigLogical\DC2\GS\n\
      \\n\
      \orig_start\CAN\EOT \SOH(\ENQR\torigStart\DC2\GS\n\
      \\n\
      \orig_group\CAN\ENQ \SOH(\rR\torigGroup\DC2\EM\n\
      \\borig_len\CAN\ACK \SOH(\ENQR\aorigLen\DC2%\n\
      \\SOresult_logical\CAN\a \SOH(\rR\rresultLogical\DC2!\n\
      \\fresult_start\CAN\b \SOH(\ENQR\vresultStart\DC2!\n\
      \\fresult_group\CAN\t \SOH(\rR\vresultGroup\DC2\GS\n\
      \\n\
      \result_len\CAN\n\
      \ \SOH(\ENQR\tresultLen"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4MballocPreallocFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4MballocPreallocFtraceEvent
        origLogical__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "orig_logical"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'origLogical")) ::
              Data.ProtoLens.FieldDescriptor Ext4MballocPreallocFtraceEvent
        origStart__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "orig_start"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'origStart")) ::
              Data.ProtoLens.FieldDescriptor Ext4MballocPreallocFtraceEvent
        origGroup__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "orig_group"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'origGroup")) ::
              Data.ProtoLens.FieldDescriptor Ext4MballocPreallocFtraceEvent
        origLen__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "orig_len"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'origLen")) ::
              Data.ProtoLens.FieldDescriptor Ext4MballocPreallocFtraceEvent
        resultLogical__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "result_logical"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'resultLogical")) ::
              Data.ProtoLens.FieldDescriptor Ext4MballocPreallocFtraceEvent
        resultStart__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "result_start"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'resultStart")) ::
              Data.ProtoLens.FieldDescriptor Ext4MballocPreallocFtraceEvent
        resultGroup__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "result_group"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'resultGroup")) ::
              Data.ProtoLens.FieldDescriptor Ext4MballocPreallocFtraceEvent
        resultLen__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "result_len"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'resultLen")) ::
              Data.ProtoLens.FieldDescriptor Ext4MballocPreallocFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, origLogical__field_descriptor),
           (Data.ProtoLens.Tag 4, origStart__field_descriptor),
           (Data.ProtoLens.Tag 5, origGroup__field_descriptor),
           (Data.ProtoLens.Tag 6, origLen__field_descriptor),
           (Data.ProtoLens.Tag 7, resultLogical__field_descriptor),
           (Data.ProtoLens.Tag 8, resultStart__field_descriptor),
           (Data.ProtoLens.Tag 9, resultGroup__field_descriptor),
           (Data.ProtoLens.Tag 10, resultLen__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4MballocPreallocFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__ {_Ext4MballocPreallocFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4MballocPreallocFtraceEvent'_constructor
        {_Ext4MballocPreallocFtraceEvent'dev = Prelude.Nothing,
         _Ext4MballocPreallocFtraceEvent'ino = Prelude.Nothing,
         _Ext4MballocPreallocFtraceEvent'origLogical = Prelude.Nothing,
         _Ext4MballocPreallocFtraceEvent'origStart = Prelude.Nothing,
         _Ext4MballocPreallocFtraceEvent'origGroup = Prelude.Nothing,
         _Ext4MballocPreallocFtraceEvent'origLen = Prelude.Nothing,
         _Ext4MballocPreallocFtraceEvent'resultLogical = Prelude.Nothing,
         _Ext4MballocPreallocFtraceEvent'resultStart = Prelude.Nothing,
         _Ext4MballocPreallocFtraceEvent'resultGroup = Prelude.Nothing,
         _Ext4MballocPreallocFtraceEvent'resultLen = Prelude.Nothing,
         _Ext4MballocPreallocFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4MballocPreallocFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4MballocPreallocFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "orig_logical"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"origLogical") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "orig_start"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"origStart") y x)
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "orig_group"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"origGroup") y x)
                        48
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "orig_len"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"origLen") y x)
                        56
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "result_logical"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"resultLogical") y x)
                        64
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "result_start"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"resultStart") y x)
                        72
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "result_group"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"resultGroup") y x)
                        80
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "result_len"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"resultLen") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage)
          "Ext4MballocPreallocFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view
                          (Data.ProtoLens.Field.field @"maybe'origLogical") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view
                             (Data.ProtoLens.Field.field @"maybe'origStart") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view
                                (Data.ProtoLens.Field.field @"maybe'origGroup") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral
                                      _v))
                         ((Data.Monoid.<>)
                            (case
                                 Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'origLen") _x
                             of
                               Prelude.Nothing -> Data.Monoid.mempty
                               (Prelude.Just _v)
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 48)
                                      ((Prelude..)
                                         Data.ProtoLens.Encoding.Bytes.putVarInt
                                         Prelude.fromIntegral _v))
                            ((Data.Monoid.<>)
                               (case
                                    Lens.Family2.view
                                      (Data.ProtoLens.Field.field @"maybe'resultLogical") _x
                                of
                                  Prelude.Nothing -> Data.Monoid.mempty
                                  (Prelude.Just _v)
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt 56)
                                         ((Prelude..)
                                            Data.ProtoLens.Encoding.Bytes.putVarInt
                                            Prelude.fromIntegral _v))
                               ((Data.Monoid.<>)
                                  (case
                                       Lens.Family2.view
                                         (Data.ProtoLens.Field.field @"maybe'resultStart") _x
                                   of
                                     Prelude.Nothing -> Data.Monoid.mempty
                                     (Prelude.Just _v)
                                       -> (Data.Monoid.<>)
                                            (Data.ProtoLens.Encoding.Bytes.putVarInt 64)
                                            ((Prelude..)
                                               Data.ProtoLens.Encoding.Bytes.putVarInt
                                               Prelude.fromIntegral _v))
                                  ((Data.Monoid.<>)
                                     (case
                                          Lens.Family2.view
                                            (Data.ProtoLens.Field.field @"maybe'resultGroup") _x
                                      of
                                        Prelude.Nothing -> Data.Monoid.mempty
                                        (Prelude.Just _v)
                                          -> (Data.Monoid.<>)
                                               (Data.ProtoLens.Encoding.Bytes.putVarInt 72)
                                               ((Prelude..)
                                                  Data.ProtoLens.Encoding.Bytes.putVarInt
                                                  Prelude.fromIntegral _v))
                                     ((Data.Monoid.<>)
                                        (case
                                             Lens.Family2.view
                                               (Data.ProtoLens.Field.field @"maybe'resultLen") _x
                                         of
                                           Prelude.Nothing -> Data.Monoid.mempty
                                           (Prelude.Just _v)
                                             -> (Data.Monoid.<>)
                                                  (Data.ProtoLens.Encoding.Bytes.putVarInt 80)
                                                  ((Prelude..)
                                                     Data.ProtoLens.Encoding.Bytes.putVarInt
                                                     Prelude.fromIntegral _v))
                                        (Data.ProtoLens.Encoding.Wire.buildFieldSet
                                           (Lens.Family2.view
                                              Data.ProtoLens.unknownFields _x)))))))))))
instance Control.DeepSeq.NFData Ext4MballocPreallocFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4MballocPreallocFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4MballocPreallocFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4MballocPreallocFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4MballocPreallocFtraceEvent'origLogical x__)
                      (Control.DeepSeq.deepseq
                         (_Ext4MballocPreallocFtraceEvent'origStart x__)
                         (Control.DeepSeq.deepseq
                            (_Ext4MballocPreallocFtraceEvent'origGroup x__)
                            (Control.DeepSeq.deepseq
                               (_Ext4MballocPreallocFtraceEvent'origLen x__)
                               (Control.DeepSeq.deepseq
                                  (_Ext4MballocPreallocFtraceEvent'resultLogical x__)
                                  (Control.DeepSeq.deepseq
                                     (_Ext4MballocPreallocFtraceEvent'resultStart x__)
                                     (Control.DeepSeq.deepseq
                                        (_Ext4MballocPreallocFtraceEvent'resultGroup x__)
                                        (Control.DeepSeq.deepseq
                                           (_Ext4MballocPreallocFtraceEvent'resultLen x__)
                                           ()))))))))))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4OtherInodeUpdateTimeFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4OtherInodeUpdateTimeFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4OtherInodeUpdateTimeFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4OtherInodeUpdateTimeFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.origIno' @:: Lens' Ext4OtherInodeUpdateTimeFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'origIno' @:: Lens' Ext4OtherInodeUpdateTimeFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.uid' @:: Lens' Ext4OtherInodeUpdateTimeFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'uid' @:: Lens' Ext4OtherInodeUpdateTimeFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.gid' @:: Lens' Ext4OtherInodeUpdateTimeFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'gid' @:: Lens' Ext4OtherInodeUpdateTimeFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.mode' @:: Lens' Ext4OtherInodeUpdateTimeFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'mode' @:: Lens' Ext4OtherInodeUpdateTimeFtraceEvent (Prelude.Maybe Data.Word.Word32)@ -}
data Ext4OtherInodeUpdateTimeFtraceEvent
  = Ext4OtherInodeUpdateTimeFtraceEvent'_constructor {_Ext4OtherInodeUpdateTimeFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                                      _Ext4OtherInodeUpdateTimeFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                                      _Ext4OtherInodeUpdateTimeFtraceEvent'origIno :: !(Prelude.Maybe Data.Word.Word64),
                                                      _Ext4OtherInodeUpdateTimeFtraceEvent'uid :: !(Prelude.Maybe Data.Word.Word32),
                                                      _Ext4OtherInodeUpdateTimeFtraceEvent'gid :: !(Prelude.Maybe Data.Word.Word32),
                                                      _Ext4OtherInodeUpdateTimeFtraceEvent'mode :: !(Prelude.Maybe Data.Word.Word32),
                                                      _Ext4OtherInodeUpdateTimeFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4OtherInodeUpdateTimeFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4OtherInodeUpdateTimeFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4OtherInodeUpdateTimeFtraceEvent'dev
           (\ x__ y__
              -> x__ {_Ext4OtherInodeUpdateTimeFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4OtherInodeUpdateTimeFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4OtherInodeUpdateTimeFtraceEvent'dev
           (\ x__ y__
              -> x__ {_Ext4OtherInodeUpdateTimeFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4OtherInodeUpdateTimeFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4OtherInodeUpdateTimeFtraceEvent'ino
           (\ x__ y__
              -> x__ {_Ext4OtherInodeUpdateTimeFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4OtherInodeUpdateTimeFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4OtherInodeUpdateTimeFtraceEvent'ino
           (\ x__ y__
              -> x__ {_Ext4OtherInodeUpdateTimeFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4OtherInodeUpdateTimeFtraceEvent "origIno" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4OtherInodeUpdateTimeFtraceEvent'origIno
           (\ x__ y__
              -> x__ {_Ext4OtherInodeUpdateTimeFtraceEvent'origIno = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4OtherInodeUpdateTimeFtraceEvent "maybe'origIno" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4OtherInodeUpdateTimeFtraceEvent'origIno
           (\ x__ y__
              -> x__ {_Ext4OtherInodeUpdateTimeFtraceEvent'origIno = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4OtherInodeUpdateTimeFtraceEvent "uid" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4OtherInodeUpdateTimeFtraceEvent'uid
           (\ x__ y__
              -> x__ {_Ext4OtherInodeUpdateTimeFtraceEvent'uid = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4OtherInodeUpdateTimeFtraceEvent "maybe'uid" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4OtherInodeUpdateTimeFtraceEvent'uid
           (\ x__ y__
              -> x__ {_Ext4OtherInodeUpdateTimeFtraceEvent'uid = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4OtherInodeUpdateTimeFtraceEvent "gid" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4OtherInodeUpdateTimeFtraceEvent'gid
           (\ x__ y__
              -> x__ {_Ext4OtherInodeUpdateTimeFtraceEvent'gid = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4OtherInodeUpdateTimeFtraceEvent "maybe'gid" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4OtherInodeUpdateTimeFtraceEvent'gid
           (\ x__ y__
              -> x__ {_Ext4OtherInodeUpdateTimeFtraceEvent'gid = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4OtherInodeUpdateTimeFtraceEvent "mode" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4OtherInodeUpdateTimeFtraceEvent'mode
           (\ x__ y__
              -> x__ {_Ext4OtherInodeUpdateTimeFtraceEvent'mode = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4OtherInodeUpdateTimeFtraceEvent "maybe'mode" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4OtherInodeUpdateTimeFtraceEvent'mode
           (\ x__ y__
              -> x__ {_Ext4OtherInodeUpdateTimeFtraceEvent'mode = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4OtherInodeUpdateTimeFtraceEvent where
  messageName _
    = Data.Text.pack
        "perfetto.protos.Ext4OtherInodeUpdateTimeFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \#Ext4OtherInodeUpdateTimeFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\EM\n\
      \\borig_ino\CAN\ETX \SOH(\EOTR\aorigIno\DC2\DLE\n\
      \\ETXuid\CAN\EOT \SOH(\rR\ETXuid\DC2\DLE\n\
      \\ETXgid\CAN\ENQ \SOH(\rR\ETXgid\DC2\DC2\n\
      \\EOTmode\CAN\ACK \SOH(\rR\EOTmode"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4OtherInodeUpdateTimeFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4OtherInodeUpdateTimeFtraceEvent
        origIno__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "orig_ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'origIno")) ::
              Data.ProtoLens.FieldDescriptor Ext4OtherInodeUpdateTimeFtraceEvent
        uid__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "uid"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'uid")) ::
              Data.ProtoLens.FieldDescriptor Ext4OtherInodeUpdateTimeFtraceEvent
        gid__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "gid"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'gid")) ::
              Data.ProtoLens.FieldDescriptor Ext4OtherInodeUpdateTimeFtraceEvent
        mode__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "mode"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'mode")) ::
              Data.ProtoLens.FieldDescriptor Ext4OtherInodeUpdateTimeFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, origIno__field_descriptor),
           (Data.ProtoLens.Tag 4, uid__field_descriptor),
           (Data.ProtoLens.Tag 5, gid__field_descriptor),
           (Data.ProtoLens.Tag 6, mode__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4OtherInodeUpdateTimeFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__ {_Ext4OtherInodeUpdateTimeFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4OtherInodeUpdateTimeFtraceEvent'_constructor
        {_Ext4OtherInodeUpdateTimeFtraceEvent'dev = Prelude.Nothing,
         _Ext4OtherInodeUpdateTimeFtraceEvent'ino = Prelude.Nothing,
         _Ext4OtherInodeUpdateTimeFtraceEvent'origIno = Prelude.Nothing,
         _Ext4OtherInodeUpdateTimeFtraceEvent'uid = Prelude.Nothing,
         _Ext4OtherInodeUpdateTimeFtraceEvent'gid = Prelude.Nothing,
         _Ext4OtherInodeUpdateTimeFtraceEvent'mode = Prelude.Nothing,
         _Ext4OtherInodeUpdateTimeFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4OtherInodeUpdateTimeFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4OtherInodeUpdateTimeFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "orig_ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"origIno") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "uid"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"uid") y x)
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "gid"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"gid") y x)
                        48
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "mode"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"mode") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage)
          "Ext4OtherInodeUpdateTimeFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'origIno") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'uid") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'gid") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral
                                      _v))
                         ((Data.Monoid.<>)
                            (case
                                 Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'mode") _x
                             of
                               Prelude.Nothing -> Data.Monoid.mempty
                               (Prelude.Just _v)
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 48)
                                      ((Prelude..)
                                         Data.ProtoLens.Encoding.Bytes.putVarInt
                                         Prelude.fromIntegral _v))
                            (Data.ProtoLens.Encoding.Wire.buildFieldSet
                               (Lens.Family2.view Data.ProtoLens.unknownFields _x)))))))
instance Control.DeepSeq.NFData Ext4OtherInodeUpdateTimeFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4OtherInodeUpdateTimeFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4OtherInodeUpdateTimeFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4OtherInodeUpdateTimeFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4OtherInodeUpdateTimeFtraceEvent'origIno x__)
                      (Control.DeepSeq.deepseq
                         (_Ext4OtherInodeUpdateTimeFtraceEvent'uid x__)
                         (Control.DeepSeq.deepseq
                            (_Ext4OtherInodeUpdateTimeFtraceEvent'gid x__)
                            (Control.DeepSeq.deepseq
                               (_Ext4OtherInodeUpdateTimeFtraceEvent'mode x__) ()))))))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4PunchHoleFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4PunchHoleFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4PunchHoleFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4PunchHoleFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.offset' @:: Lens' Ext4PunchHoleFtraceEvent Data.Int.Int64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'offset' @:: Lens' Ext4PunchHoleFtraceEvent (Prelude.Maybe Data.Int.Int64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.len' @:: Lens' Ext4PunchHoleFtraceEvent Data.Int.Int64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'len' @:: Lens' Ext4PunchHoleFtraceEvent (Prelude.Maybe Data.Int.Int64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.mode' @:: Lens' Ext4PunchHoleFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'mode' @:: Lens' Ext4PunchHoleFtraceEvent (Prelude.Maybe Data.Int.Int32)@ -}
data Ext4PunchHoleFtraceEvent
  = Ext4PunchHoleFtraceEvent'_constructor {_Ext4PunchHoleFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                           _Ext4PunchHoleFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                           _Ext4PunchHoleFtraceEvent'offset :: !(Prelude.Maybe Data.Int.Int64),
                                           _Ext4PunchHoleFtraceEvent'len :: !(Prelude.Maybe Data.Int.Int64),
                                           _Ext4PunchHoleFtraceEvent'mode :: !(Prelude.Maybe Data.Int.Int32),
                                           _Ext4PunchHoleFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4PunchHoleFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4PunchHoleFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4PunchHoleFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4PunchHoleFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4PunchHoleFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4PunchHoleFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4PunchHoleFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4PunchHoleFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4PunchHoleFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4PunchHoleFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4PunchHoleFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4PunchHoleFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4PunchHoleFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4PunchHoleFtraceEvent "offset" Data.Int.Int64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4PunchHoleFtraceEvent'offset
           (\ x__ y__ -> x__ {_Ext4PunchHoleFtraceEvent'offset = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4PunchHoleFtraceEvent "maybe'offset" (Prelude.Maybe Data.Int.Int64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4PunchHoleFtraceEvent'offset
           (\ x__ y__ -> x__ {_Ext4PunchHoleFtraceEvent'offset = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4PunchHoleFtraceEvent "len" Data.Int.Int64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4PunchHoleFtraceEvent'len
           (\ x__ y__ -> x__ {_Ext4PunchHoleFtraceEvent'len = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4PunchHoleFtraceEvent "maybe'len" (Prelude.Maybe Data.Int.Int64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4PunchHoleFtraceEvent'len
           (\ x__ y__ -> x__ {_Ext4PunchHoleFtraceEvent'len = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4PunchHoleFtraceEvent "mode" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4PunchHoleFtraceEvent'mode
           (\ x__ y__ -> x__ {_Ext4PunchHoleFtraceEvent'mode = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4PunchHoleFtraceEvent "maybe'mode" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4PunchHoleFtraceEvent'mode
           (\ x__ y__ -> x__ {_Ext4PunchHoleFtraceEvent'mode = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4PunchHoleFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4PunchHoleFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \\CANExt4PunchHoleFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\SYN\n\
      \\ACKoffset\CAN\ETX \SOH(\ETXR\ACKoffset\DC2\DLE\n\
      \\ETXlen\CAN\EOT \SOH(\ETXR\ETXlen\DC2\DC2\n\
      \\EOTmode\CAN\ENQ \SOH(\ENQR\EOTmode"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4PunchHoleFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4PunchHoleFtraceEvent
        offset__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "offset"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'offset")) ::
              Data.ProtoLens.FieldDescriptor Ext4PunchHoleFtraceEvent
        len__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "len"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'len")) ::
              Data.ProtoLens.FieldDescriptor Ext4PunchHoleFtraceEvent
        mode__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "mode"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'mode")) ::
              Data.ProtoLens.FieldDescriptor Ext4PunchHoleFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, offset__field_descriptor),
           (Data.ProtoLens.Tag 4, len__field_descriptor),
           (Data.ProtoLens.Tag 5, mode__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4PunchHoleFtraceEvent'_unknownFields
        (\ x__ y__ -> x__ {_Ext4PunchHoleFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4PunchHoleFtraceEvent'_constructor
        {_Ext4PunchHoleFtraceEvent'dev = Prelude.Nothing,
         _Ext4PunchHoleFtraceEvent'ino = Prelude.Nothing,
         _Ext4PunchHoleFtraceEvent'offset = Prelude.Nothing,
         _Ext4PunchHoleFtraceEvent'len = Prelude.Nothing,
         _Ext4PunchHoleFtraceEvent'mode = Prelude.Nothing,
         _Ext4PunchHoleFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4PunchHoleFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4PunchHoleFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "offset"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"offset") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "len"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"len") y x)
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "mode"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"mode") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "Ext4PunchHoleFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'offset") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'len") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'mode") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral
                                      _v))
                         (Data.ProtoLens.Encoding.Wire.buildFieldSet
                            (Lens.Family2.view Data.ProtoLens.unknownFields _x))))))
instance Control.DeepSeq.NFData Ext4PunchHoleFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4PunchHoleFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4PunchHoleFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4PunchHoleFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4PunchHoleFtraceEvent'offset x__)
                      (Control.DeepSeq.deepseq
                         (_Ext4PunchHoleFtraceEvent'len x__)
                         (Control.DeepSeq.deepseq
                            (_Ext4PunchHoleFtraceEvent'mode x__) ())))))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4ReadBlockBitmapLoadFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4ReadBlockBitmapLoadFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.group' @:: Lens' Ext4ReadBlockBitmapLoadFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'group' @:: Lens' Ext4ReadBlockBitmapLoadFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.prefetch' @:: Lens' Ext4ReadBlockBitmapLoadFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'prefetch' @:: Lens' Ext4ReadBlockBitmapLoadFtraceEvent (Prelude.Maybe Data.Word.Word32)@ -}
data Ext4ReadBlockBitmapLoadFtraceEvent
  = Ext4ReadBlockBitmapLoadFtraceEvent'_constructor {_Ext4ReadBlockBitmapLoadFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                                     _Ext4ReadBlockBitmapLoadFtraceEvent'group :: !(Prelude.Maybe Data.Word.Word32),
                                                     _Ext4ReadBlockBitmapLoadFtraceEvent'prefetch :: !(Prelude.Maybe Data.Word.Word32),
                                                     _Ext4ReadBlockBitmapLoadFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4ReadBlockBitmapLoadFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4ReadBlockBitmapLoadFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ReadBlockBitmapLoadFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4ReadBlockBitmapLoadFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ReadBlockBitmapLoadFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ReadBlockBitmapLoadFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4ReadBlockBitmapLoadFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ReadBlockBitmapLoadFtraceEvent "group" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ReadBlockBitmapLoadFtraceEvent'group
           (\ x__ y__
              -> x__ {_Ext4ReadBlockBitmapLoadFtraceEvent'group = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ReadBlockBitmapLoadFtraceEvent "maybe'group" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ReadBlockBitmapLoadFtraceEvent'group
           (\ x__ y__
              -> x__ {_Ext4ReadBlockBitmapLoadFtraceEvent'group = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ReadBlockBitmapLoadFtraceEvent "prefetch" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ReadBlockBitmapLoadFtraceEvent'prefetch
           (\ x__ y__
              -> x__ {_Ext4ReadBlockBitmapLoadFtraceEvent'prefetch = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ReadBlockBitmapLoadFtraceEvent "maybe'prefetch" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ReadBlockBitmapLoadFtraceEvent'prefetch
           (\ x__ y__
              -> x__ {_Ext4ReadBlockBitmapLoadFtraceEvent'prefetch = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4ReadBlockBitmapLoadFtraceEvent where
  messageName _
    = Data.Text.pack
        "perfetto.protos.Ext4ReadBlockBitmapLoadFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \\"Ext4ReadBlockBitmapLoadFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DC4\n\
      \\ENQgroup\CAN\STX \SOH(\rR\ENQgroup\DC2\SUB\n\
      \\bprefetch\CAN\ETX \SOH(\rR\bprefetch"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4ReadBlockBitmapLoadFtraceEvent
        group__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "group"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'group")) ::
              Data.ProtoLens.FieldDescriptor Ext4ReadBlockBitmapLoadFtraceEvent
        prefetch__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "prefetch"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'prefetch")) ::
              Data.ProtoLens.FieldDescriptor Ext4ReadBlockBitmapLoadFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, group__field_descriptor),
           (Data.ProtoLens.Tag 3, prefetch__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4ReadBlockBitmapLoadFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__ {_Ext4ReadBlockBitmapLoadFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4ReadBlockBitmapLoadFtraceEvent'_constructor
        {_Ext4ReadBlockBitmapLoadFtraceEvent'dev = Prelude.Nothing,
         _Ext4ReadBlockBitmapLoadFtraceEvent'group = Prelude.Nothing,
         _Ext4ReadBlockBitmapLoadFtraceEvent'prefetch = Prelude.Nothing,
         _Ext4ReadBlockBitmapLoadFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4ReadBlockBitmapLoadFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4ReadBlockBitmapLoadFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "group"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"group") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "prefetch"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"prefetch") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage)
          "Ext4ReadBlockBitmapLoadFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'group") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          ((Prelude..)
                             Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'prefetch") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   (Data.ProtoLens.Encoding.Wire.buildFieldSet
                      (Lens.Family2.view Data.ProtoLens.unknownFields _x))))
instance Control.DeepSeq.NFData Ext4ReadBlockBitmapLoadFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4ReadBlockBitmapLoadFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4ReadBlockBitmapLoadFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4ReadBlockBitmapLoadFtraceEvent'group x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4ReadBlockBitmapLoadFtraceEvent'prefetch x__) ())))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4ReadpageFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4ReadpageFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4ReadpageFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4ReadpageFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.index' @:: Lens' Ext4ReadpageFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'index' @:: Lens' Ext4ReadpageFtraceEvent (Prelude.Maybe Data.Word.Word64)@ -}
data Ext4ReadpageFtraceEvent
  = Ext4ReadpageFtraceEvent'_constructor {_Ext4ReadpageFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                          _Ext4ReadpageFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                          _Ext4ReadpageFtraceEvent'index :: !(Prelude.Maybe Data.Word.Word64),
                                          _Ext4ReadpageFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4ReadpageFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4ReadpageFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ReadpageFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4ReadpageFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ReadpageFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ReadpageFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4ReadpageFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ReadpageFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ReadpageFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4ReadpageFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ReadpageFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ReadpageFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4ReadpageFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ReadpageFtraceEvent "index" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ReadpageFtraceEvent'index
           (\ x__ y__ -> x__ {_Ext4ReadpageFtraceEvent'index = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ReadpageFtraceEvent "maybe'index" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ReadpageFtraceEvent'index
           (\ x__ y__ -> x__ {_Ext4ReadpageFtraceEvent'index = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4ReadpageFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4ReadpageFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \\ETBExt4ReadpageFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DC4\n\
      \\ENQindex\CAN\ETX \SOH(\EOTR\ENQindex"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4ReadpageFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4ReadpageFtraceEvent
        index__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "index"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'index")) ::
              Data.ProtoLens.FieldDescriptor Ext4ReadpageFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, index__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4ReadpageFtraceEvent'_unknownFields
        (\ x__ y__ -> x__ {_Ext4ReadpageFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4ReadpageFtraceEvent'_constructor
        {_Ext4ReadpageFtraceEvent'dev = Prelude.Nothing,
         _Ext4ReadpageFtraceEvent'ino = Prelude.Nothing,
         _Ext4ReadpageFtraceEvent'index = Prelude.Nothing,
         _Ext4ReadpageFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4ReadpageFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4ReadpageFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "index"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"index") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "Ext4ReadpageFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'index") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                   (Data.ProtoLens.Encoding.Wire.buildFieldSet
                      (Lens.Family2.view Data.ProtoLens.unknownFields _x))))
instance Control.DeepSeq.NFData Ext4ReadpageFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4ReadpageFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4ReadpageFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4ReadpageFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq (_Ext4ReadpageFtraceEvent'index x__) ())))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4ReleasepageFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4ReleasepageFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4ReleasepageFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4ReleasepageFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.index' @:: Lens' Ext4ReleasepageFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'index' @:: Lens' Ext4ReleasepageFtraceEvent (Prelude.Maybe Data.Word.Word64)@ -}
data Ext4ReleasepageFtraceEvent
  = Ext4ReleasepageFtraceEvent'_constructor {_Ext4ReleasepageFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                             _Ext4ReleasepageFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                             _Ext4ReleasepageFtraceEvent'index :: !(Prelude.Maybe Data.Word.Word64),
                                             _Ext4ReleasepageFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4ReleasepageFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4ReleasepageFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ReleasepageFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4ReleasepageFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ReleasepageFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ReleasepageFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4ReleasepageFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ReleasepageFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ReleasepageFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4ReleasepageFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ReleasepageFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ReleasepageFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4ReleasepageFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ReleasepageFtraceEvent "index" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ReleasepageFtraceEvent'index
           (\ x__ y__ -> x__ {_Ext4ReleasepageFtraceEvent'index = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ReleasepageFtraceEvent "maybe'index" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ReleasepageFtraceEvent'index
           (\ x__ y__ -> x__ {_Ext4ReleasepageFtraceEvent'index = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4ReleasepageFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4ReleasepageFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \\SUBExt4ReleasepageFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DC4\n\
      \\ENQindex\CAN\ETX \SOH(\EOTR\ENQindex"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4ReleasepageFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4ReleasepageFtraceEvent
        index__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "index"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'index")) ::
              Data.ProtoLens.FieldDescriptor Ext4ReleasepageFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, index__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4ReleasepageFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__ {_Ext4ReleasepageFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4ReleasepageFtraceEvent'_constructor
        {_Ext4ReleasepageFtraceEvent'dev = Prelude.Nothing,
         _Ext4ReleasepageFtraceEvent'ino = Prelude.Nothing,
         _Ext4ReleasepageFtraceEvent'index = Prelude.Nothing,
         _Ext4ReleasepageFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4ReleasepageFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4ReleasepageFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "index"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"index") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "Ext4ReleasepageFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'index") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                   (Data.ProtoLens.Encoding.Wire.buildFieldSet
                      (Lens.Family2.view Data.ProtoLens.unknownFields _x))))
instance Control.DeepSeq.NFData Ext4ReleasepageFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4ReleasepageFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4ReleasepageFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4ReleasepageFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4ReleasepageFtraceEvent'index x__) ())))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4RemoveBlocksFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4RemoveBlocksFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4RemoveBlocksFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4RemoveBlocksFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.from' @:: Lens' Ext4RemoveBlocksFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'from' @:: Lens' Ext4RemoveBlocksFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.to' @:: Lens' Ext4RemoveBlocksFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'to' @:: Lens' Ext4RemoveBlocksFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.partial' @:: Lens' Ext4RemoveBlocksFtraceEvent Data.Int.Int64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'partial' @:: Lens' Ext4RemoveBlocksFtraceEvent (Prelude.Maybe Data.Int.Int64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.eePblk' @:: Lens' Ext4RemoveBlocksFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'eePblk' @:: Lens' Ext4RemoveBlocksFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.eeLblk' @:: Lens' Ext4RemoveBlocksFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'eeLblk' @:: Lens' Ext4RemoveBlocksFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.eeLen' @:: Lens' Ext4RemoveBlocksFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'eeLen' @:: Lens' Ext4RemoveBlocksFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.pcLblk' @:: Lens' Ext4RemoveBlocksFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'pcLblk' @:: Lens' Ext4RemoveBlocksFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.pcPclu' @:: Lens' Ext4RemoveBlocksFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'pcPclu' @:: Lens' Ext4RemoveBlocksFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.pcState' @:: Lens' Ext4RemoveBlocksFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'pcState' @:: Lens' Ext4RemoveBlocksFtraceEvent (Prelude.Maybe Data.Int.Int32)@ -}
data Ext4RemoveBlocksFtraceEvent
  = Ext4RemoveBlocksFtraceEvent'_constructor {_Ext4RemoveBlocksFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                              _Ext4RemoveBlocksFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                              _Ext4RemoveBlocksFtraceEvent'from :: !(Prelude.Maybe Data.Word.Word32),
                                              _Ext4RemoveBlocksFtraceEvent'to :: !(Prelude.Maybe Data.Word.Word32),
                                              _Ext4RemoveBlocksFtraceEvent'partial :: !(Prelude.Maybe Data.Int.Int64),
                                              _Ext4RemoveBlocksFtraceEvent'eePblk :: !(Prelude.Maybe Data.Word.Word64),
                                              _Ext4RemoveBlocksFtraceEvent'eeLblk :: !(Prelude.Maybe Data.Word.Word32),
                                              _Ext4RemoveBlocksFtraceEvent'eeLen :: !(Prelude.Maybe Data.Word.Word32),
                                              _Ext4RemoveBlocksFtraceEvent'pcLblk :: !(Prelude.Maybe Data.Word.Word32),
                                              _Ext4RemoveBlocksFtraceEvent'pcPclu :: !(Prelude.Maybe Data.Word.Word64),
                                              _Ext4RemoveBlocksFtraceEvent'pcState :: !(Prelude.Maybe Data.Int.Int32),
                                              _Ext4RemoveBlocksFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4RemoveBlocksFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4RemoveBlocksFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4RemoveBlocksFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4RemoveBlocksFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4RemoveBlocksFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4RemoveBlocksFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4RemoveBlocksFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4RemoveBlocksFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4RemoveBlocksFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4RemoveBlocksFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4RemoveBlocksFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4RemoveBlocksFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4RemoveBlocksFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4RemoveBlocksFtraceEvent "from" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4RemoveBlocksFtraceEvent'from
           (\ x__ y__ -> x__ {_Ext4RemoveBlocksFtraceEvent'from = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4RemoveBlocksFtraceEvent "maybe'from" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4RemoveBlocksFtraceEvent'from
           (\ x__ y__ -> x__ {_Ext4RemoveBlocksFtraceEvent'from = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4RemoveBlocksFtraceEvent "to" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4RemoveBlocksFtraceEvent'to
           (\ x__ y__ -> x__ {_Ext4RemoveBlocksFtraceEvent'to = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4RemoveBlocksFtraceEvent "maybe'to" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4RemoveBlocksFtraceEvent'to
           (\ x__ y__ -> x__ {_Ext4RemoveBlocksFtraceEvent'to = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4RemoveBlocksFtraceEvent "partial" Data.Int.Int64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4RemoveBlocksFtraceEvent'partial
           (\ x__ y__ -> x__ {_Ext4RemoveBlocksFtraceEvent'partial = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4RemoveBlocksFtraceEvent "maybe'partial" (Prelude.Maybe Data.Int.Int64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4RemoveBlocksFtraceEvent'partial
           (\ x__ y__ -> x__ {_Ext4RemoveBlocksFtraceEvent'partial = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4RemoveBlocksFtraceEvent "eePblk" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4RemoveBlocksFtraceEvent'eePblk
           (\ x__ y__ -> x__ {_Ext4RemoveBlocksFtraceEvent'eePblk = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4RemoveBlocksFtraceEvent "maybe'eePblk" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4RemoveBlocksFtraceEvent'eePblk
           (\ x__ y__ -> x__ {_Ext4RemoveBlocksFtraceEvent'eePblk = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4RemoveBlocksFtraceEvent "eeLblk" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4RemoveBlocksFtraceEvent'eeLblk
           (\ x__ y__ -> x__ {_Ext4RemoveBlocksFtraceEvent'eeLblk = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4RemoveBlocksFtraceEvent "maybe'eeLblk" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4RemoveBlocksFtraceEvent'eeLblk
           (\ x__ y__ -> x__ {_Ext4RemoveBlocksFtraceEvent'eeLblk = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4RemoveBlocksFtraceEvent "eeLen" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4RemoveBlocksFtraceEvent'eeLen
           (\ x__ y__ -> x__ {_Ext4RemoveBlocksFtraceEvent'eeLen = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4RemoveBlocksFtraceEvent "maybe'eeLen" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4RemoveBlocksFtraceEvent'eeLen
           (\ x__ y__ -> x__ {_Ext4RemoveBlocksFtraceEvent'eeLen = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4RemoveBlocksFtraceEvent "pcLblk" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4RemoveBlocksFtraceEvent'pcLblk
           (\ x__ y__ -> x__ {_Ext4RemoveBlocksFtraceEvent'pcLblk = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4RemoveBlocksFtraceEvent "maybe'pcLblk" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4RemoveBlocksFtraceEvent'pcLblk
           (\ x__ y__ -> x__ {_Ext4RemoveBlocksFtraceEvent'pcLblk = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4RemoveBlocksFtraceEvent "pcPclu" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4RemoveBlocksFtraceEvent'pcPclu
           (\ x__ y__ -> x__ {_Ext4RemoveBlocksFtraceEvent'pcPclu = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4RemoveBlocksFtraceEvent "maybe'pcPclu" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4RemoveBlocksFtraceEvent'pcPclu
           (\ x__ y__ -> x__ {_Ext4RemoveBlocksFtraceEvent'pcPclu = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4RemoveBlocksFtraceEvent "pcState" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4RemoveBlocksFtraceEvent'pcState
           (\ x__ y__ -> x__ {_Ext4RemoveBlocksFtraceEvent'pcState = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4RemoveBlocksFtraceEvent "maybe'pcState" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4RemoveBlocksFtraceEvent'pcState
           (\ x__ y__ -> x__ {_Ext4RemoveBlocksFtraceEvent'pcState = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4RemoveBlocksFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4RemoveBlocksFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \\ESCExt4RemoveBlocksFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DC2\n\
      \\EOTfrom\CAN\ETX \SOH(\rR\EOTfrom\DC2\SO\n\
      \\STXto\CAN\EOT \SOH(\rR\STXto\DC2\CAN\n\
      \\apartial\CAN\ENQ \SOH(\ETXR\apartial\DC2\ETB\n\
      \\aee_pblk\CAN\ACK \SOH(\EOTR\ACKeePblk\DC2\ETB\n\
      \\aee_lblk\CAN\a \SOH(\rR\ACKeeLblk\DC2\NAK\n\
      \\ACKee_len\CAN\b \SOH(\rR\ENQeeLen\DC2\ETB\n\
      \\apc_lblk\CAN\t \SOH(\rR\ACKpcLblk\DC2\ETB\n\
      \\apc_pclu\CAN\n\
      \ \SOH(\EOTR\ACKpcPclu\DC2\EM\n\
      \\bpc_state\CAN\v \SOH(\ENQR\apcState"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4RemoveBlocksFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4RemoveBlocksFtraceEvent
        from__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "from"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'from")) ::
              Data.ProtoLens.FieldDescriptor Ext4RemoveBlocksFtraceEvent
        to__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "to"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'to")) ::
              Data.ProtoLens.FieldDescriptor Ext4RemoveBlocksFtraceEvent
        partial__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "partial"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'partial")) ::
              Data.ProtoLens.FieldDescriptor Ext4RemoveBlocksFtraceEvent
        eePblk__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ee_pblk"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'eePblk")) ::
              Data.ProtoLens.FieldDescriptor Ext4RemoveBlocksFtraceEvent
        eeLblk__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ee_lblk"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'eeLblk")) ::
              Data.ProtoLens.FieldDescriptor Ext4RemoveBlocksFtraceEvent
        eeLen__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ee_len"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'eeLen")) ::
              Data.ProtoLens.FieldDescriptor Ext4RemoveBlocksFtraceEvent
        pcLblk__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "pc_lblk"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'pcLblk")) ::
              Data.ProtoLens.FieldDescriptor Ext4RemoveBlocksFtraceEvent
        pcPclu__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "pc_pclu"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'pcPclu")) ::
              Data.ProtoLens.FieldDescriptor Ext4RemoveBlocksFtraceEvent
        pcState__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "pc_state"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'pcState")) ::
              Data.ProtoLens.FieldDescriptor Ext4RemoveBlocksFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, from__field_descriptor),
           (Data.ProtoLens.Tag 4, to__field_descriptor),
           (Data.ProtoLens.Tag 5, partial__field_descriptor),
           (Data.ProtoLens.Tag 6, eePblk__field_descriptor),
           (Data.ProtoLens.Tag 7, eeLblk__field_descriptor),
           (Data.ProtoLens.Tag 8, eeLen__field_descriptor),
           (Data.ProtoLens.Tag 9, pcLblk__field_descriptor),
           (Data.ProtoLens.Tag 10, pcPclu__field_descriptor),
           (Data.ProtoLens.Tag 11, pcState__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4RemoveBlocksFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__ {_Ext4RemoveBlocksFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4RemoveBlocksFtraceEvent'_constructor
        {_Ext4RemoveBlocksFtraceEvent'dev = Prelude.Nothing,
         _Ext4RemoveBlocksFtraceEvent'ino = Prelude.Nothing,
         _Ext4RemoveBlocksFtraceEvent'from = Prelude.Nothing,
         _Ext4RemoveBlocksFtraceEvent'to = Prelude.Nothing,
         _Ext4RemoveBlocksFtraceEvent'partial = Prelude.Nothing,
         _Ext4RemoveBlocksFtraceEvent'eePblk = Prelude.Nothing,
         _Ext4RemoveBlocksFtraceEvent'eeLblk = Prelude.Nothing,
         _Ext4RemoveBlocksFtraceEvent'eeLen = Prelude.Nothing,
         _Ext4RemoveBlocksFtraceEvent'pcLblk = Prelude.Nothing,
         _Ext4RemoveBlocksFtraceEvent'pcPclu = Prelude.Nothing,
         _Ext4RemoveBlocksFtraceEvent'pcState = Prelude.Nothing,
         _Ext4RemoveBlocksFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4RemoveBlocksFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4RemoveBlocksFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "from"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"from") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "to"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"to") y x)
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "partial"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"partial") y x)
                        48
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ee_pblk"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"eePblk") y x)
                        56
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "ee_lblk"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"eeLblk") y x)
                        64
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "ee_len"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"eeLen") y x)
                        72
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "pc_lblk"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"pcLblk") y x)
                        80
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "pc_pclu"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"pcPclu") y x)
                        88
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "pc_state"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"pcState") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "Ext4RemoveBlocksFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'from") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'to") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'partial") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral
                                      _v))
                         ((Data.Monoid.<>)
                            (case
                                 Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'eePblk") _x
                             of
                               Prelude.Nothing -> Data.Monoid.mempty
                               (Prelude.Just _v)
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 48)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                            ((Data.Monoid.<>)
                               (case
                                    Lens.Family2.view
                                      (Data.ProtoLens.Field.field @"maybe'eeLblk") _x
                                of
                                  Prelude.Nothing -> Data.Monoid.mempty
                                  (Prelude.Just _v)
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt 56)
                                         ((Prelude..)
                                            Data.ProtoLens.Encoding.Bytes.putVarInt
                                            Prelude.fromIntegral _v))
                               ((Data.Monoid.<>)
                                  (case
                                       Lens.Family2.view
                                         (Data.ProtoLens.Field.field @"maybe'eeLen") _x
                                   of
                                     Prelude.Nothing -> Data.Monoid.mempty
                                     (Prelude.Just _v)
                                       -> (Data.Monoid.<>)
                                            (Data.ProtoLens.Encoding.Bytes.putVarInt 64)
                                            ((Prelude..)
                                               Data.ProtoLens.Encoding.Bytes.putVarInt
                                               Prelude.fromIntegral _v))
                                  ((Data.Monoid.<>)
                                     (case
                                          Lens.Family2.view
                                            (Data.ProtoLens.Field.field @"maybe'pcLblk") _x
                                      of
                                        Prelude.Nothing -> Data.Monoid.mempty
                                        (Prelude.Just _v)
                                          -> (Data.Monoid.<>)
                                               (Data.ProtoLens.Encoding.Bytes.putVarInt 72)
                                               ((Prelude..)
                                                  Data.ProtoLens.Encoding.Bytes.putVarInt
                                                  Prelude.fromIntegral _v))
                                     ((Data.Monoid.<>)
                                        (case
                                             Lens.Family2.view
                                               (Data.ProtoLens.Field.field @"maybe'pcPclu") _x
                                         of
                                           Prelude.Nothing -> Data.Monoid.mempty
                                           (Prelude.Just _v)
                                             -> (Data.Monoid.<>)
                                                  (Data.ProtoLens.Encoding.Bytes.putVarInt 80)
                                                  (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                                        ((Data.Monoid.<>)
                                           (case
                                                Lens.Family2.view
                                                  (Data.ProtoLens.Field.field @"maybe'pcState") _x
                                            of
                                              Prelude.Nothing -> Data.Monoid.mempty
                                              (Prelude.Just _v)
                                                -> (Data.Monoid.<>)
                                                     (Data.ProtoLens.Encoding.Bytes.putVarInt 88)
                                                     ((Prelude..)
                                                        Data.ProtoLens.Encoding.Bytes.putVarInt
                                                        Prelude.fromIntegral _v))
                                           (Data.ProtoLens.Encoding.Wire.buildFieldSet
                                              (Lens.Family2.view
                                                 Data.ProtoLens.unknownFields _x))))))))))))
instance Control.DeepSeq.NFData Ext4RemoveBlocksFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4RemoveBlocksFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4RemoveBlocksFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4RemoveBlocksFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4RemoveBlocksFtraceEvent'from x__)
                      (Control.DeepSeq.deepseq
                         (_Ext4RemoveBlocksFtraceEvent'to x__)
                         (Control.DeepSeq.deepseq
                            (_Ext4RemoveBlocksFtraceEvent'partial x__)
                            (Control.DeepSeq.deepseq
                               (_Ext4RemoveBlocksFtraceEvent'eePblk x__)
                               (Control.DeepSeq.deepseq
                                  (_Ext4RemoveBlocksFtraceEvent'eeLblk x__)
                                  (Control.DeepSeq.deepseq
                                     (_Ext4RemoveBlocksFtraceEvent'eeLen x__)
                                     (Control.DeepSeq.deepseq
                                        (_Ext4RemoveBlocksFtraceEvent'pcLblk x__)
                                        (Control.DeepSeq.deepseq
                                           (_Ext4RemoveBlocksFtraceEvent'pcPclu x__)
                                           (Control.DeepSeq.deepseq
                                              (_Ext4RemoveBlocksFtraceEvent'pcState x__)
                                              ())))))))))))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4RequestBlocksFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4RequestBlocksFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4RequestBlocksFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4RequestBlocksFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.len' @:: Lens' Ext4RequestBlocksFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'len' @:: Lens' Ext4RequestBlocksFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.logical' @:: Lens' Ext4RequestBlocksFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'logical' @:: Lens' Ext4RequestBlocksFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.lleft' @:: Lens' Ext4RequestBlocksFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'lleft' @:: Lens' Ext4RequestBlocksFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.lright' @:: Lens' Ext4RequestBlocksFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'lright' @:: Lens' Ext4RequestBlocksFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.goal' @:: Lens' Ext4RequestBlocksFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'goal' @:: Lens' Ext4RequestBlocksFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.pleft' @:: Lens' Ext4RequestBlocksFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'pleft' @:: Lens' Ext4RequestBlocksFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.pright' @:: Lens' Ext4RequestBlocksFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'pright' @:: Lens' Ext4RequestBlocksFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.flags' @:: Lens' Ext4RequestBlocksFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'flags' @:: Lens' Ext4RequestBlocksFtraceEvent (Prelude.Maybe Data.Word.Word32)@ -}
data Ext4RequestBlocksFtraceEvent
  = Ext4RequestBlocksFtraceEvent'_constructor {_Ext4RequestBlocksFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                               _Ext4RequestBlocksFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                               _Ext4RequestBlocksFtraceEvent'len :: !(Prelude.Maybe Data.Word.Word32),
                                               _Ext4RequestBlocksFtraceEvent'logical :: !(Prelude.Maybe Data.Word.Word32),
                                               _Ext4RequestBlocksFtraceEvent'lleft :: !(Prelude.Maybe Data.Word.Word32),
                                               _Ext4RequestBlocksFtraceEvent'lright :: !(Prelude.Maybe Data.Word.Word32),
                                               _Ext4RequestBlocksFtraceEvent'goal :: !(Prelude.Maybe Data.Word.Word64),
                                               _Ext4RequestBlocksFtraceEvent'pleft :: !(Prelude.Maybe Data.Word.Word64),
                                               _Ext4RequestBlocksFtraceEvent'pright :: !(Prelude.Maybe Data.Word.Word64),
                                               _Ext4RequestBlocksFtraceEvent'flags :: !(Prelude.Maybe Data.Word.Word32),
                                               _Ext4RequestBlocksFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4RequestBlocksFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4RequestBlocksFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4RequestBlocksFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4RequestBlocksFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4RequestBlocksFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4RequestBlocksFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4RequestBlocksFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4RequestBlocksFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4RequestBlocksFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4RequestBlocksFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4RequestBlocksFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4RequestBlocksFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4RequestBlocksFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4RequestBlocksFtraceEvent "len" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4RequestBlocksFtraceEvent'len
           (\ x__ y__ -> x__ {_Ext4RequestBlocksFtraceEvent'len = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4RequestBlocksFtraceEvent "maybe'len" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4RequestBlocksFtraceEvent'len
           (\ x__ y__ -> x__ {_Ext4RequestBlocksFtraceEvent'len = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4RequestBlocksFtraceEvent "logical" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4RequestBlocksFtraceEvent'logical
           (\ x__ y__ -> x__ {_Ext4RequestBlocksFtraceEvent'logical = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4RequestBlocksFtraceEvent "maybe'logical" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4RequestBlocksFtraceEvent'logical
           (\ x__ y__ -> x__ {_Ext4RequestBlocksFtraceEvent'logical = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4RequestBlocksFtraceEvent "lleft" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4RequestBlocksFtraceEvent'lleft
           (\ x__ y__ -> x__ {_Ext4RequestBlocksFtraceEvent'lleft = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4RequestBlocksFtraceEvent "maybe'lleft" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4RequestBlocksFtraceEvent'lleft
           (\ x__ y__ -> x__ {_Ext4RequestBlocksFtraceEvent'lleft = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4RequestBlocksFtraceEvent "lright" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4RequestBlocksFtraceEvent'lright
           (\ x__ y__ -> x__ {_Ext4RequestBlocksFtraceEvent'lright = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4RequestBlocksFtraceEvent "maybe'lright" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4RequestBlocksFtraceEvent'lright
           (\ x__ y__ -> x__ {_Ext4RequestBlocksFtraceEvent'lright = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4RequestBlocksFtraceEvent "goal" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4RequestBlocksFtraceEvent'goal
           (\ x__ y__ -> x__ {_Ext4RequestBlocksFtraceEvent'goal = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4RequestBlocksFtraceEvent "maybe'goal" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4RequestBlocksFtraceEvent'goal
           (\ x__ y__ -> x__ {_Ext4RequestBlocksFtraceEvent'goal = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4RequestBlocksFtraceEvent "pleft" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4RequestBlocksFtraceEvent'pleft
           (\ x__ y__ -> x__ {_Ext4RequestBlocksFtraceEvent'pleft = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4RequestBlocksFtraceEvent "maybe'pleft" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4RequestBlocksFtraceEvent'pleft
           (\ x__ y__ -> x__ {_Ext4RequestBlocksFtraceEvent'pleft = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4RequestBlocksFtraceEvent "pright" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4RequestBlocksFtraceEvent'pright
           (\ x__ y__ -> x__ {_Ext4RequestBlocksFtraceEvent'pright = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4RequestBlocksFtraceEvent "maybe'pright" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4RequestBlocksFtraceEvent'pright
           (\ x__ y__ -> x__ {_Ext4RequestBlocksFtraceEvent'pright = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4RequestBlocksFtraceEvent "flags" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4RequestBlocksFtraceEvent'flags
           (\ x__ y__ -> x__ {_Ext4RequestBlocksFtraceEvent'flags = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4RequestBlocksFtraceEvent "maybe'flags" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4RequestBlocksFtraceEvent'flags
           (\ x__ y__ -> x__ {_Ext4RequestBlocksFtraceEvent'flags = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4RequestBlocksFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4RequestBlocksFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \\FSExt4RequestBlocksFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DLE\n\
      \\ETXlen\CAN\ETX \SOH(\rR\ETXlen\DC2\CAN\n\
      \\alogical\CAN\EOT \SOH(\rR\alogical\DC2\DC4\n\
      \\ENQlleft\CAN\ENQ \SOH(\rR\ENQlleft\DC2\SYN\n\
      \\ACKlright\CAN\ACK \SOH(\rR\ACKlright\DC2\DC2\n\
      \\EOTgoal\CAN\a \SOH(\EOTR\EOTgoal\DC2\DC4\n\
      \\ENQpleft\CAN\b \SOH(\EOTR\ENQpleft\DC2\SYN\n\
      \\ACKpright\CAN\t \SOH(\EOTR\ACKpright\DC2\DC4\n\
      \\ENQflags\CAN\n\
      \ \SOH(\rR\ENQflags"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4RequestBlocksFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4RequestBlocksFtraceEvent
        len__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "len"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'len")) ::
              Data.ProtoLens.FieldDescriptor Ext4RequestBlocksFtraceEvent
        logical__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "logical"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'logical")) ::
              Data.ProtoLens.FieldDescriptor Ext4RequestBlocksFtraceEvent
        lleft__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "lleft"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'lleft")) ::
              Data.ProtoLens.FieldDescriptor Ext4RequestBlocksFtraceEvent
        lright__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "lright"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'lright")) ::
              Data.ProtoLens.FieldDescriptor Ext4RequestBlocksFtraceEvent
        goal__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "goal"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'goal")) ::
              Data.ProtoLens.FieldDescriptor Ext4RequestBlocksFtraceEvent
        pleft__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "pleft"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'pleft")) ::
              Data.ProtoLens.FieldDescriptor Ext4RequestBlocksFtraceEvent
        pright__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "pright"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'pright")) ::
              Data.ProtoLens.FieldDescriptor Ext4RequestBlocksFtraceEvent
        flags__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "flags"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'flags")) ::
              Data.ProtoLens.FieldDescriptor Ext4RequestBlocksFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, len__field_descriptor),
           (Data.ProtoLens.Tag 4, logical__field_descriptor),
           (Data.ProtoLens.Tag 5, lleft__field_descriptor),
           (Data.ProtoLens.Tag 6, lright__field_descriptor),
           (Data.ProtoLens.Tag 7, goal__field_descriptor),
           (Data.ProtoLens.Tag 8, pleft__field_descriptor),
           (Data.ProtoLens.Tag 9, pright__field_descriptor),
           (Data.ProtoLens.Tag 10, flags__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4RequestBlocksFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__ {_Ext4RequestBlocksFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4RequestBlocksFtraceEvent'_constructor
        {_Ext4RequestBlocksFtraceEvent'dev = Prelude.Nothing,
         _Ext4RequestBlocksFtraceEvent'ino = Prelude.Nothing,
         _Ext4RequestBlocksFtraceEvent'len = Prelude.Nothing,
         _Ext4RequestBlocksFtraceEvent'logical = Prelude.Nothing,
         _Ext4RequestBlocksFtraceEvent'lleft = Prelude.Nothing,
         _Ext4RequestBlocksFtraceEvent'lright = Prelude.Nothing,
         _Ext4RequestBlocksFtraceEvent'goal = Prelude.Nothing,
         _Ext4RequestBlocksFtraceEvent'pleft = Prelude.Nothing,
         _Ext4RequestBlocksFtraceEvent'pright = Prelude.Nothing,
         _Ext4RequestBlocksFtraceEvent'flags = Prelude.Nothing,
         _Ext4RequestBlocksFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4RequestBlocksFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4RequestBlocksFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "len"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"len") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "logical"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"logical") y x)
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "lleft"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"lleft") y x)
                        48
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "lright"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"lright") y x)
                        56
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "goal"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"goal") y x)
                        64
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "pleft"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"pleft") y x)
                        72
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "pright"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"pright") y x)
                        80
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "flags"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"flags") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "Ext4RequestBlocksFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'len") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'logical") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'lleft") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral
                                      _v))
                         ((Data.Monoid.<>)
                            (case
                                 Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'lright") _x
                             of
                               Prelude.Nothing -> Data.Monoid.mempty
                               (Prelude.Just _v)
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 48)
                                      ((Prelude..)
                                         Data.ProtoLens.Encoding.Bytes.putVarInt
                                         Prelude.fromIntegral _v))
                            ((Data.Monoid.<>)
                               (case
                                    Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'goal") _x
                                of
                                  Prelude.Nothing -> Data.Monoid.mempty
                                  (Prelude.Just _v)
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt 56)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                               ((Data.Monoid.<>)
                                  (case
                                       Lens.Family2.view
                                         (Data.ProtoLens.Field.field @"maybe'pleft") _x
                                   of
                                     Prelude.Nothing -> Data.Monoid.mempty
                                     (Prelude.Just _v)
                                       -> (Data.Monoid.<>)
                                            (Data.ProtoLens.Encoding.Bytes.putVarInt 64)
                                            (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                                  ((Data.Monoid.<>)
                                     (case
                                          Lens.Family2.view
                                            (Data.ProtoLens.Field.field @"maybe'pright") _x
                                      of
                                        Prelude.Nothing -> Data.Monoid.mempty
                                        (Prelude.Just _v)
                                          -> (Data.Monoid.<>)
                                               (Data.ProtoLens.Encoding.Bytes.putVarInt 72)
                                               (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                                     ((Data.Monoid.<>)
                                        (case
                                             Lens.Family2.view
                                               (Data.ProtoLens.Field.field @"maybe'flags") _x
                                         of
                                           Prelude.Nothing -> Data.Monoid.mempty
                                           (Prelude.Just _v)
                                             -> (Data.Monoid.<>)
                                                  (Data.ProtoLens.Encoding.Bytes.putVarInt 80)
                                                  ((Prelude..)
                                                     Data.ProtoLens.Encoding.Bytes.putVarInt
                                                     Prelude.fromIntegral _v))
                                        (Data.ProtoLens.Encoding.Wire.buildFieldSet
                                           (Lens.Family2.view
                                              Data.ProtoLens.unknownFields _x)))))))))))
instance Control.DeepSeq.NFData Ext4RequestBlocksFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4RequestBlocksFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4RequestBlocksFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4RequestBlocksFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4RequestBlocksFtraceEvent'len x__)
                      (Control.DeepSeq.deepseq
                         (_Ext4RequestBlocksFtraceEvent'logical x__)
                         (Control.DeepSeq.deepseq
                            (_Ext4RequestBlocksFtraceEvent'lleft x__)
                            (Control.DeepSeq.deepseq
                               (_Ext4RequestBlocksFtraceEvent'lright x__)
                               (Control.DeepSeq.deepseq
                                  (_Ext4RequestBlocksFtraceEvent'goal x__)
                                  (Control.DeepSeq.deepseq
                                     (_Ext4RequestBlocksFtraceEvent'pleft x__)
                                     (Control.DeepSeq.deepseq
                                        (_Ext4RequestBlocksFtraceEvent'pright x__)
                                        (Control.DeepSeq.deepseq
                                           (_Ext4RequestBlocksFtraceEvent'flags x__) ()))))))))))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4RequestInodeFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4RequestInodeFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dir' @:: Lens' Ext4RequestInodeFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dir' @:: Lens' Ext4RequestInodeFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.mode' @:: Lens' Ext4RequestInodeFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'mode' @:: Lens' Ext4RequestInodeFtraceEvent (Prelude.Maybe Data.Word.Word32)@ -}
data Ext4RequestInodeFtraceEvent
  = Ext4RequestInodeFtraceEvent'_constructor {_Ext4RequestInodeFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                              _Ext4RequestInodeFtraceEvent'dir :: !(Prelude.Maybe Data.Word.Word64),
                                              _Ext4RequestInodeFtraceEvent'mode :: !(Prelude.Maybe Data.Word.Word32),
                                              _Ext4RequestInodeFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4RequestInodeFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4RequestInodeFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4RequestInodeFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4RequestInodeFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4RequestInodeFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4RequestInodeFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4RequestInodeFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4RequestInodeFtraceEvent "dir" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4RequestInodeFtraceEvent'dir
           (\ x__ y__ -> x__ {_Ext4RequestInodeFtraceEvent'dir = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4RequestInodeFtraceEvent "maybe'dir" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4RequestInodeFtraceEvent'dir
           (\ x__ y__ -> x__ {_Ext4RequestInodeFtraceEvent'dir = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4RequestInodeFtraceEvent "mode" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4RequestInodeFtraceEvent'mode
           (\ x__ y__ -> x__ {_Ext4RequestInodeFtraceEvent'mode = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4RequestInodeFtraceEvent "maybe'mode" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4RequestInodeFtraceEvent'mode
           (\ x__ y__ -> x__ {_Ext4RequestInodeFtraceEvent'mode = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4RequestInodeFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4RequestInodeFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \\ESCExt4RequestInodeFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXdir\CAN\STX \SOH(\EOTR\ETXdir\DC2\DC2\n\
      \\EOTmode\CAN\ETX \SOH(\rR\EOTmode"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4RequestInodeFtraceEvent
        dir__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dir"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dir")) ::
              Data.ProtoLens.FieldDescriptor Ext4RequestInodeFtraceEvent
        mode__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "mode"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'mode")) ::
              Data.ProtoLens.FieldDescriptor Ext4RequestInodeFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, dir__field_descriptor),
           (Data.ProtoLens.Tag 3, mode__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4RequestInodeFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__ {_Ext4RequestInodeFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4RequestInodeFtraceEvent'_constructor
        {_Ext4RequestInodeFtraceEvent'dev = Prelude.Nothing,
         _Ext4RequestInodeFtraceEvent'dir = Prelude.Nothing,
         _Ext4RequestInodeFtraceEvent'mode = Prelude.Nothing,
         _Ext4RequestInodeFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4RequestInodeFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4RequestInodeFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dir"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dir") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "mode"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"mode") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "Ext4RequestInodeFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dir") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'mode") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   (Data.ProtoLens.Encoding.Wire.buildFieldSet
                      (Lens.Family2.view Data.ProtoLens.unknownFields _x))))
instance Control.DeepSeq.NFData Ext4RequestInodeFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4RequestInodeFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4RequestInodeFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4RequestInodeFtraceEvent'dir x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4RequestInodeFtraceEvent'mode x__) ())))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4SyncFileEnterFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4SyncFileEnterFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4SyncFileEnterFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4SyncFileEnterFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.parent' @:: Lens' Ext4SyncFileEnterFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'parent' @:: Lens' Ext4SyncFileEnterFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.datasync' @:: Lens' Ext4SyncFileEnterFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'datasync' @:: Lens' Ext4SyncFileEnterFtraceEvent (Prelude.Maybe Data.Int.Int32)@ -}
data Ext4SyncFileEnterFtraceEvent
  = Ext4SyncFileEnterFtraceEvent'_constructor {_Ext4SyncFileEnterFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                               _Ext4SyncFileEnterFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                               _Ext4SyncFileEnterFtraceEvent'parent :: !(Prelude.Maybe Data.Word.Word64),
                                               _Ext4SyncFileEnterFtraceEvent'datasync :: !(Prelude.Maybe Data.Int.Int32),
                                               _Ext4SyncFileEnterFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4SyncFileEnterFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4SyncFileEnterFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4SyncFileEnterFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4SyncFileEnterFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4SyncFileEnterFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4SyncFileEnterFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4SyncFileEnterFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4SyncFileEnterFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4SyncFileEnterFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4SyncFileEnterFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4SyncFileEnterFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4SyncFileEnterFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4SyncFileEnterFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4SyncFileEnterFtraceEvent "parent" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4SyncFileEnterFtraceEvent'parent
           (\ x__ y__ -> x__ {_Ext4SyncFileEnterFtraceEvent'parent = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4SyncFileEnterFtraceEvent "maybe'parent" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4SyncFileEnterFtraceEvent'parent
           (\ x__ y__ -> x__ {_Ext4SyncFileEnterFtraceEvent'parent = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4SyncFileEnterFtraceEvent "datasync" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4SyncFileEnterFtraceEvent'datasync
           (\ x__ y__ -> x__ {_Ext4SyncFileEnterFtraceEvent'datasync = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4SyncFileEnterFtraceEvent "maybe'datasync" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4SyncFileEnterFtraceEvent'datasync
           (\ x__ y__ -> x__ {_Ext4SyncFileEnterFtraceEvent'datasync = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4SyncFileEnterFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4SyncFileEnterFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \\FSExt4SyncFileEnterFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\SYN\n\
      \\ACKparent\CAN\ETX \SOH(\EOTR\ACKparent\DC2\SUB\n\
      \\bdatasync\CAN\EOT \SOH(\ENQR\bdatasync"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4SyncFileEnterFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4SyncFileEnterFtraceEvent
        parent__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "parent"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'parent")) ::
              Data.ProtoLens.FieldDescriptor Ext4SyncFileEnterFtraceEvent
        datasync__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "datasync"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'datasync")) ::
              Data.ProtoLens.FieldDescriptor Ext4SyncFileEnterFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, parent__field_descriptor),
           (Data.ProtoLens.Tag 4, datasync__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4SyncFileEnterFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__ {_Ext4SyncFileEnterFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4SyncFileEnterFtraceEvent'_constructor
        {_Ext4SyncFileEnterFtraceEvent'dev = Prelude.Nothing,
         _Ext4SyncFileEnterFtraceEvent'ino = Prelude.Nothing,
         _Ext4SyncFileEnterFtraceEvent'parent = Prelude.Nothing,
         _Ext4SyncFileEnterFtraceEvent'datasync = Prelude.Nothing,
         _Ext4SyncFileEnterFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4SyncFileEnterFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4SyncFileEnterFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "parent"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"parent") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "datasync"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"datasync") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "Ext4SyncFileEnterFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'parent") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'datasync") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                      (Data.ProtoLens.Encoding.Wire.buildFieldSet
                         (Lens.Family2.view Data.ProtoLens.unknownFields _x)))))
instance Control.DeepSeq.NFData Ext4SyncFileEnterFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4SyncFileEnterFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4SyncFileEnterFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4SyncFileEnterFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4SyncFileEnterFtraceEvent'parent x__)
                      (Control.DeepSeq.deepseq
                         (_Ext4SyncFileEnterFtraceEvent'datasync x__) ()))))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4SyncFileExitFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4SyncFileExitFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4SyncFileExitFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4SyncFileExitFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ret' @:: Lens' Ext4SyncFileExitFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ret' @:: Lens' Ext4SyncFileExitFtraceEvent (Prelude.Maybe Data.Int.Int32)@ -}
data Ext4SyncFileExitFtraceEvent
  = Ext4SyncFileExitFtraceEvent'_constructor {_Ext4SyncFileExitFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                              _Ext4SyncFileExitFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                              _Ext4SyncFileExitFtraceEvent'ret :: !(Prelude.Maybe Data.Int.Int32),
                                              _Ext4SyncFileExitFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4SyncFileExitFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4SyncFileExitFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4SyncFileExitFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4SyncFileExitFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4SyncFileExitFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4SyncFileExitFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4SyncFileExitFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4SyncFileExitFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4SyncFileExitFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4SyncFileExitFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4SyncFileExitFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4SyncFileExitFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4SyncFileExitFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4SyncFileExitFtraceEvent "ret" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4SyncFileExitFtraceEvent'ret
           (\ x__ y__ -> x__ {_Ext4SyncFileExitFtraceEvent'ret = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4SyncFileExitFtraceEvent "maybe'ret" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4SyncFileExitFtraceEvent'ret
           (\ x__ y__ -> x__ {_Ext4SyncFileExitFtraceEvent'ret = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4SyncFileExitFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4SyncFileExitFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \\ESCExt4SyncFileExitFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DLE\n\
      \\ETXret\CAN\ETX \SOH(\ENQR\ETXret"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4SyncFileExitFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4SyncFileExitFtraceEvent
        ret__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ret"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ret")) ::
              Data.ProtoLens.FieldDescriptor Ext4SyncFileExitFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, ret__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4SyncFileExitFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__ {_Ext4SyncFileExitFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4SyncFileExitFtraceEvent'_constructor
        {_Ext4SyncFileExitFtraceEvent'dev = Prelude.Nothing,
         _Ext4SyncFileExitFtraceEvent'ino = Prelude.Nothing,
         _Ext4SyncFileExitFtraceEvent'ret = Prelude.Nothing,
         _Ext4SyncFileExitFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4SyncFileExitFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4SyncFileExitFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "ret"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ret") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "Ext4SyncFileExitFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ret") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   (Data.ProtoLens.Encoding.Wire.buildFieldSet
                      (Lens.Family2.view Data.ProtoLens.unknownFields _x))))
instance Control.DeepSeq.NFData Ext4SyncFileExitFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4SyncFileExitFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4SyncFileExitFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4SyncFileExitFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4SyncFileExitFtraceEvent'ret x__) ())))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4SyncFsFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4SyncFsFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.wait' @:: Lens' Ext4SyncFsFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'wait' @:: Lens' Ext4SyncFsFtraceEvent (Prelude.Maybe Data.Int.Int32)@ -}
data Ext4SyncFsFtraceEvent
  = Ext4SyncFsFtraceEvent'_constructor {_Ext4SyncFsFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                        _Ext4SyncFsFtraceEvent'wait :: !(Prelude.Maybe Data.Int.Int32),
                                        _Ext4SyncFsFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4SyncFsFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4SyncFsFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4SyncFsFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4SyncFsFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4SyncFsFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4SyncFsFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4SyncFsFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4SyncFsFtraceEvent "wait" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4SyncFsFtraceEvent'wait
           (\ x__ y__ -> x__ {_Ext4SyncFsFtraceEvent'wait = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4SyncFsFtraceEvent "maybe'wait" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4SyncFsFtraceEvent'wait
           (\ x__ y__ -> x__ {_Ext4SyncFsFtraceEvent'wait = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4SyncFsFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4SyncFsFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \\NAKExt4SyncFsFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DC2\n\
      \\EOTwait\CAN\STX \SOH(\ENQR\EOTwait"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4SyncFsFtraceEvent
        wait__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "wait"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'wait")) ::
              Data.ProtoLens.FieldDescriptor Ext4SyncFsFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, wait__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4SyncFsFtraceEvent'_unknownFields
        (\ x__ y__ -> x__ {_Ext4SyncFsFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4SyncFsFtraceEvent'_constructor
        {_Ext4SyncFsFtraceEvent'dev = Prelude.Nothing,
         _Ext4SyncFsFtraceEvent'wait = Prelude.Nothing,
         _Ext4SyncFsFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4SyncFsFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4SyncFsFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "wait"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"wait") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "Ext4SyncFsFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'wait") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          ((Prelude..)
                             Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData Ext4SyncFsFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4SyncFsFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4SyncFsFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq (_Ext4SyncFsFtraceEvent'wait x__) ()))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.devMajor' @:: Lens' Ext4TrimAllFreeFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'devMajor' @:: Lens' Ext4TrimAllFreeFtraceEvent (Prelude.Maybe Data.Int.Int32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.devMinor' @:: Lens' Ext4TrimAllFreeFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'devMinor' @:: Lens' Ext4TrimAllFreeFtraceEvent (Prelude.Maybe Data.Int.Int32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.group' @:: Lens' Ext4TrimAllFreeFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'group' @:: Lens' Ext4TrimAllFreeFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.start' @:: Lens' Ext4TrimAllFreeFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'start' @:: Lens' Ext4TrimAllFreeFtraceEvent (Prelude.Maybe Data.Int.Int32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.len' @:: Lens' Ext4TrimAllFreeFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'len' @:: Lens' Ext4TrimAllFreeFtraceEvent (Prelude.Maybe Data.Int.Int32)@ -}
data Ext4TrimAllFreeFtraceEvent
  = Ext4TrimAllFreeFtraceEvent'_constructor {_Ext4TrimAllFreeFtraceEvent'devMajor :: !(Prelude.Maybe Data.Int.Int32),
                                             _Ext4TrimAllFreeFtraceEvent'devMinor :: !(Prelude.Maybe Data.Int.Int32),
                                             _Ext4TrimAllFreeFtraceEvent'group :: !(Prelude.Maybe Data.Word.Word32),
                                             _Ext4TrimAllFreeFtraceEvent'start :: !(Prelude.Maybe Data.Int.Int32),
                                             _Ext4TrimAllFreeFtraceEvent'len :: !(Prelude.Maybe Data.Int.Int32),
                                             _Ext4TrimAllFreeFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4TrimAllFreeFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4TrimAllFreeFtraceEvent "devMajor" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4TrimAllFreeFtraceEvent'devMajor
           (\ x__ y__ -> x__ {_Ext4TrimAllFreeFtraceEvent'devMajor = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4TrimAllFreeFtraceEvent "maybe'devMajor" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4TrimAllFreeFtraceEvent'devMajor
           (\ x__ y__ -> x__ {_Ext4TrimAllFreeFtraceEvent'devMajor = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4TrimAllFreeFtraceEvent "devMinor" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4TrimAllFreeFtraceEvent'devMinor
           (\ x__ y__ -> x__ {_Ext4TrimAllFreeFtraceEvent'devMinor = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4TrimAllFreeFtraceEvent "maybe'devMinor" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4TrimAllFreeFtraceEvent'devMinor
           (\ x__ y__ -> x__ {_Ext4TrimAllFreeFtraceEvent'devMinor = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4TrimAllFreeFtraceEvent "group" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4TrimAllFreeFtraceEvent'group
           (\ x__ y__ -> x__ {_Ext4TrimAllFreeFtraceEvent'group = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4TrimAllFreeFtraceEvent "maybe'group" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4TrimAllFreeFtraceEvent'group
           (\ x__ y__ -> x__ {_Ext4TrimAllFreeFtraceEvent'group = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4TrimAllFreeFtraceEvent "start" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4TrimAllFreeFtraceEvent'start
           (\ x__ y__ -> x__ {_Ext4TrimAllFreeFtraceEvent'start = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4TrimAllFreeFtraceEvent "maybe'start" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4TrimAllFreeFtraceEvent'start
           (\ x__ y__ -> x__ {_Ext4TrimAllFreeFtraceEvent'start = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4TrimAllFreeFtraceEvent "len" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4TrimAllFreeFtraceEvent'len
           (\ x__ y__ -> x__ {_Ext4TrimAllFreeFtraceEvent'len = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4TrimAllFreeFtraceEvent "maybe'len" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4TrimAllFreeFtraceEvent'len
           (\ x__ y__ -> x__ {_Ext4TrimAllFreeFtraceEvent'len = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4TrimAllFreeFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4TrimAllFreeFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \\SUBExt4TrimAllFreeFtraceEvent\DC2\ESC\n\
      \\tdev_major\CAN\SOH \SOH(\ENQR\bdevMajor\DC2\ESC\n\
      \\tdev_minor\CAN\STX \SOH(\ENQR\bdevMinor\DC2\DC4\n\
      \\ENQgroup\CAN\ETX \SOH(\rR\ENQgroup\DC2\DC4\n\
      \\ENQstart\CAN\EOT \SOH(\ENQR\ENQstart\DC2\DLE\n\
      \\ETXlen\CAN\ENQ \SOH(\ENQR\ETXlen"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        devMajor__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev_major"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'devMajor")) ::
              Data.ProtoLens.FieldDescriptor Ext4TrimAllFreeFtraceEvent
        devMinor__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev_minor"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'devMinor")) ::
              Data.ProtoLens.FieldDescriptor Ext4TrimAllFreeFtraceEvent
        group__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "group"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'group")) ::
              Data.ProtoLens.FieldDescriptor Ext4TrimAllFreeFtraceEvent
        start__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "start"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'start")) ::
              Data.ProtoLens.FieldDescriptor Ext4TrimAllFreeFtraceEvent
        len__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "len"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'len")) ::
              Data.ProtoLens.FieldDescriptor Ext4TrimAllFreeFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, devMajor__field_descriptor),
           (Data.ProtoLens.Tag 2, devMinor__field_descriptor),
           (Data.ProtoLens.Tag 3, group__field_descriptor),
           (Data.ProtoLens.Tag 4, start__field_descriptor),
           (Data.ProtoLens.Tag 5, len__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4TrimAllFreeFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__ {_Ext4TrimAllFreeFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4TrimAllFreeFtraceEvent'_constructor
        {_Ext4TrimAllFreeFtraceEvent'devMajor = Prelude.Nothing,
         _Ext4TrimAllFreeFtraceEvent'devMinor = Prelude.Nothing,
         _Ext4TrimAllFreeFtraceEvent'group = Prelude.Nothing,
         _Ext4TrimAllFreeFtraceEvent'start = Prelude.Nothing,
         _Ext4TrimAllFreeFtraceEvent'len = Prelude.Nothing,
         _Ext4TrimAllFreeFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4TrimAllFreeFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4TrimAllFreeFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "dev_major"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"devMajor") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "dev_minor"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"devMinor") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "group"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"group") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "start"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"start") y x)
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "len"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"len") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "Ext4TrimAllFreeFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'devMajor") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       ((Prelude..)
                          Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'devMinor") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          ((Prelude..)
                             Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'group") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'start") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'len") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral
                                      _v))
                         (Data.ProtoLens.Encoding.Wire.buildFieldSet
                            (Lens.Family2.view Data.ProtoLens.unknownFields _x))))))
instance Control.DeepSeq.NFData Ext4TrimAllFreeFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4TrimAllFreeFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4TrimAllFreeFtraceEvent'devMajor x__)
                (Control.DeepSeq.deepseq
                   (_Ext4TrimAllFreeFtraceEvent'devMinor x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4TrimAllFreeFtraceEvent'group x__)
                      (Control.DeepSeq.deepseq
                         (_Ext4TrimAllFreeFtraceEvent'start x__)
                         (Control.DeepSeq.deepseq
                            (_Ext4TrimAllFreeFtraceEvent'len x__) ())))))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.devMajor' @:: Lens' Ext4TrimExtentFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'devMajor' @:: Lens' Ext4TrimExtentFtraceEvent (Prelude.Maybe Data.Int.Int32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.devMinor' @:: Lens' Ext4TrimExtentFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'devMinor' @:: Lens' Ext4TrimExtentFtraceEvent (Prelude.Maybe Data.Int.Int32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.group' @:: Lens' Ext4TrimExtentFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'group' @:: Lens' Ext4TrimExtentFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.start' @:: Lens' Ext4TrimExtentFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'start' @:: Lens' Ext4TrimExtentFtraceEvent (Prelude.Maybe Data.Int.Int32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.len' @:: Lens' Ext4TrimExtentFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'len' @:: Lens' Ext4TrimExtentFtraceEvent (Prelude.Maybe Data.Int.Int32)@ -}
data Ext4TrimExtentFtraceEvent
  = Ext4TrimExtentFtraceEvent'_constructor {_Ext4TrimExtentFtraceEvent'devMajor :: !(Prelude.Maybe Data.Int.Int32),
                                            _Ext4TrimExtentFtraceEvent'devMinor :: !(Prelude.Maybe Data.Int.Int32),
                                            _Ext4TrimExtentFtraceEvent'group :: !(Prelude.Maybe Data.Word.Word32),
                                            _Ext4TrimExtentFtraceEvent'start :: !(Prelude.Maybe Data.Int.Int32),
                                            _Ext4TrimExtentFtraceEvent'len :: !(Prelude.Maybe Data.Int.Int32),
                                            _Ext4TrimExtentFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4TrimExtentFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4TrimExtentFtraceEvent "devMajor" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4TrimExtentFtraceEvent'devMajor
           (\ x__ y__ -> x__ {_Ext4TrimExtentFtraceEvent'devMajor = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4TrimExtentFtraceEvent "maybe'devMajor" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4TrimExtentFtraceEvent'devMajor
           (\ x__ y__ -> x__ {_Ext4TrimExtentFtraceEvent'devMajor = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4TrimExtentFtraceEvent "devMinor" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4TrimExtentFtraceEvent'devMinor
           (\ x__ y__ -> x__ {_Ext4TrimExtentFtraceEvent'devMinor = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4TrimExtentFtraceEvent "maybe'devMinor" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4TrimExtentFtraceEvent'devMinor
           (\ x__ y__ -> x__ {_Ext4TrimExtentFtraceEvent'devMinor = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4TrimExtentFtraceEvent "group" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4TrimExtentFtraceEvent'group
           (\ x__ y__ -> x__ {_Ext4TrimExtentFtraceEvent'group = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4TrimExtentFtraceEvent "maybe'group" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4TrimExtentFtraceEvent'group
           (\ x__ y__ -> x__ {_Ext4TrimExtentFtraceEvent'group = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4TrimExtentFtraceEvent "start" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4TrimExtentFtraceEvent'start
           (\ x__ y__ -> x__ {_Ext4TrimExtentFtraceEvent'start = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4TrimExtentFtraceEvent "maybe'start" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4TrimExtentFtraceEvent'start
           (\ x__ y__ -> x__ {_Ext4TrimExtentFtraceEvent'start = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4TrimExtentFtraceEvent "len" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4TrimExtentFtraceEvent'len
           (\ x__ y__ -> x__ {_Ext4TrimExtentFtraceEvent'len = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4TrimExtentFtraceEvent "maybe'len" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4TrimExtentFtraceEvent'len
           (\ x__ y__ -> x__ {_Ext4TrimExtentFtraceEvent'len = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4TrimExtentFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4TrimExtentFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \\EMExt4TrimExtentFtraceEvent\DC2\ESC\n\
      \\tdev_major\CAN\SOH \SOH(\ENQR\bdevMajor\DC2\ESC\n\
      \\tdev_minor\CAN\STX \SOH(\ENQR\bdevMinor\DC2\DC4\n\
      \\ENQgroup\CAN\ETX \SOH(\rR\ENQgroup\DC2\DC4\n\
      \\ENQstart\CAN\EOT \SOH(\ENQR\ENQstart\DC2\DLE\n\
      \\ETXlen\CAN\ENQ \SOH(\ENQR\ETXlen"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        devMajor__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev_major"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'devMajor")) ::
              Data.ProtoLens.FieldDescriptor Ext4TrimExtentFtraceEvent
        devMinor__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev_minor"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'devMinor")) ::
              Data.ProtoLens.FieldDescriptor Ext4TrimExtentFtraceEvent
        group__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "group"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'group")) ::
              Data.ProtoLens.FieldDescriptor Ext4TrimExtentFtraceEvent
        start__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "start"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'start")) ::
              Data.ProtoLens.FieldDescriptor Ext4TrimExtentFtraceEvent
        len__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "len"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'len")) ::
              Data.ProtoLens.FieldDescriptor Ext4TrimExtentFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, devMajor__field_descriptor),
           (Data.ProtoLens.Tag 2, devMinor__field_descriptor),
           (Data.ProtoLens.Tag 3, group__field_descriptor),
           (Data.ProtoLens.Tag 4, start__field_descriptor),
           (Data.ProtoLens.Tag 5, len__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4TrimExtentFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__ {_Ext4TrimExtentFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4TrimExtentFtraceEvent'_constructor
        {_Ext4TrimExtentFtraceEvent'devMajor = Prelude.Nothing,
         _Ext4TrimExtentFtraceEvent'devMinor = Prelude.Nothing,
         _Ext4TrimExtentFtraceEvent'group = Prelude.Nothing,
         _Ext4TrimExtentFtraceEvent'start = Prelude.Nothing,
         _Ext4TrimExtentFtraceEvent'len = Prelude.Nothing,
         _Ext4TrimExtentFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4TrimExtentFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4TrimExtentFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "dev_major"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"devMajor") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "dev_minor"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"devMinor") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "group"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"group") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "start"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"start") y x)
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "len"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"len") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "Ext4TrimExtentFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'devMajor") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       ((Prelude..)
                          Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'devMinor") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          ((Prelude..)
                             Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'group") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'start") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'len") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral
                                      _v))
                         (Data.ProtoLens.Encoding.Wire.buildFieldSet
                            (Lens.Family2.view Data.ProtoLens.unknownFields _x))))))
instance Control.DeepSeq.NFData Ext4TrimExtentFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4TrimExtentFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4TrimExtentFtraceEvent'devMajor x__)
                (Control.DeepSeq.deepseq
                   (_Ext4TrimExtentFtraceEvent'devMinor x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4TrimExtentFtraceEvent'group x__)
                      (Control.DeepSeq.deepseq
                         (_Ext4TrimExtentFtraceEvent'start x__)
                         (Control.DeepSeq.deepseq
                            (_Ext4TrimExtentFtraceEvent'len x__) ())))))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4TruncateEnterFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4TruncateEnterFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4TruncateEnterFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4TruncateEnterFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.blocks' @:: Lens' Ext4TruncateEnterFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'blocks' @:: Lens' Ext4TruncateEnterFtraceEvent (Prelude.Maybe Data.Word.Word64)@ -}
data Ext4TruncateEnterFtraceEvent
  = Ext4TruncateEnterFtraceEvent'_constructor {_Ext4TruncateEnterFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                               _Ext4TruncateEnterFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                               _Ext4TruncateEnterFtraceEvent'blocks :: !(Prelude.Maybe Data.Word.Word64),
                                               _Ext4TruncateEnterFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4TruncateEnterFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4TruncateEnterFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4TruncateEnterFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4TruncateEnterFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4TruncateEnterFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4TruncateEnterFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4TruncateEnterFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4TruncateEnterFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4TruncateEnterFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4TruncateEnterFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4TruncateEnterFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4TruncateEnterFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4TruncateEnterFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4TruncateEnterFtraceEvent "blocks" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4TruncateEnterFtraceEvent'blocks
           (\ x__ y__ -> x__ {_Ext4TruncateEnterFtraceEvent'blocks = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4TruncateEnterFtraceEvent "maybe'blocks" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4TruncateEnterFtraceEvent'blocks
           (\ x__ y__ -> x__ {_Ext4TruncateEnterFtraceEvent'blocks = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4TruncateEnterFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4TruncateEnterFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \\FSExt4TruncateEnterFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\SYN\n\
      \\ACKblocks\CAN\ETX \SOH(\EOTR\ACKblocks"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4TruncateEnterFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4TruncateEnterFtraceEvent
        blocks__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "blocks"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'blocks")) ::
              Data.ProtoLens.FieldDescriptor Ext4TruncateEnterFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, blocks__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4TruncateEnterFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__ {_Ext4TruncateEnterFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4TruncateEnterFtraceEvent'_constructor
        {_Ext4TruncateEnterFtraceEvent'dev = Prelude.Nothing,
         _Ext4TruncateEnterFtraceEvent'ino = Prelude.Nothing,
         _Ext4TruncateEnterFtraceEvent'blocks = Prelude.Nothing,
         _Ext4TruncateEnterFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4TruncateEnterFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4TruncateEnterFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "blocks"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"blocks") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "Ext4TruncateEnterFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'blocks") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                   (Data.ProtoLens.Encoding.Wire.buildFieldSet
                      (Lens.Family2.view Data.ProtoLens.unknownFields _x))))
instance Control.DeepSeq.NFData Ext4TruncateEnterFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4TruncateEnterFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4TruncateEnterFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4TruncateEnterFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4TruncateEnterFtraceEvent'blocks x__) ())))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4TruncateExitFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4TruncateExitFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4TruncateExitFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4TruncateExitFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.blocks' @:: Lens' Ext4TruncateExitFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'blocks' @:: Lens' Ext4TruncateExitFtraceEvent (Prelude.Maybe Data.Word.Word64)@ -}
data Ext4TruncateExitFtraceEvent
  = Ext4TruncateExitFtraceEvent'_constructor {_Ext4TruncateExitFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                              _Ext4TruncateExitFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                              _Ext4TruncateExitFtraceEvent'blocks :: !(Prelude.Maybe Data.Word.Word64),
                                              _Ext4TruncateExitFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4TruncateExitFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4TruncateExitFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4TruncateExitFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4TruncateExitFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4TruncateExitFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4TruncateExitFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4TruncateExitFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4TruncateExitFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4TruncateExitFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4TruncateExitFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4TruncateExitFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4TruncateExitFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4TruncateExitFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4TruncateExitFtraceEvent "blocks" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4TruncateExitFtraceEvent'blocks
           (\ x__ y__ -> x__ {_Ext4TruncateExitFtraceEvent'blocks = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4TruncateExitFtraceEvent "maybe'blocks" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4TruncateExitFtraceEvent'blocks
           (\ x__ y__ -> x__ {_Ext4TruncateExitFtraceEvent'blocks = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4TruncateExitFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4TruncateExitFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \\ESCExt4TruncateExitFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\SYN\n\
      \\ACKblocks\CAN\ETX \SOH(\EOTR\ACKblocks"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4TruncateExitFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4TruncateExitFtraceEvent
        blocks__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "blocks"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'blocks")) ::
              Data.ProtoLens.FieldDescriptor Ext4TruncateExitFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, blocks__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4TruncateExitFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__ {_Ext4TruncateExitFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4TruncateExitFtraceEvent'_constructor
        {_Ext4TruncateExitFtraceEvent'dev = Prelude.Nothing,
         _Ext4TruncateExitFtraceEvent'ino = Prelude.Nothing,
         _Ext4TruncateExitFtraceEvent'blocks = Prelude.Nothing,
         _Ext4TruncateExitFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4TruncateExitFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4TruncateExitFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "blocks"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"blocks") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "Ext4TruncateExitFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'blocks") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                   (Data.ProtoLens.Encoding.Wire.buildFieldSet
                      (Lens.Family2.view Data.ProtoLens.unknownFields _x))))
instance Control.DeepSeq.NFData Ext4TruncateExitFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4TruncateExitFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4TruncateExitFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4TruncateExitFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4TruncateExitFtraceEvent'blocks x__) ())))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4UnlinkEnterFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4UnlinkEnterFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4UnlinkEnterFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4UnlinkEnterFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.parent' @:: Lens' Ext4UnlinkEnterFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'parent' @:: Lens' Ext4UnlinkEnterFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.size' @:: Lens' Ext4UnlinkEnterFtraceEvent Data.Int.Int64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'size' @:: Lens' Ext4UnlinkEnterFtraceEvent (Prelude.Maybe Data.Int.Int64)@ -}
data Ext4UnlinkEnterFtraceEvent
  = Ext4UnlinkEnterFtraceEvent'_constructor {_Ext4UnlinkEnterFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                             _Ext4UnlinkEnterFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                             _Ext4UnlinkEnterFtraceEvent'parent :: !(Prelude.Maybe Data.Word.Word64),
                                             _Ext4UnlinkEnterFtraceEvent'size :: !(Prelude.Maybe Data.Int.Int64),
                                             _Ext4UnlinkEnterFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4UnlinkEnterFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4UnlinkEnterFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4UnlinkEnterFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4UnlinkEnterFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4UnlinkEnterFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4UnlinkEnterFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4UnlinkEnterFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4UnlinkEnterFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4UnlinkEnterFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4UnlinkEnterFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4UnlinkEnterFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4UnlinkEnterFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4UnlinkEnterFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4UnlinkEnterFtraceEvent "parent" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4UnlinkEnterFtraceEvent'parent
           (\ x__ y__ -> x__ {_Ext4UnlinkEnterFtraceEvent'parent = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4UnlinkEnterFtraceEvent "maybe'parent" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4UnlinkEnterFtraceEvent'parent
           (\ x__ y__ -> x__ {_Ext4UnlinkEnterFtraceEvent'parent = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4UnlinkEnterFtraceEvent "size" Data.Int.Int64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4UnlinkEnterFtraceEvent'size
           (\ x__ y__ -> x__ {_Ext4UnlinkEnterFtraceEvent'size = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4UnlinkEnterFtraceEvent "maybe'size" (Prelude.Maybe Data.Int.Int64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4UnlinkEnterFtraceEvent'size
           (\ x__ y__ -> x__ {_Ext4UnlinkEnterFtraceEvent'size = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4UnlinkEnterFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4UnlinkEnterFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \\SUBExt4UnlinkEnterFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\SYN\n\
      \\ACKparent\CAN\ETX \SOH(\EOTR\ACKparent\DC2\DC2\n\
      \\EOTsize\CAN\EOT \SOH(\ETXR\EOTsize"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4UnlinkEnterFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4UnlinkEnterFtraceEvent
        parent__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "parent"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'parent")) ::
              Data.ProtoLens.FieldDescriptor Ext4UnlinkEnterFtraceEvent
        size__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "size"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'size")) ::
              Data.ProtoLens.FieldDescriptor Ext4UnlinkEnterFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, parent__field_descriptor),
           (Data.ProtoLens.Tag 4, size__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4UnlinkEnterFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__ {_Ext4UnlinkEnterFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4UnlinkEnterFtraceEvent'_constructor
        {_Ext4UnlinkEnterFtraceEvent'dev = Prelude.Nothing,
         _Ext4UnlinkEnterFtraceEvent'ino = Prelude.Nothing,
         _Ext4UnlinkEnterFtraceEvent'parent = Prelude.Nothing,
         _Ext4UnlinkEnterFtraceEvent'size = Prelude.Nothing,
         _Ext4UnlinkEnterFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4UnlinkEnterFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4UnlinkEnterFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "parent"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"parent") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "size"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"size") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "Ext4UnlinkEnterFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'parent") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'size") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                      (Data.ProtoLens.Encoding.Wire.buildFieldSet
                         (Lens.Family2.view Data.ProtoLens.unknownFields _x)))))
instance Control.DeepSeq.NFData Ext4UnlinkEnterFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4UnlinkEnterFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4UnlinkEnterFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4UnlinkEnterFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4UnlinkEnterFtraceEvent'parent x__)
                      (Control.DeepSeq.deepseq
                         (_Ext4UnlinkEnterFtraceEvent'size x__) ()))))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4UnlinkExitFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4UnlinkExitFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4UnlinkExitFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4UnlinkExitFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ret' @:: Lens' Ext4UnlinkExitFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ret' @:: Lens' Ext4UnlinkExitFtraceEvent (Prelude.Maybe Data.Int.Int32)@ -}
data Ext4UnlinkExitFtraceEvent
  = Ext4UnlinkExitFtraceEvent'_constructor {_Ext4UnlinkExitFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                            _Ext4UnlinkExitFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                            _Ext4UnlinkExitFtraceEvent'ret :: !(Prelude.Maybe Data.Int.Int32),
                                            _Ext4UnlinkExitFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4UnlinkExitFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4UnlinkExitFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4UnlinkExitFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4UnlinkExitFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4UnlinkExitFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4UnlinkExitFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4UnlinkExitFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4UnlinkExitFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4UnlinkExitFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4UnlinkExitFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4UnlinkExitFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4UnlinkExitFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4UnlinkExitFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4UnlinkExitFtraceEvent "ret" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4UnlinkExitFtraceEvent'ret
           (\ x__ y__ -> x__ {_Ext4UnlinkExitFtraceEvent'ret = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4UnlinkExitFtraceEvent "maybe'ret" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4UnlinkExitFtraceEvent'ret
           (\ x__ y__ -> x__ {_Ext4UnlinkExitFtraceEvent'ret = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4UnlinkExitFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4UnlinkExitFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \\EMExt4UnlinkExitFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DLE\n\
      \\ETXret\CAN\ETX \SOH(\ENQR\ETXret"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4UnlinkExitFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4UnlinkExitFtraceEvent
        ret__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ret"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ret")) ::
              Data.ProtoLens.FieldDescriptor Ext4UnlinkExitFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, ret__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4UnlinkExitFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__ {_Ext4UnlinkExitFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4UnlinkExitFtraceEvent'_constructor
        {_Ext4UnlinkExitFtraceEvent'dev = Prelude.Nothing,
         _Ext4UnlinkExitFtraceEvent'ino = Prelude.Nothing,
         _Ext4UnlinkExitFtraceEvent'ret = Prelude.Nothing,
         _Ext4UnlinkExitFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4UnlinkExitFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4UnlinkExitFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "ret"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ret") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "Ext4UnlinkExitFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ret") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   (Data.ProtoLens.Encoding.Wire.buildFieldSet
                      (Lens.Family2.view Data.ProtoLens.unknownFields _x))))
instance Control.DeepSeq.NFData Ext4UnlinkExitFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4UnlinkExitFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4UnlinkExitFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4UnlinkExitFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq (_Ext4UnlinkExitFtraceEvent'ret x__) ())))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4WriteBeginFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4WriteBeginFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4WriteBeginFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4WriteBeginFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.pos' @:: Lens' Ext4WriteBeginFtraceEvent Data.Int.Int64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'pos' @:: Lens' Ext4WriteBeginFtraceEvent (Prelude.Maybe Data.Int.Int64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.len' @:: Lens' Ext4WriteBeginFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'len' @:: Lens' Ext4WriteBeginFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.flags' @:: Lens' Ext4WriteBeginFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'flags' @:: Lens' Ext4WriteBeginFtraceEvent (Prelude.Maybe Data.Word.Word32)@ -}
data Ext4WriteBeginFtraceEvent
  = Ext4WriteBeginFtraceEvent'_constructor {_Ext4WriteBeginFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                            _Ext4WriteBeginFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                            _Ext4WriteBeginFtraceEvent'pos :: !(Prelude.Maybe Data.Int.Int64),
                                            _Ext4WriteBeginFtraceEvent'len :: !(Prelude.Maybe Data.Word.Word32),
                                            _Ext4WriteBeginFtraceEvent'flags :: !(Prelude.Maybe Data.Word.Word32),
                                            _Ext4WriteBeginFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4WriteBeginFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4WriteBeginFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4WriteBeginFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4WriteBeginFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4WriteBeginFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4WriteBeginFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4WriteBeginFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4WriteBeginFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4WriteBeginFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4WriteBeginFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4WriteBeginFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4WriteBeginFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4WriteBeginFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4WriteBeginFtraceEvent "pos" Data.Int.Int64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4WriteBeginFtraceEvent'pos
           (\ x__ y__ -> x__ {_Ext4WriteBeginFtraceEvent'pos = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4WriteBeginFtraceEvent "maybe'pos" (Prelude.Maybe Data.Int.Int64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4WriteBeginFtraceEvent'pos
           (\ x__ y__ -> x__ {_Ext4WriteBeginFtraceEvent'pos = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4WriteBeginFtraceEvent "len" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4WriteBeginFtraceEvent'len
           (\ x__ y__ -> x__ {_Ext4WriteBeginFtraceEvent'len = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4WriteBeginFtraceEvent "maybe'len" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4WriteBeginFtraceEvent'len
           (\ x__ y__ -> x__ {_Ext4WriteBeginFtraceEvent'len = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4WriteBeginFtraceEvent "flags" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4WriteBeginFtraceEvent'flags
           (\ x__ y__ -> x__ {_Ext4WriteBeginFtraceEvent'flags = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4WriteBeginFtraceEvent "maybe'flags" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4WriteBeginFtraceEvent'flags
           (\ x__ y__ -> x__ {_Ext4WriteBeginFtraceEvent'flags = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4WriteBeginFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4WriteBeginFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \\EMExt4WriteBeginFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DLE\n\
      \\ETXpos\CAN\ETX \SOH(\ETXR\ETXpos\DC2\DLE\n\
      \\ETXlen\CAN\EOT \SOH(\rR\ETXlen\DC2\DC4\n\
      \\ENQflags\CAN\ENQ \SOH(\rR\ENQflags"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4WriteBeginFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4WriteBeginFtraceEvent
        pos__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "pos"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'pos")) ::
              Data.ProtoLens.FieldDescriptor Ext4WriteBeginFtraceEvent
        len__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "len"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'len")) ::
              Data.ProtoLens.FieldDescriptor Ext4WriteBeginFtraceEvent
        flags__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "flags"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'flags")) ::
              Data.ProtoLens.FieldDescriptor Ext4WriteBeginFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, pos__field_descriptor),
           (Data.ProtoLens.Tag 4, len__field_descriptor),
           (Data.ProtoLens.Tag 5, flags__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4WriteBeginFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__ {_Ext4WriteBeginFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4WriteBeginFtraceEvent'_constructor
        {_Ext4WriteBeginFtraceEvent'dev = Prelude.Nothing,
         _Ext4WriteBeginFtraceEvent'ino = Prelude.Nothing,
         _Ext4WriteBeginFtraceEvent'pos = Prelude.Nothing,
         _Ext4WriteBeginFtraceEvent'len = Prelude.Nothing,
         _Ext4WriteBeginFtraceEvent'flags = Prelude.Nothing,
         _Ext4WriteBeginFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4WriteBeginFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4WriteBeginFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "pos"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"pos") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "len"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"len") y x)
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "flags"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"flags") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "Ext4WriteBeginFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'pos") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'len") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'flags") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral
                                      _v))
                         (Data.ProtoLens.Encoding.Wire.buildFieldSet
                            (Lens.Family2.view Data.ProtoLens.unknownFields _x))))))
instance Control.DeepSeq.NFData Ext4WriteBeginFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4WriteBeginFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4WriteBeginFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4WriteBeginFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4WriteBeginFtraceEvent'pos x__)
                      (Control.DeepSeq.deepseq
                         (_Ext4WriteBeginFtraceEvent'len x__)
                         (Control.DeepSeq.deepseq
                            (_Ext4WriteBeginFtraceEvent'flags x__) ())))))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4WriteEndFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4WriteEndFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4WriteEndFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4WriteEndFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.pos' @:: Lens' Ext4WriteEndFtraceEvent Data.Int.Int64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'pos' @:: Lens' Ext4WriteEndFtraceEvent (Prelude.Maybe Data.Int.Int64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.len' @:: Lens' Ext4WriteEndFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'len' @:: Lens' Ext4WriteEndFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.copied' @:: Lens' Ext4WriteEndFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'copied' @:: Lens' Ext4WriteEndFtraceEvent (Prelude.Maybe Data.Word.Word32)@ -}
data Ext4WriteEndFtraceEvent
  = Ext4WriteEndFtraceEvent'_constructor {_Ext4WriteEndFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                          _Ext4WriteEndFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                          _Ext4WriteEndFtraceEvent'pos :: !(Prelude.Maybe Data.Int.Int64),
                                          _Ext4WriteEndFtraceEvent'len :: !(Prelude.Maybe Data.Word.Word32),
                                          _Ext4WriteEndFtraceEvent'copied :: !(Prelude.Maybe Data.Word.Word32),
                                          _Ext4WriteEndFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4WriteEndFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4WriteEndFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4WriteEndFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4WriteEndFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4WriteEndFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4WriteEndFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4WriteEndFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4WriteEndFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4WriteEndFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4WriteEndFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4WriteEndFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4WriteEndFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4WriteEndFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4WriteEndFtraceEvent "pos" Data.Int.Int64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4WriteEndFtraceEvent'pos
           (\ x__ y__ -> x__ {_Ext4WriteEndFtraceEvent'pos = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4WriteEndFtraceEvent "maybe'pos" (Prelude.Maybe Data.Int.Int64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4WriteEndFtraceEvent'pos
           (\ x__ y__ -> x__ {_Ext4WriteEndFtraceEvent'pos = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4WriteEndFtraceEvent "len" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4WriteEndFtraceEvent'len
           (\ x__ y__ -> x__ {_Ext4WriteEndFtraceEvent'len = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4WriteEndFtraceEvent "maybe'len" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4WriteEndFtraceEvent'len
           (\ x__ y__ -> x__ {_Ext4WriteEndFtraceEvent'len = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4WriteEndFtraceEvent "copied" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4WriteEndFtraceEvent'copied
           (\ x__ y__ -> x__ {_Ext4WriteEndFtraceEvent'copied = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4WriteEndFtraceEvent "maybe'copied" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4WriteEndFtraceEvent'copied
           (\ x__ y__ -> x__ {_Ext4WriteEndFtraceEvent'copied = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4WriteEndFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4WriteEndFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \\ETBExt4WriteEndFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DLE\n\
      \\ETXpos\CAN\ETX \SOH(\ETXR\ETXpos\DC2\DLE\n\
      \\ETXlen\CAN\EOT \SOH(\rR\ETXlen\DC2\SYN\n\
      \\ACKcopied\CAN\ENQ \SOH(\rR\ACKcopied"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4WriteEndFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4WriteEndFtraceEvent
        pos__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "pos"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'pos")) ::
              Data.ProtoLens.FieldDescriptor Ext4WriteEndFtraceEvent
        len__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "len"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'len")) ::
              Data.ProtoLens.FieldDescriptor Ext4WriteEndFtraceEvent
        copied__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "copied"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'copied")) ::
              Data.ProtoLens.FieldDescriptor Ext4WriteEndFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, pos__field_descriptor),
           (Data.ProtoLens.Tag 4, len__field_descriptor),
           (Data.ProtoLens.Tag 5, copied__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4WriteEndFtraceEvent'_unknownFields
        (\ x__ y__ -> x__ {_Ext4WriteEndFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4WriteEndFtraceEvent'_constructor
        {_Ext4WriteEndFtraceEvent'dev = Prelude.Nothing,
         _Ext4WriteEndFtraceEvent'ino = Prelude.Nothing,
         _Ext4WriteEndFtraceEvent'pos = Prelude.Nothing,
         _Ext4WriteEndFtraceEvent'len = Prelude.Nothing,
         _Ext4WriteEndFtraceEvent'copied = Prelude.Nothing,
         _Ext4WriteEndFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4WriteEndFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4WriteEndFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "pos"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"pos") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "len"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"len") y x)
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "copied"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"copied") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "Ext4WriteEndFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'pos") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'len") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'copied") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral
                                      _v))
                         (Data.ProtoLens.Encoding.Wire.buildFieldSet
                            (Lens.Family2.view Data.ProtoLens.unknownFields _x))))))
instance Control.DeepSeq.NFData Ext4WriteEndFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4WriteEndFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4WriteEndFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4WriteEndFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4WriteEndFtraceEvent'pos x__)
                      (Control.DeepSeq.deepseq
                         (_Ext4WriteEndFtraceEvent'len x__)
                         (Control.DeepSeq.deepseq
                            (_Ext4WriteEndFtraceEvent'copied x__) ())))))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4WritepageFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4WritepageFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4WritepageFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4WritepageFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.index' @:: Lens' Ext4WritepageFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'index' @:: Lens' Ext4WritepageFtraceEvent (Prelude.Maybe Data.Word.Word64)@ -}
data Ext4WritepageFtraceEvent
  = Ext4WritepageFtraceEvent'_constructor {_Ext4WritepageFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                           _Ext4WritepageFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                           _Ext4WritepageFtraceEvent'index :: !(Prelude.Maybe Data.Word.Word64),
                                           _Ext4WritepageFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4WritepageFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4WritepageFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4WritepageFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4WritepageFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4WritepageFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4WritepageFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4WritepageFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4WritepageFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4WritepageFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4WritepageFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4WritepageFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4WritepageFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4WritepageFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4WritepageFtraceEvent "index" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4WritepageFtraceEvent'index
           (\ x__ y__ -> x__ {_Ext4WritepageFtraceEvent'index = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4WritepageFtraceEvent "maybe'index" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4WritepageFtraceEvent'index
           (\ x__ y__ -> x__ {_Ext4WritepageFtraceEvent'index = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4WritepageFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4WritepageFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \\CANExt4WritepageFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DC4\n\
      \\ENQindex\CAN\ETX \SOH(\EOTR\ENQindex"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4WritepageFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4WritepageFtraceEvent
        index__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "index"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'index")) ::
              Data.ProtoLens.FieldDescriptor Ext4WritepageFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, index__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4WritepageFtraceEvent'_unknownFields
        (\ x__ y__ -> x__ {_Ext4WritepageFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4WritepageFtraceEvent'_constructor
        {_Ext4WritepageFtraceEvent'dev = Prelude.Nothing,
         _Ext4WritepageFtraceEvent'ino = Prelude.Nothing,
         _Ext4WritepageFtraceEvent'index = Prelude.Nothing,
         _Ext4WritepageFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4WritepageFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4WritepageFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "index"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"index") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "Ext4WritepageFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'index") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                   (Data.ProtoLens.Encoding.Wire.buildFieldSet
                      (Lens.Family2.view Data.ProtoLens.unknownFields _x))))
instance Control.DeepSeq.NFData Ext4WritepageFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4WritepageFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4WritepageFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4WritepageFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4WritepageFtraceEvent'index x__) ())))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4WritepagesFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4WritepagesFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4WritepagesFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4WritepagesFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.nrToWrite' @:: Lens' Ext4WritepagesFtraceEvent Data.Int.Int64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'nrToWrite' @:: Lens' Ext4WritepagesFtraceEvent (Prelude.Maybe Data.Int.Int64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.pagesSkipped' @:: Lens' Ext4WritepagesFtraceEvent Data.Int.Int64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'pagesSkipped' @:: Lens' Ext4WritepagesFtraceEvent (Prelude.Maybe Data.Int.Int64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.rangeStart' @:: Lens' Ext4WritepagesFtraceEvent Data.Int.Int64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'rangeStart' @:: Lens' Ext4WritepagesFtraceEvent (Prelude.Maybe Data.Int.Int64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.rangeEnd' @:: Lens' Ext4WritepagesFtraceEvent Data.Int.Int64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'rangeEnd' @:: Lens' Ext4WritepagesFtraceEvent (Prelude.Maybe Data.Int.Int64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.writebackIndex' @:: Lens' Ext4WritepagesFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'writebackIndex' @:: Lens' Ext4WritepagesFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.syncMode' @:: Lens' Ext4WritepagesFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'syncMode' @:: Lens' Ext4WritepagesFtraceEvent (Prelude.Maybe Data.Int.Int32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.forKupdate' @:: Lens' Ext4WritepagesFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'forKupdate' @:: Lens' Ext4WritepagesFtraceEvent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.rangeCyclic' @:: Lens' Ext4WritepagesFtraceEvent Data.Word.Word32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'rangeCyclic' @:: Lens' Ext4WritepagesFtraceEvent (Prelude.Maybe Data.Word.Word32)@ -}
data Ext4WritepagesFtraceEvent
  = Ext4WritepagesFtraceEvent'_constructor {_Ext4WritepagesFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                            _Ext4WritepagesFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                            _Ext4WritepagesFtraceEvent'nrToWrite :: !(Prelude.Maybe Data.Int.Int64),
                                            _Ext4WritepagesFtraceEvent'pagesSkipped :: !(Prelude.Maybe Data.Int.Int64),
                                            _Ext4WritepagesFtraceEvent'rangeStart :: !(Prelude.Maybe Data.Int.Int64),
                                            _Ext4WritepagesFtraceEvent'rangeEnd :: !(Prelude.Maybe Data.Int.Int64),
                                            _Ext4WritepagesFtraceEvent'writebackIndex :: !(Prelude.Maybe Data.Word.Word64),
                                            _Ext4WritepagesFtraceEvent'syncMode :: !(Prelude.Maybe Data.Int.Int32),
                                            _Ext4WritepagesFtraceEvent'forKupdate :: !(Prelude.Maybe Data.Word.Word32),
                                            _Ext4WritepagesFtraceEvent'rangeCyclic :: !(Prelude.Maybe Data.Word.Word32),
                                            _Ext4WritepagesFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4WritepagesFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4WritepagesFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4WritepagesFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4WritepagesFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4WritepagesFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4WritepagesFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4WritepagesFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4WritepagesFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4WritepagesFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4WritepagesFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4WritepagesFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4WritepagesFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4WritepagesFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4WritepagesFtraceEvent "nrToWrite" Data.Int.Int64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4WritepagesFtraceEvent'nrToWrite
           (\ x__ y__ -> x__ {_Ext4WritepagesFtraceEvent'nrToWrite = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4WritepagesFtraceEvent "maybe'nrToWrite" (Prelude.Maybe Data.Int.Int64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4WritepagesFtraceEvent'nrToWrite
           (\ x__ y__ -> x__ {_Ext4WritepagesFtraceEvent'nrToWrite = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4WritepagesFtraceEvent "pagesSkipped" Data.Int.Int64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4WritepagesFtraceEvent'pagesSkipped
           (\ x__ y__ -> x__ {_Ext4WritepagesFtraceEvent'pagesSkipped = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4WritepagesFtraceEvent "maybe'pagesSkipped" (Prelude.Maybe Data.Int.Int64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4WritepagesFtraceEvent'pagesSkipped
           (\ x__ y__ -> x__ {_Ext4WritepagesFtraceEvent'pagesSkipped = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4WritepagesFtraceEvent "rangeStart" Data.Int.Int64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4WritepagesFtraceEvent'rangeStart
           (\ x__ y__ -> x__ {_Ext4WritepagesFtraceEvent'rangeStart = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4WritepagesFtraceEvent "maybe'rangeStart" (Prelude.Maybe Data.Int.Int64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4WritepagesFtraceEvent'rangeStart
           (\ x__ y__ -> x__ {_Ext4WritepagesFtraceEvent'rangeStart = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4WritepagesFtraceEvent "rangeEnd" Data.Int.Int64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4WritepagesFtraceEvent'rangeEnd
           (\ x__ y__ -> x__ {_Ext4WritepagesFtraceEvent'rangeEnd = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4WritepagesFtraceEvent "maybe'rangeEnd" (Prelude.Maybe Data.Int.Int64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4WritepagesFtraceEvent'rangeEnd
           (\ x__ y__ -> x__ {_Ext4WritepagesFtraceEvent'rangeEnd = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4WritepagesFtraceEvent "writebackIndex" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4WritepagesFtraceEvent'writebackIndex
           (\ x__ y__
              -> x__ {_Ext4WritepagesFtraceEvent'writebackIndex = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4WritepagesFtraceEvent "maybe'writebackIndex" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4WritepagesFtraceEvent'writebackIndex
           (\ x__ y__
              -> x__ {_Ext4WritepagesFtraceEvent'writebackIndex = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4WritepagesFtraceEvent "syncMode" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4WritepagesFtraceEvent'syncMode
           (\ x__ y__ -> x__ {_Ext4WritepagesFtraceEvent'syncMode = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4WritepagesFtraceEvent "maybe'syncMode" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4WritepagesFtraceEvent'syncMode
           (\ x__ y__ -> x__ {_Ext4WritepagesFtraceEvent'syncMode = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4WritepagesFtraceEvent "forKupdate" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4WritepagesFtraceEvent'forKupdate
           (\ x__ y__ -> x__ {_Ext4WritepagesFtraceEvent'forKupdate = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4WritepagesFtraceEvent "maybe'forKupdate" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4WritepagesFtraceEvent'forKupdate
           (\ x__ y__ -> x__ {_Ext4WritepagesFtraceEvent'forKupdate = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4WritepagesFtraceEvent "rangeCyclic" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4WritepagesFtraceEvent'rangeCyclic
           (\ x__ y__ -> x__ {_Ext4WritepagesFtraceEvent'rangeCyclic = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4WritepagesFtraceEvent "maybe'rangeCyclic" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4WritepagesFtraceEvent'rangeCyclic
           (\ x__ y__ -> x__ {_Ext4WritepagesFtraceEvent'rangeCyclic = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4WritepagesFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4WritepagesFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \\EMExt4WritepagesFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\RS\n\
      \\vnr_to_write\CAN\ETX \SOH(\ETXR\tnrToWrite\DC2#\n\
      \\rpages_skipped\CAN\EOT \SOH(\ETXR\fpagesSkipped\DC2\US\n\
      \\vrange_start\CAN\ENQ \SOH(\ETXR\n\
      \rangeStart\DC2\ESC\n\
      \\trange_end\CAN\ACK \SOH(\ETXR\brangeEnd\DC2'\n\
      \\SIwriteback_index\CAN\a \SOH(\EOTR\SOwritebackIndex\DC2\ESC\n\
      \\tsync_mode\CAN\b \SOH(\ENQR\bsyncMode\DC2\US\n\
      \\vfor_kupdate\CAN\t \SOH(\rR\n\
      \forKupdate\DC2!\n\
      \\frange_cyclic\CAN\n\
      \ \SOH(\rR\vrangeCyclic"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4WritepagesFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4WritepagesFtraceEvent
        nrToWrite__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "nr_to_write"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'nrToWrite")) ::
              Data.ProtoLens.FieldDescriptor Ext4WritepagesFtraceEvent
        pagesSkipped__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "pages_skipped"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'pagesSkipped")) ::
              Data.ProtoLens.FieldDescriptor Ext4WritepagesFtraceEvent
        rangeStart__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "range_start"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'rangeStart")) ::
              Data.ProtoLens.FieldDescriptor Ext4WritepagesFtraceEvent
        rangeEnd__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "range_end"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'rangeEnd")) ::
              Data.ProtoLens.FieldDescriptor Ext4WritepagesFtraceEvent
        writebackIndex__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "writeback_index"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'writebackIndex")) ::
              Data.ProtoLens.FieldDescriptor Ext4WritepagesFtraceEvent
        syncMode__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "sync_mode"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'syncMode")) ::
              Data.ProtoLens.FieldDescriptor Ext4WritepagesFtraceEvent
        forKupdate__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "for_kupdate"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'forKupdate")) ::
              Data.ProtoLens.FieldDescriptor Ext4WritepagesFtraceEvent
        rangeCyclic__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "range_cyclic"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'rangeCyclic")) ::
              Data.ProtoLens.FieldDescriptor Ext4WritepagesFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, nrToWrite__field_descriptor),
           (Data.ProtoLens.Tag 4, pagesSkipped__field_descriptor),
           (Data.ProtoLens.Tag 5, rangeStart__field_descriptor),
           (Data.ProtoLens.Tag 6, rangeEnd__field_descriptor),
           (Data.ProtoLens.Tag 7, writebackIndex__field_descriptor),
           (Data.ProtoLens.Tag 8, syncMode__field_descriptor),
           (Data.ProtoLens.Tag 9, forKupdate__field_descriptor),
           (Data.ProtoLens.Tag 10, rangeCyclic__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4WritepagesFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__ {_Ext4WritepagesFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4WritepagesFtraceEvent'_constructor
        {_Ext4WritepagesFtraceEvent'dev = Prelude.Nothing,
         _Ext4WritepagesFtraceEvent'ino = Prelude.Nothing,
         _Ext4WritepagesFtraceEvent'nrToWrite = Prelude.Nothing,
         _Ext4WritepagesFtraceEvent'pagesSkipped = Prelude.Nothing,
         _Ext4WritepagesFtraceEvent'rangeStart = Prelude.Nothing,
         _Ext4WritepagesFtraceEvent'rangeEnd = Prelude.Nothing,
         _Ext4WritepagesFtraceEvent'writebackIndex = Prelude.Nothing,
         _Ext4WritepagesFtraceEvent'syncMode = Prelude.Nothing,
         _Ext4WritepagesFtraceEvent'forKupdate = Prelude.Nothing,
         _Ext4WritepagesFtraceEvent'rangeCyclic = Prelude.Nothing,
         _Ext4WritepagesFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4WritepagesFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4WritepagesFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "nr_to_write"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"nrToWrite") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "pages_skipped"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"pagesSkipped") y x)
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "range_start"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"rangeStart") y x)
                        48
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "range_end"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"rangeEnd") y x)
                        56
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "writeback_index"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"writebackIndex") y x)
                        64
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "sync_mode"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"syncMode") y x)
                        72
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "for_kupdate"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"forKupdate") y x)
                        80
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "range_cyclic"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"rangeCyclic") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "Ext4WritepagesFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view
                          (Data.ProtoLens.Field.field @"maybe'nrToWrite") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view
                             (Data.ProtoLens.Field.field @"maybe'pagesSkipped") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view
                                (Data.ProtoLens.Field.field @"maybe'rangeStart") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral
                                      _v))
                         ((Data.Monoid.<>)
                            (case
                                 Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'rangeEnd") _x
                             of
                               Prelude.Nothing -> Data.Monoid.mempty
                               (Prelude.Just _v)
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 48)
                                      ((Prelude..)
                                         Data.ProtoLens.Encoding.Bytes.putVarInt
                                         Prelude.fromIntegral _v))
                            ((Data.Monoid.<>)
                               (case
                                    Lens.Family2.view
                                      (Data.ProtoLens.Field.field @"maybe'writebackIndex") _x
                                of
                                  Prelude.Nothing -> Data.Monoid.mempty
                                  (Prelude.Just _v)
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt 56)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                               ((Data.Monoid.<>)
                                  (case
                                       Lens.Family2.view
                                         (Data.ProtoLens.Field.field @"maybe'syncMode") _x
                                   of
                                     Prelude.Nothing -> Data.Monoid.mempty
                                     (Prelude.Just _v)
                                       -> (Data.Monoid.<>)
                                            (Data.ProtoLens.Encoding.Bytes.putVarInt 64)
                                            ((Prelude..)
                                               Data.ProtoLens.Encoding.Bytes.putVarInt
                                               Prelude.fromIntegral _v))
                                  ((Data.Monoid.<>)
                                     (case
                                          Lens.Family2.view
                                            (Data.ProtoLens.Field.field @"maybe'forKupdate") _x
                                      of
                                        Prelude.Nothing -> Data.Monoid.mempty
                                        (Prelude.Just _v)
                                          -> (Data.Monoid.<>)
                                               (Data.ProtoLens.Encoding.Bytes.putVarInt 72)
                                               ((Prelude..)
                                                  Data.ProtoLens.Encoding.Bytes.putVarInt
                                                  Prelude.fromIntegral _v))
                                     ((Data.Monoid.<>)
                                        (case
                                             Lens.Family2.view
                                               (Data.ProtoLens.Field.field @"maybe'rangeCyclic") _x
                                         of
                                           Prelude.Nothing -> Data.Monoid.mempty
                                           (Prelude.Just _v)
                                             -> (Data.Monoid.<>)
                                                  (Data.ProtoLens.Encoding.Bytes.putVarInt 80)
                                                  ((Prelude..)
                                                     Data.ProtoLens.Encoding.Bytes.putVarInt
                                                     Prelude.fromIntegral _v))
                                        (Data.ProtoLens.Encoding.Wire.buildFieldSet
                                           (Lens.Family2.view
                                              Data.ProtoLens.unknownFields _x)))))))))))
instance Control.DeepSeq.NFData Ext4WritepagesFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4WritepagesFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4WritepagesFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4WritepagesFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4WritepagesFtraceEvent'nrToWrite x__)
                      (Control.DeepSeq.deepseq
                         (_Ext4WritepagesFtraceEvent'pagesSkipped x__)
                         (Control.DeepSeq.deepseq
                            (_Ext4WritepagesFtraceEvent'rangeStart x__)
                            (Control.DeepSeq.deepseq
                               (_Ext4WritepagesFtraceEvent'rangeEnd x__)
                               (Control.DeepSeq.deepseq
                                  (_Ext4WritepagesFtraceEvent'writebackIndex x__)
                                  (Control.DeepSeq.deepseq
                                     (_Ext4WritepagesFtraceEvent'syncMode x__)
                                     (Control.DeepSeq.deepseq
                                        (_Ext4WritepagesFtraceEvent'forKupdate x__)
                                        (Control.DeepSeq.deepseq
                                           (_Ext4WritepagesFtraceEvent'rangeCyclic x__) ()))))))))))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4WritepagesResultFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4WritepagesResultFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4WritepagesResultFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4WritepagesResultFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ret' @:: Lens' Ext4WritepagesResultFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ret' @:: Lens' Ext4WritepagesResultFtraceEvent (Prelude.Maybe Data.Int.Int32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.pagesWritten' @:: Lens' Ext4WritepagesResultFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'pagesWritten' @:: Lens' Ext4WritepagesResultFtraceEvent (Prelude.Maybe Data.Int.Int32)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.pagesSkipped' @:: Lens' Ext4WritepagesResultFtraceEvent Data.Int.Int64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'pagesSkipped' @:: Lens' Ext4WritepagesResultFtraceEvent (Prelude.Maybe Data.Int.Int64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.writebackIndex' @:: Lens' Ext4WritepagesResultFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'writebackIndex' @:: Lens' Ext4WritepagesResultFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.syncMode' @:: Lens' Ext4WritepagesResultFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'syncMode' @:: Lens' Ext4WritepagesResultFtraceEvent (Prelude.Maybe Data.Int.Int32)@ -}
data Ext4WritepagesResultFtraceEvent
  = Ext4WritepagesResultFtraceEvent'_constructor {_Ext4WritepagesResultFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                                  _Ext4WritepagesResultFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                                  _Ext4WritepagesResultFtraceEvent'ret :: !(Prelude.Maybe Data.Int.Int32),
                                                  _Ext4WritepagesResultFtraceEvent'pagesWritten :: !(Prelude.Maybe Data.Int.Int32),
                                                  _Ext4WritepagesResultFtraceEvent'pagesSkipped :: !(Prelude.Maybe Data.Int.Int64),
                                                  _Ext4WritepagesResultFtraceEvent'writebackIndex :: !(Prelude.Maybe Data.Word.Word64),
                                                  _Ext4WritepagesResultFtraceEvent'syncMode :: !(Prelude.Maybe Data.Int.Int32),
                                                  _Ext4WritepagesResultFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4WritepagesResultFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4WritepagesResultFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4WritepagesResultFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4WritepagesResultFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4WritepagesResultFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4WritepagesResultFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4WritepagesResultFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4WritepagesResultFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4WritepagesResultFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4WritepagesResultFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4WritepagesResultFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4WritepagesResultFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4WritepagesResultFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4WritepagesResultFtraceEvent "ret" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4WritepagesResultFtraceEvent'ret
           (\ x__ y__ -> x__ {_Ext4WritepagesResultFtraceEvent'ret = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4WritepagesResultFtraceEvent "maybe'ret" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4WritepagesResultFtraceEvent'ret
           (\ x__ y__ -> x__ {_Ext4WritepagesResultFtraceEvent'ret = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4WritepagesResultFtraceEvent "pagesWritten" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4WritepagesResultFtraceEvent'pagesWritten
           (\ x__ y__
              -> x__ {_Ext4WritepagesResultFtraceEvent'pagesWritten = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4WritepagesResultFtraceEvent "maybe'pagesWritten" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4WritepagesResultFtraceEvent'pagesWritten
           (\ x__ y__
              -> x__ {_Ext4WritepagesResultFtraceEvent'pagesWritten = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4WritepagesResultFtraceEvent "pagesSkipped" Data.Int.Int64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4WritepagesResultFtraceEvent'pagesSkipped
           (\ x__ y__
              -> x__ {_Ext4WritepagesResultFtraceEvent'pagesSkipped = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4WritepagesResultFtraceEvent "maybe'pagesSkipped" (Prelude.Maybe Data.Int.Int64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4WritepagesResultFtraceEvent'pagesSkipped
           (\ x__ y__
              -> x__ {_Ext4WritepagesResultFtraceEvent'pagesSkipped = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4WritepagesResultFtraceEvent "writebackIndex" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4WritepagesResultFtraceEvent'writebackIndex
           (\ x__ y__
              -> x__ {_Ext4WritepagesResultFtraceEvent'writebackIndex = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4WritepagesResultFtraceEvent "maybe'writebackIndex" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4WritepagesResultFtraceEvent'writebackIndex
           (\ x__ y__
              -> x__ {_Ext4WritepagesResultFtraceEvent'writebackIndex = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4WritepagesResultFtraceEvent "syncMode" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4WritepagesResultFtraceEvent'syncMode
           (\ x__ y__
              -> x__ {_Ext4WritepagesResultFtraceEvent'syncMode = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4WritepagesResultFtraceEvent "maybe'syncMode" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4WritepagesResultFtraceEvent'syncMode
           (\ x__ y__
              -> x__ {_Ext4WritepagesResultFtraceEvent'syncMode = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4WritepagesResultFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4WritepagesResultFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \\USExt4WritepagesResultFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DLE\n\
      \\ETXret\CAN\ETX \SOH(\ENQR\ETXret\DC2#\n\
      \\rpages_written\CAN\EOT \SOH(\ENQR\fpagesWritten\DC2#\n\
      \\rpages_skipped\CAN\ENQ \SOH(\ETXR\fpagesSkipped\DC2'\n\
      \\SIwriteback_index\CAN\ACK \SOH(\EOTR\SOwritebackIndex\DC2\ESC\n\
      \\tsync_mode\CAN\a \SOH(\ENQR\bsyncMode"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4WritepagesResultFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4WritepagesResultFtraceEvent
        ret__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ret"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ret")) ::
              Data.ProtoLens.FieldDescriptor Ext4WritepagesResultFtraceEvent
        pagesWritten__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "pages_written"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'pagesWritten")) ::
              Data.ProtoLens.FieldDescriptor Ext4WritepagesResultFtraceEvent
        pagesSkipped__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "pages_skipped"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'pagesSkipped")) ::
              Data.ProtoLens.FieldDescriptor Ext4WritepagesResultFtraceEvent
        writebackIndex__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "writeback_index"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'writebackIndex")) ::
              Data.ProtoLens.FieldDescriptor Ext4WritepagesResultFtraceEvent
        syncMode__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "sync_mode"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'syncMode")) ::
              Data.ProtoLens.FieldDescriptor Ext4WritepagesResultFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, ret__field_descriptor),
           (Data.ProtoLens.Tag 4, pagesWritten__field_descriptor),
           (Data.ProtoLens.Tag 5, pagesSkipped__field_descriptor),
           (Data.ProtoLens.Tag 6, writebackIndex__field_descriptor),
           (Data.ProtoLens.Tag 7, syncMode__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4WritepagesResultFtraceEvent'_unknownFields
        (\ x__ y__
           -> x__ {_Ext4WritepagesResultFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4WritepagesResultFtraceEvent'_constructor
        {_Ext4WritepagesResultFtraceEvent'dev = Prelude.Nothing,
         _Ext4WritepagesResultFtraceEvent'ino = Prelude.Nothing,
         _Ext4WritepagesResultFtraceEvent'ret = Prelude.Nothing,
         _Ext4WritepagesResultFtraceEvent'pagesWritten = Prelude.Nothing,
         _Ext4WritepagesResultFtraceEvent'pagesSkipped = Prelude.Nothing,
         _Ext4WritepagesResultFtraceEvent'writebackIndex = Prelude.Nothing,
         _Ext4WritepagesResultFtraceEvent'syncMode = Prelude.Nothing,
         _Ext4WritepagesResultFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4WritepagesResultFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4WritepagesResultFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "ret"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ret") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "pages_written"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"pagesWritten") y x)
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "pages_skipped"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"pagesSkipped") y x)
                        48
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "writeback_index"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"writebackIndex") y x)
                        56
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "sync_mode"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"syncMode") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage)
          "Ext4WritepagesResultFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ret") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view
                             (Data.ProtoLens.Field.field @"maybe'pagesWritten") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view
                                (Data.ProtoLens.Field.field @"maybe'pagesSkipped") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral
                                      _v))
                         ((Data.Monoid.<>)
                            (case
                                 Lens.Family2.view
                                   (Data.ProtoLens.Field.field @"maybe'writebackIndex") _x
                             of
                               Prelude.Nothing -> Data.Monoid.mempty
                               (Prelude.Just _v)
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 48)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                            ((Data.Monoid.<>)
                               (case
                                    Lens.Family2.view
                                      (Data.ProtoLens.Field.field @"maybe'syncMode") _x
                                of
                                  Prelude.Nothing -> Data.Monoid.mempty
                                  (Prelude.Just _v)
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt 56)
                                         ((Prelude..)
                                            Data.ProtoLens.Encoding.Bytes.putVarInt
                                            Prelude.fromIntegral _v))
                               (Data.ProtoLens.Encoding.Wire.buildFieldSet
                                  (Lens.Family2.view Data.ProtoLens.unknownFields _x))))))))
instance Control.DeepSeq.NFData Ext4WritepagesResultFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4WritepagesResultFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4WritepagesResultFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4WritepagesResultFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4WritepagesResultFtraceEvent'ret x__)
                      (Control.DeepSeq.deepseq
                         (_Ext4WritepagesResultFtraceEvent'pagesWritten x__)
                         (Control.DeepSeq.deepseq
                            (_Ext4WritepagesResultFtraceEvent'pagesSkipped x__)
                            (Control.DeepSeq.deepseq
                               (_Ext4WritepagesResultFtraceEvent'writebackIndex x__)
                               (Control.DeepSeq.deepseq
                                  (_Ext4WritepagesResultFtraceEvent'syncMode x__) ())))))))
{- | Fields :
     
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.dev' @:: Lens' Ext4ZeroRangeFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'dev' @:: Lens' Ext4ZeroRangeFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.ino' @:: Lens' Ext4ZeroRangeFtraceEvent Data.Word.Word64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'ino' @:: Lens' Ext4ZeroRangeFtraceEvent (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.offset' @:: Lens' Ext4ZeroRangeFtraceEvent Data.Int.Int64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'offset' @:: Lens' Ext4ZeroRangeFtraceEvent (Prelude.Maybe Data.Int.Int64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.len' @:: Lens' Ext4ZeroRangeFtraceEvent Data.Int.Int64@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'len' @:: Lens' Ext4ZeroRangeFtraceEvent (Prelude.Maybe Data.Int.Int64)@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.mode' @:: Lens' Ext4ZeroRangeFtraceEvent Data.Int.Int32@
         * 'Proto.Protos.Perfetto.Trace.Ftrace.Ext4_Fields.maybe'mode' @:: Lens' Ext4ZeroRangeFtraceEvent (Prelude.Maybe Data.Int.Int32)@ -}
data Ext4ZeroRangeFtraceEvent
  = Ext4ZeroRangeFtraceEvent'_constructor {_Ext4ZeroRangeFtraceEvent'dev :: !(Prelude.Maybe Data.Word.Word64),
                                           _Ext4ZeroRangeFtraceEvent'ino :: !(Prelude.Maybe Data.Word.Word64),
                                           _Ext4ZeroRangeFtraceEvent'offset :: !(Prelude.Maybe Data.Int.Int64),
                                           _Ext4ZeroRangeFtraceEvent'len :: !(Prelude.Maybe Data.Int.Int64),
                                           _Ext4ZeroRangeFtraceEvent'mode :: !(Prelude.Maybe Data.Int.Int32),
                                           _Ext4ZeroRangeFtraceEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Ext4ZeroRangeFtraceEvent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Ext4ZeroRangeFtraceEvent "dev" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ZeroRangeFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4ZeroRangeFtraceEvent'dev = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ZeroRangeFtraceEvent "maybe'dev" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ZeroRangeFtraceEvent'dev
           (\ x__ y__ -> x__ {_Ext4ZeroRangeFtraceEvent'dev = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ZeroRangeFtraceEvent "ino" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ZeroRangeFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4ZeroRangeFtraceEvent'ino = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ZeroRangeFtraceEvent "maybe'ino" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ZeroRangeFtraceEvent'ino
           (\ x__ y__ -> x__ {_Ext4ZeroRangeFtraceEvent'ino = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ZeroRangeFtraceEvent "offset" Data.Int.Int64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ZeroRangeFtraceEvent'offset
           (\ x__ y__ -> x__ {_Ext4ZeroRangeFtraceEvent'offset = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ZeroRangeFtraceEvent "maybe'offset" (Prelude.Maybe Data.Int.Int64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ZeroRangeFtraceEvent'offset
           (\ x__ y__ -> x__ {_Ext4ZeroRangeFtraceEvent'offset = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ZeroRangeFtraceEvent "len" Data.Int.Int64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ZeroRangeFtraceEvent'len
           (\ x__ y__ -> x__ {_Ext4ZeroRangeFtraceEvent'len = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ZeroRangeFtraceEvent "maybe'len" (Prelude.Maybe Data.Int.Int64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ZeroRangeFtraceEvent'len
           (\ x__ y__ -> x__ {_Ext4ZeroRangeFtraceEvent'len = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Ext4ZeroRangeFtraceEvent "mode" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ZeroRangeFtraceEvent'mode
           (\ x__ y__ -> x__ {_Ext4ZeroRangeFtraceEvent'mode = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Ext4ZeroRangeFtraceEvent "maybe'mode" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Ext4ZeroRangeFtraceEvent'mode
           (\ x__ y__ -> x__ {_Ext4ZeroRangeFtraceEvent'mode = y__}))
        Prelude.id
instance Data.ProtoLens.Message Ext4ZeroRangeFtraceEvent where
  messageName _
    = Data.Text.pack "perfetto.protos.Ext4ZeroRangeFtraceEvent"
  packedMessageDescriptor _
    = "\n\
      \\CANExt4ZeroRangeFtraceEvent\DC2\DLE\n\
      \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
      \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\SYN\n\
      \\ACKoffset\CAN\ETX \SOH(\ETXR\ACKoffset\DC2\DLE\n\
      \\ETXlen\CAN\EOT \SOH(\ETXR\ETXlen\DC2\DC2\n\
      \\EOTmode\CAN\ENQ \SOH(\ENQR\EOTmode"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        dev__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dev"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dev")) ::
              Data.ProtoLens.FieldDescriptor Ext4ZeroRangeFtraceEvent
        ino__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ino"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ino")) ::
              Data.ProtoLens.FieldDescriptor Ext4ZeroRangeFtraceEvent
        offset__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "offset"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'offset")) ::
              Data.ProtoLens.FieldDescriptor Ext4ZeroRangeFtraceEvent
        len__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "len"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'len")) ::
              Data.ProtoLens.FieldDescriptor Ext4ZeroRangeFtraceEvent
        mode__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "mode"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'mode")) ::
              Data.ProtoLens.FieldDescriptor Ext4ZeroRangeFtraceEvent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, dev__field_descriptor),
           (Data.ProtoLens.Tag 2, ino__field_descriptor),
           (Data.ProtoLens.Tag 3, offset__field_descriptor),
           (Data.ProtoLens.Tag 4, len__field_descriptor),
           (Data.ProtoLens.Tag 5, mode__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Ext4ZeroRangeFtraceEvent'_unknownFields
        (\ x__ y__ -> x__ {_Ext4ZeroRangeFtraceEvent'_unknownFields = y__})
  defMessage
    = Ext4ZeroRangeFtraceEvent'_constructor
        {_Ext4ZeroRangeFtraceEvent'dev = Prelude.Nothing,
         _Ext4ZeroRangeFtraceEvent'ino = Prelude.Nothing,
         _Ext4ZeroRangeFtraceEvent'offset = Prelude.Nothing,
         _Ext4ZeroRangeFtraceEvent'len = Prelude.Nothing,
         _Ext4ZeroRangeFtraceEvent'mode = Prelude.Nothing,
         _Ext4ZeroRangeFtraceEvent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Ext4ZeroRangeFtraceEvent
          -> Data.ProtoLens.Encoding.Bytes.Parser Ext4ZeroRangeFtraceEvent
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "dev"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"dev") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ino"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ino") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "offset"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"offset") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "len"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"len") y x)
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "mode"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"mode") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "Ext4ZeroRangeFtraceEvent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dev") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'ino") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'offset") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'len") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'mode") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral
                                      _v))
                         (Data.ProtoLens.Encoding.Wire.buildFieldSet
                            (Lens.Family2.view Data.ProtoLens.unknownFields _x))))))
instance Control.DeepSeq.NFData Ext4ZeroRangeFtraceEvent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Ext4ZeroRangeFtraceEvent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Ext4ZeroRangeFtraceEvent'dev x__)
                (Control.DeepSeq.deepseq
                   (_Ext4ZeroRangeFtraceEvent'ino x__)
                   (Control.DeepSeq.deepseq
                      (_Ext4ZeroRangeFtraceEvent'offset x__)
                      (Control.DeepSeq.deepseq
                         (_Ext4ZeroRangeFtraceEvent'len x__)
                         (Control.DeepSeq.deepseq
                            (_Ext4ZeroRangeFtraceEvent'mode x__) ())))))
packedFileDescriptor :: Data.ByteString.ByteString
packedFileDescriptor
  = "\n\
    \'protos/perfetto/trace/ftrace/ext4.proto\DC2\SIperfetto.protos\"{\n\
    \\ESCExt4DaWriteBeginFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DLE\n\
    \\ETXpos\CAN\ETX \SOH(\ETXR\ETXpos\DC2\DLE\n\
    \\ETXlen\CAN\EOT \SOH(\rR\ETXlen\DC2\DC4\n\
    \\ENQflags\CAN\ENQ \SOH(\rR\ENQflags\"{\n\
    \\EMExt4DaWriteEndFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DLE\n\
    \\ETXpos\CAN\ETX \SOH(\ETXR\ETXpos\DC2\DLE\n\
    \\ETXlen\CAN\EOT \SOH(\rR\ETXlen\DC2\SYN\n\
    \\ACKcopied\CAN\ENQ \SOH(\rR\ACKcopied\"v\n\
    \\FSExt4SyncFileEnterFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\SYN\n\
    \\ACKparent\CAN\ETX \SOH(\EOTR\ACKparent\DC2\SUB\n\
    \\bdatasync\CAN\EOT \SOH(\ENQR\bdatasync\"S\n\
    \\ESCExt4SyncFileExitFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DLE\n\
    \\ETXret\CAN\ETX \SOH(\ENQR\ETXret\"\132\SOH\n\
    \\FSExt4AllocDaBlocksFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\US\n\
    \\vdata_blocks\CAN\ETX \SOH(\rR\n\
    \dataBlocks\DC2\US\n\
    \\vmeta_blocks\CAN\EOT \SOH(\rR\n\
    \metaBlocks\"\139\STX\n\
    \\GSExt4AllocateBlocksFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DC4\n\
    \\ENQblock\CAN\ETX \SOH(\EOTR\ENQblock\DC2\DLE\n\
    \\ETXlen\CAN\EOT \SOH(\rR\ETXlen\DC2\CAN\n\
    \\alogical\CAN\ENQ \SOH(\rR\alogical\DC2\DC4\n\
    \\ENQlleft\CAN\ACK \SOH(\rR\ENQlleft\DC2\SYN\n\
    \\ACKlright\CAN\a \SOH(\rR\ACKlright\DC2\DC2\n\
    \\EOTgoal\CAN\b \SOH(\EOTR\EOTgoal\DC2\DC4\n\
    \\ENQpleft\CAN\t \SOH(\EOTR\ENQpleft\DC2\SYN\n\
    \\ACKpright\CAN\n\
    \ \SOH(\EOTR\ACKpright\DC2\DC4\n\
    \\ENQflags\CAN\v \SOH(\rR\ENQflags\"h\n\
    \\FSExt4AllocateInodeFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DLE\n\
    \\ETXdir\CAN\ETX \SOH(\EOTR\ETXdir\DC2\DC2\n\
    \\EOTmode\CAN\EOT \SOH(\rR\EOTmode\"d\n\
    \#Ext4BeginOrderedTruncateFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\EM\n\
    \\bnew_size\CAN\ETX \SOH(\ETXR\anewSize\"l\n\
    \\FSExt4CollapseRangeFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\SYN\n\
    \\ACKoffset\CAN\ETX \SOH(\ETXR\ACKoffset\DC2\DLE\n\
    \\ETXlen\CAN\EOT \SOH(\ETXR\ETXlen\"\173\STX\n\
    \\GSExt4DaReleaseSpaceFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\EM\n\
    \\bi_blocks\CAN\ETX \SOH(\EOTR\aiBlocks\DC2!\n\
    \\ffreed_blocks\CAN\EOT \SOH(\ENQR\vfreedBlocks\DC20\n\
    \\DC4reserved_data_blocks\CAN\ENQ \SOH(\ENQR\DC2reservedDataBlocks\DC20\n\
    \\DC4reserved_meta_blocks\CAN\ACK \SOH(\ENQR\DC2reservedMetaBlocks\DC22\n\
    \\NAKallocated_meta_blocks\CAN\a \SOH(\ENQR\DC3allocatedMetaBlocks\DC2\DC2\n\
    \\EOTmode\CAN\b \SOH(\rR\EOTmode\"\243\SOH\n\
    \\GSExt4DaReserveSpaceFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\EM\n\
    \\bi_blocks\CAN\ETX \SOH(\EOTR\aiBlocks\DC20\n\
    \\DC4reserved_data_blocks\CAN\EOT \SOH(\ENQR\DC2reservedDataBlocks\DC20\n\
    \\DC4reserved_meta_blocks\CAN\ENQ \SOH(\ENQR\DC2reservedMetaBlocks\DC2\DC2\n\
    \\EOTmode\CAN\ACK \SOH(\rR\EOTmode\DC2\ESC\n\
    \\tmd_needed\CAN\a \SOH(\ENQR\bmdNeeded\"\210\STX\n\
    \#Ext4DaUpdateReserveSpaceFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\EM\n\
    \\bi_blocks\CAN\ETX \SOH(\EOTR\aiBlocks\DC2\US\n\
    \\vused_blocks\CAN\EOT \SOH(\ENQR\n\
    \usedBlocks\DC20\n\
    \\DC4reserved_data_blocks\CAN\ENQ \SOH(\ENQR\DC2reservedDataBlocks\DC20\n\
    \\DC4reserved_meta_blocks\CAN\ACK \SOH(\ENQR\DC2reservedMetaBlocks\DC22\n\
    \\NAKallocated_meta_blocks\CAN\a \SOH(\ENQR\DC3allocatedMetaBlocks\DC2\US\n\
    \\vquota_claim\CAN\b \SOH(\ENQR\n\
    \quotaClaim\DC2\DC2\n\
    \\EOTmode\CAN\t \SOH(\rR\EOTmode\"\168\STX\n\
    \\ESCExt4DaWritePagesFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\GS\n\
    \\n\
    \first_page\CAN\ETX \SOH(\EOTR\tfirstPage\DC2\RS\n\
    \\vnr_to_write\CAN\EOT \SOH(\ETXR\tnrToWrite\DC2\ESC\n\
    \\tsync_mode\CAN\ENQ \SOH(\ENQR\bsyncMode\DC2\ESC\n\
    \\tb_blocknr\CAN\ACK \SOH(\EOTR\bbBlocknr\DC2\NAK\n\
    \\ACKb_size\CAN\a \SOH(\rR\ENQbSize\DC2\ETB\n\
    \\ab_state\CAN\b \SOH(\rR\ACKbState\DC2\ETB\n\
    \\aio_done\CAN\t \SOH(\ENQR\ACKioDone\DC2#\n\
    \\rpages_written\CAN\n\
    \ \SOH(\ENQR\fpagesWritten\"\131\SOH\n\
    \!Ext4DaWritePagesExtentFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DC2\n\
    \\EOTlblk\CAN\ETX \SOH(\EOTR\EOTlblk\DC2\DLE\n\
    \\ETXlen\CAN\EOT \SOH(\rR\ETXlen\DC2\DC4\n\
    \\ENQflags\CAN\ENQ \SOH(\rR\ENQflags\"v\n\
    \\FSExt4DirectIOEnterFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DLE\n\
    \\ETXpos\CAN\ETX \SOH(\ETXR\ETXpos\DC2\DLE\n\
    \\ETXlen\CAN\EOT \SOH(\EOTR\ETXlen\DC2\SO\n\
    \\STXrw\CAN\ENQ \SOH(\ENQR\STXrw\"\135\SOH\n\
    \\ESCExt4DirectIOExitFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DLE\n\
    \\ETXpos\CAN\ETX \SOH(\ETXR\ETXpos\DC2\DLE\n\
    \\ETXlen\CAN\EOT \SOH(\EOTR\ETXlen\DC2\SO\n\
    \\STXrw\CAN\ENQ \SOH(\ENQR\STXrw\DC2\DLE\n\
    \\ETXret\CAN\ACK \SOH(\ENQR\ETXret\"X\n\
    \\FSExt4DiscardBlocksFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXblk\CAN\STX \SOH(\EOTR\ETXblk\DC2\DC4\n\
    \\ENQcount\CAN\ETX \SOH(\EOTR\ENQcount\"t\n\
    \$Ext4DiscardPreallocationsFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DLE\n\
    \\ETXlen\CAN\ETX \SOH(\rR\ETXlen\DC2\SYN\n\
    \\ACKneeded\CAN\EOT \SOH(\rR\ACKneeded\"R\n\
    \\CANExt4DropInodeFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DC2\n\
    \\EOTdrop\CAN\ETX \SOH(\ENQR\EOTdrop\"\148\SOH\n\
    \\FSExt4EsCacheExtentFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DC2\n\
    \\EOTlblk\CAN\ETX \SOH(\rR\EOTlblk\DC2\DLE\n\
    \\ETXlen\CAN\EOT \SOH(\rR\ETXlen\DC2\DC2\n\
    \\EOTpblk\CAN\ENQ \SOH(\EOTR\EOTpblk\DC2\SYN\n\
    \\ACKstatus\CAN\ACK \SOH(\rR\ACKstatus\"f\n\
    \,Ext4EsFindDelayedExtentRangeEnterFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DC2\n\
    \\EOTlblk\CAN\ETX \SOH(\rR\EOTlblk\"\163\SOH\n\
    \+Ext4EsFindDelayedExtentRangeExitFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DC2\n\
    \\EOTlblk\CAN\ETX \SOH(\rR\EOTlblk\DC2\DLE\n\
    \\ETXlen\CAN\EOT \SOH(\rR\ETXlen\DC2\DC2\n\
    \\EOTpblk\CAN\ENQ \SOH(\EOTR\EOTpblk\DC2\SYN\n\
    \\ACKstatus\CAN\ACK \SOH(\EOTR\ACKstatus\"\149\SOH\n\
    \\GSExt4EsInsertExtentFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DC2\n\
    \\EOTlblk\CAN\ETX \SOH(\rR\EOTlblk\DC2\DLE\n\
    \\ETXlen\CAN\EOT \SOH(\rR\ETXlen\DC2\DC2\n\
    \\EOTpblk\CAN\ENQ \SOH(\EOTR\EOTpblk\DC2\SYN\n\
    \\ACKstatus\CAN\ACK \SOH(\EOTR\ACKstatus\"\\\n\
    \\"Ext4EsLookupExtentEnterFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DC2\n\
    \\EOTlblk\CAN\ETX \SOH(\rR\EOTlblk\"\175\SOH\n\
    \!Ext4EsLookupExtentExitFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DC2\n\
    \\EOTlblk\CAN\ETX \SOH(\rR\EOTlblk\DC2\DLE\n\
    \\ETXlen\CAN\EOT \SOH(\rR\ETXlen\DC2\DC2\n\
    \\EOTpblk\CAN\ENQ \SOH(\EOTR\EOTpblk\DC2\SYN\n\
    \\ACKstatus\CAN\ACK \SOH(\EOTR\ACKstatus\DC2\DC4\n\
    \\ENQfound\CAN\a \SOH(\ENQR\ENQfound\"i\n\
    \\GSExt4EsRemoveExtentFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DC2\n\
    \\EOTlblk\CAN\ETX \SOH(\ETXR\EOTlblk\DC2\DLE\n\
    \\ETXlen\CAN\EOT \SOH(\ETXR\ETXlen\"\158\SOH\n\
    \\ETBExt4EsShrinkFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\ESC\n\
    \\tnr_shrunk\CAN\STX \SOH(\ENQR\bnrShrunk\DC2\ESC\n\
    \\tscan_time\CAN\ETX \SOH(\EOTR\bscanTime\DC2\GS\n\
    \\n\
    \nr_skipped\CAN\EOT \SOH(\ENQR\tnrSkipped\DC2\CAN\n\
    \\aretried\CAN\ENQ \SOH(\ENQR\aretried\"k\n\
    \\FSExt4EsShrinkCountFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\FS\n\
    \\n\
    \nr_to_scan\CAN\STX \SOH(\ENQR\bnrToScan\DC2\ESC\n\
    \\tcache_cnt\CAN\ETX \SOH(\ENQR\bcacheCnt\"o\n\
    \ Ext4EsShrinkScanEnterFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\FS\n\
    \\n\
    \nr_to_scan\CAN\STX \SOH(\ENQR\bnrToScan\DC2\ESC\n\
    \\tcache_cnt\CAN\ETX \SOH(\ENQR\bcacheCnt\"m\n\
    \\USExt4EsShrinkScanExitFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\ESC\n\
    \\tnr_shrunk\CAN\STX \SOH(\ENQR\bnrShrunk\DC2\ESC\n\
    \\tcache_cnt\CAN\ETX \SOH(\ENQR\bcacheCnt\"U\n\
    \\EMExt4EvictInodeFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DC4\n\
    \\ENQnlink\CAN\ETX \SOH(\ENQR\ENQnlink\"\192\SOH\n\
    \+Ext4ExtConvertToInitializedEnterFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\NAK\n\
    \\ACKm_lblk\CAN\ETX \SOH(\rR\ENQmLblk\DC2\DC3\n\
    \\ENQm_len\CAN\EOT \SOH(\rR\EOTmLen\DC2\NAK\n\
    \\ACKu_lblk\CAN\ENQ \SOH(\rR\ENQuLblk\DC2\DC3\n\
    \\ENQu_len\CAN\ACK \SOH(\rR\EOTuLen\DC2\NAK\n\
    \\ACKu_pblk\CAN\a \SOH(\EOTR\ENQuPblk\"\134\STX\n\
    \.Ext4ExtConvertToInitializedFastpathFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\NAK\n\
    \\ACKm_lblk\CAN\ETX \SOH(\rR\ENQmLblk\DC2\DC3\n\
    \\ENQm_len\CAN\EOT \SOH(\rR\EOTmLen\DC2\NAK\n\
    \\ACKu_lblk\CAN\ENQ \SOH(\rR\ENQuLblk\DC2\DC3\n\
    \\ENQu_len\CAN\ACK \SOH(\rR\EOTuLen\DC2\NAK\n\
    \\ACKu_pblk\CAN\a \SOH(\EOTR\ENQuPblk\DC2\NAK\n\
    \\ACKi_lblk\CAN\b \SOH(\rR\ENQiLblk\DC2\DC3\n\
    \\ENQi_len\CAN\t \SOH(\rR\EOTiLen\DC2\NAK\n\
    \\ACKi_pblk\CAN\n\
    \ \SOH(\EOTR\ENQiPblk\"\212\SOH\n\
    \(Ext4ExtHandleUnwrittenExtentsFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DC4\n\
    \\ENQflags\CAN\ETX \SOH(\ENQR\ENQflags\DC2\DC2\n\
    \\EOTlblk\CAN\EOT \SOH(\rR\EOTlblk\DC2\DC2\n\
    \\EOTpblk\CAN\ENQ \SOH(\EOTR\EOTpblk\DC2\DLE\n\
    \\ETXlen\CAN\ACK \SOH(\rR\ETXlen\DC2\FS\n\
    \\tallocated\CAN\a \SOH(\rR\tallocated\DC2\SYN\n\
    \\ACKnewblk\CAN\b \SOH(\EOTR\ACKnewblk\"e\n\
    \\EMExt4ExtInCacheFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DC2\n\
    \\EOTlblk\CAN\ETX \SOH(\rR\EOTlblk\DC2\DLE\n\
    \\ETXret\CAN\EOT \SOH(\ENQR\ETXret\"j\n\
    \\FSExt4ExtLoadExtentFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DC2\n\
    \\EOTpblk\CAN\ETX \SOH(\EOTR\EOTpblk\DC2\DC2\n\
    \\EOTlblk\CAN\EOT \SOH(\rR\EOTlblk\"\130\SOH\n\
    \ Ext4ExtMapBlocksEnterFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DC2\n\
    \\EOTlblk\CAN\ETX \SOH(\rR\EOTlblk\DC2\DLE\n\
    \\ETXlen\CAN\EOT \SOH(\rR\ETXlen\DC2\DC4\n\
    \\ENQflags\CAN\ENQ \SOH(\rR\ENQflags\"\191\SOH\n\
    \\USExt4ExtMapBlocksExitFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DC4\n\
    \\ENQflags\CAN\ETX \SOH(\rR\ENQflags\DC2\DC2\n\
    \\EOTpblk\CAN\EOT \SOH(\EOTR\EOTpblk\DC2\DC2\n\
    \\EOTlblk\CAN\ENQ \SOH(\rR\EOTlblk\DC2\DLE\n\
    \\ETXlen\CAN\ACK \SOH(\rR\ETXlen\DC2\SYN\n\
    \\ACKmflags\CAN\a \SOH(\rR\ACKmflags\DC2\DLE\n\
    \\ETXret\CAN\b \SOH(\ENQR\ETXret\"~\n\
    \\FSExt4ExtPutInCacheFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DC2\n\
    \\EOTlblk\CAN\ETX \SOH(\rR\EOTlblk\DC2\DLE\n\
    \\ETXlen\CAN\EOT \SOH(\rR\ETXlen\DC2\DC4\n\
    \\ENQstart\CAN\ENQ \SOH(\EOTR\ENQstart\"\129\SOH\n\
    \\GSExt4ExtRemoveSpaceFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DC4\n\
    \\ENQstart\CAN\ETX \SOH(\rR\ENQstart\DC2\DLE\n\
    \\ETXend\CAN\EOT \SOH(\rR\ETXend\DC2\DC4\n\
    \\ENQdepth\CAN\ENQ \SOH(\ENQR\ENQdepth\"\139\STX\n\
    \!Ext4ExtRemoveSpaceDoneFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DC4\n\
    \\ENQstart\CAN\ETX \SOH(\rR\ENQstart\DC2\DLE\n\
    \\ETXend\CAN\EOT \SOH(\rR\ETXend\DC2\DC4\n\
    \\ENQdepth\CAN\ENQ \SOH(\ENQR\ENQdepth\DC2\CAN\n\
    \\apartial\CAN\ACK \SOH(\ETXR\apartial\DC2\GS\n\
    \\n\
    \eh_entries\CAN\a \SOH(\rR\tehEntries\DC2\ETB\n\
    \\apc_lblk\CAN\b \SOH(\rR\ACKpcLblk\DC2\ETB\n\
    \\apc_pclu\CAN\t \SOH(\EOTR\ACKpcPclu\DC2\EM\n\
    \\bpc_state\CAN\n\
    \ \SOH(\ENQR\apcState\"Q\n\
    \\ETBExt4ExtRmIdxFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DC2\n\
    \\EOTpblk\CAN\ETX \SOH(\EOTR\EOTpblk\"\132\STX\n\
    \\CANExt4ExtRmLeafFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\CAN\n\
    \\apartial\CAN\ETX \SOH(\ETXR\apartial\DC2\DC4\n\
    \\ENQstart\CAN\EOT \SOH(\rR\ENQstart\DC2\ETB\n\
    \\aee_lblk\CAN\ENQ \SOH(\rR\ACKeeLblk\DC2\ETB\n\
    \\aee_pblk\CAN\ACK \SOH(\EOTR\ACKeePblk\DC2\NAK\n\
    \\ACKee_len\CAN\a \SOH(\ENQR\ENQeeLen\DC2\ETB\n\
    \\apc_lblk\CAN\b \SOH(\rR\ACKpcLblk\DC2\ETB\n\
    \\apc_pclu\CAN\t \SOH(\EOTR\ACKpcPclu\DC2\EM\n\
    \\bpc_state\CAN\n\
    \ \SOH(\ENQR\apcState\"|\n\
    \\FSExt4ExtShowExtentFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DC2\n\
    \\EOTpblk\CAN\ETX \SOH(\EOTR\EOTpblk\DC2\DC2\n\
    \\EOTlblk\CAN\EOT \SOH(\rR\EOTlblk\DC2\DLE\n\
    \\ETXlen\CAN\ENQ \SOH(\rR\ETXlen\"\147\SOH\n\
    \\GSExt4FallocateEnterFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\SYN\n\
    \\ACKoffset\CAN\ETX \SOH(\ETXR\ACKoffset\DC2\DLE\n\
    \\ETXlen\CAN\EOT \SOH(\ETXR\ETXlen\DC2\DC2\n\
    \\EOTmode\CAN\ENQ \SOH(\ENQR\EOTmode\DC2\DLE\n\
    \\ETXpos\CAN\ACK \SOH(\ETXR\ETXpos\"~\n\
    \\FSExt4FallocateExitFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DLE\n\
    \\ETXpos\CAN\ETX \SOH(\ETXR\ETXpos\DC2\SYN\n\
    \\ACKblocks\CAN\EOT \SOH(\rR\ACKblocks\DC2\DLE\n\
    \\ETXret\CAN\ENQ \SOH(\ENQR\ETXret\"\183\SOH\n\
    \ Ext4FindDelallocRangeFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DC2\n\
    \\EOTfrom\CAN\ETX \SOH(\rR\EOTfrom\DC2\SO\n\
    \\STXto\CAN\EOT \SOH(\rR\STXto\DC2\CAN\n\
    \\areverse\CAN\ENQ \SOH(\ENQR\areverse\DC2\DC4\n\
    \\ENQfound\CAN\ACK \SOH(\ENQR\ENQfound\DC2\ESC\n\
    \\tfound_blk\CAN\a \SOH(\rR\bfoundBlk\"\134\SOH\n\
    \\NAKExt4ForgetFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DC4\n\
    \\ENQblock\CAN\ETX \SOH(\EOTR\ENQblock\DC2\US\n\
    \\vis_metadata\CAN\EOT \SOH(\ENQR\n\
    \isMetadata\DC2\DC2\n\
    \\EOTmode\CAN\ENQ \SOH(\rR\EOTmode\"\149\SOH\n\
    \\EMExt4FreeBlocksFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DC4\n\
    \\ENQblock\CAN\ETX \SOH(\EOTR\ENQblock\DC2\DC4\n\
    \\ENQcount\CAN\EOT \SOH(\EOTR\ENQcount\DC2\DC4\n\
    \\ENQflags\CAN\ENQ \SOH(\ENQR\ENQflags\DC2\DC2\n\
    \\EOTmode\CAN\ACK \SOH(\rR\EOTmode\"\142\SOH\n\
    \\CANExt4FreeInodeFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DLE\n\
    \\ETXuid\CAN\ETX \SOH(\rR\ETXuid\DC2\DLE\n\
    \\ETXgid\CAN\EOT \SOH(\rR\ETXgid\DC2\SYN\n\
    \\ACKblocks\CAN\ENQ \SOH(\EOTR\ACKblocks\DC2\DC2\n\
    \\EOTmode\CAN\ACK \SOH(\rR\EOTmode\"\159\SOH\n\
    \)Ext4GetImpliedClusterAllocExitFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DC4\n\
    \\ENQflags\CAN\STX \SOH(\rR\ENQflags\DC2\DC2\n\
    \\EOTlblk\CAN\ETX \SOH(\rR\EOTlblk\DC2\DC2\n\
    \\EOTpblk\CAN\EOT \SOH(\EOTR\EOTpblk\DC2\DLE\n\
    \\ETXlen\CAN\ENQ \SOH(\rR\ETXlen\DC2\DLE\n\
    \\ETXret\CAN\ACK \SOH(\ENQR\ETXret\"r\n\
    \&Ext4GetReservedClusterAllocFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DC2\n\
    \\EOTlblk\CAN\ETX \SOH(\rR\EOTlblk\DC2\DLE\n\
    \\ETXlen\CAN\EOT \SOH(\rR\ETXlen\"\130\SOH\n\
    \ Ext4IndMapBlocksEnterFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DC2\n\
    \\EOTlblk\CAN\ETX \SOH(\rR\EOTlblk\DC2\DLE\n\
    \\ETXlen\CAN\EOT \SOH(\rR\ETXlen\DC2\DC4\n\
    \\ENQflags\CAN\ENQ \SOH(\rR\ENQflags\"\191\SOH\n\
    \\USExt4IndMapBlocksExitFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DC4\n\
    \\ENQflags\CAN\ETX \SOH(\rR\ENQflags\DC2\DC2\n\
    \\EOTpblk\CAN\EOT \SOH(\EOTR\EOTpblk\DC2\DC2\n\
    \\EOTlblk\CAN\ENQ \SOH(\rR\EOTlblk\DC2\DLE\n\
    \\ETXlen\CAN\ACK \SOH(\rR\ETXlen\DC2\SYN\n\
    \\ACKmflags\CAN\a \SOH(\rR\ACKmflags\DC2\DLE\n\
    \\ETXret\CAN\b \SOH(\ENQR\ETXret\"j\n\
    \\SUBExt4InsertRangeFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\SYN\n\
    \\ACKoffset\CAN\ETX \SOH(\ETXR\ACKoffset\DC2\DLE\n\
    \\ETXlen\CAN\EOT \SOH(\ETXR\ETXlen\"\137\SOH\n\
    \\GSExt4InvalidatepageFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DC4\n\
    \\ENQindex\CAN\ETX \SOH(\EOTR\ENQindex\DC2\SYN\n\
    \\ACKoffset\CAN\EOT \SOH(\EOTR\ACKoffset\DC2\SYN\n\
    \\ACKlength\CAN\ENQ \SOH(\rR\ACKlength\"\179\SOH\n\
    \\ESCExt4JournalStartFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\SO\n\
    \\STXip\CAN\STX \SOH(\EOTR\STXip\DC2\SYN\n\
    \\ACKblocks\CAN\ETX \SOH(\ENQR\ACKblocks\DC2\GS\n\
    \\n\
    \rsv_blocks\CAN\EOT \SOH(\ENQR\trsvBlocks\DC2\CAN\n\
    \\anblocks\CAN\ENQ \SOH(\ENQR\anblocks\DC2!\n\
    \\frevoke_creds\CAN\ACK \SOH(\ENQR\vrevokeCreds\"_\n\
    \#Ext4JournalStartReservedFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\SO\n\
    \\STXip\CAN\STX \SOH(\EOTR\STXip\DC2\SYN\n\
    \\ACKblocks\CAN\ETX \SOH(\ENQR\ACKblocks\"\147\SOH\n\
    \'Ext4JournalledInvalidatepageFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DC4\n\
    \\ENQindex\CAN\ETX \SOH(\EOTR\ENQindex\DC2\SYN\n\
    \\ACKoffset\CAN\EOT \SOH(\EOTR\ACKoffset\DC2\SYN\n\
    \\ACKlength\CAN\ENQ \SOH(\rR\ACKlength\"\131\SOH\n\
    \!Ext4JournalledWriteEndFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DLE\n\
    \\ETXpos\CAN\ETX \SOH(\ETXR\ETXpos\DC2\DLE\n\
    \\ETXlen\CAN\EOT \SOH(\rR\ETXlen\DC2\SYN\n\
    \\ACKcopied\CAN\ENQ \SOH(\rR\ACKcopied\">\n\
    \\CANExt4LoadInodeFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\"H\n\
    \\RSExt4LoadInodeBitmapFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DC4\n\
    \\ENQgroup\CAN\STX \SOH(\rR\ENQgroup\"S\n\
    \\GSExt4MarkInodeDirtyFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\SO\n\
    \\STXip\CAN\ETX \SOH(\EOTR\STXip\"E\n\
    \\ESCExt4MbBitmapLoadFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DC4\n\
    \\ENQgroup\CAN\STX \SOH(\rR\ENQgroup\"J\n\
    \ Ext4MbBuddyBitmapLoadFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DC4\n\
    \\ENQgroup\CAN\STX \SOH(\rR\ENQgroup\"R\n\
    \&Ext4MbDiscardPreallocationsFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\SYN\n\
    \\ACKneeded\CAN\STX \SOH(\ENQR\ACKneeded\"\146\SOH\n\
    \\ESCExt4MbNewGroupPaFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\ESC\n\
    \\tpa_pstart\CAN\ETX \SOH(\EOTR\bpaPstart\DC2\ESC\n\
    \\tpa_lstart\CAN\EOT \SOH(\EOTR\bpaLstart\DC2\NAK\n\
    \\ACKpa_len\CAN\ENQ \SOH(\rR\ENQpaLen\"\146\SOH\n\
    \\ESCExt4MbNewInodePaFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\ESC\n\
    \\tpa_pstart\CAN\ETX \SOH(\EOTR\bpaPstart\DC2\ESC\n\
    \\tpa_lstart\CAN\EOT \SOH(\EOTR\bpaLstart\DC2\NAK\n\
    \\ACKpa_len\CAN\ENQ \SOH(\rR\ENQpaLen\"g\n\
    \\USExt4MbReleaseGroupPaFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\ESC\n\
    \\tpa_pstart\CAN\STX \SOH(\EOTR\bpaPstart\DC2\NAK\n\
    \\ACKpa_len\CAN\ETX \SOH(\rR\ENQpaLen\"q\n\
    \\USExt4MbReleaseInodePaFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DC4\n\
    \\ENQblock\CAN\ETX \SOH(\EOTR\ENQblock\DC2\DC4\n\
    \\ENQcount\CAN\EOT \SOH(\rR\ENQcount\"\195\EOT\n\
    \\ESCExt4MballocAllocFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2!\n\
    \\forig_logical\CAN\ETX \SOH(\rR\vorigLogical\DC2\GS\n\
    \\n\
    \orig_start\CAN\EOT \SOH(\ENQR\torigStart\DC2\GS\n\
    \\n\
    \orig_group\CAN\ENQ \SOH(\rR\torigGroup\DC2\EM\n\
    \\borig_len\CAN\ACK \SOH(\ENQR\aorigLen\DC2!\n\
    \\fgoal_logical\CAN\a \SOH(\rR\vgoalLogical\DC2\GS\n\
    \\n\
    \goal_start\CAN\b \SOH(\ENQR\tgoalStart\DC2\GS\n\
    \\n\
    \goal_group\CAN\t \SOH(\rR\tgoalGroup\DC2\EM\n\
    \\bgoal_len\CAN\n\
    \ \SOH(\ENQR\agoalLen\DC2%\n\
    \\SOresult_logical\CAN\v \SOH(\rR\rresultLogical\DC2!\n\
    \\fresult_start\CAN\f \SOH(\ENQR\vresultStart\DC2!\n\
    \\fresult_group\CAN\r \SOH(\rR\vresultGroup\DC2\GS\n\
    \\n\
    \result_len\CAN\SO \SOH(\ENQR\tresultLen\DC2\DC4\n\
    \\ENQfound\CAN\SI \SOH(\rR\ENQfound\DC2\SYN\n\
    \\ACKgroups\CAN\DLE \SOH(\rR\ACKgroups\DC2\DC4\n\
    \\ENQbuddy\CAN\DC1 \SOH(\rR\ENQbuddy\DC2\DC4\n\
    \\ENQflags\CAN\DC2 \SOH(\rR\ENQflags\DC2\DC2\n\
    \\EOTtail\CAN\DC3 \SOH(\rR\EOTtail\DC2\SO\n\
    \\STXcr\CAN\DC4 \SOH(\rR\STXcr\"\168\SOH\n\
    \\GSExt4MballocDiscardFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2!\n\
    \\fresult_start\CAN\ETX \SOH(\ENQR\vresultStart\DC2!\n\
    \\fresult_group\CAN\EOT \SOH(\rR\vresultGroup\DC2\GS\n\
    \\n\
    \result_len\CAN\ENQ \SOH(\ENQR\tresultLen\"\165\SOH\n\
    \\SUBExt4MballocFreeFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2!\n\
    \\fresult_start\CAN\ETX \SOH(\ENQR\vresultStart\DC2!\n\
    \\fresult_group\CAN\EOT \SOH(\rR\vresultGroup\DC2\GS\n\
    \\n\
    \result_len\CAN\ENQ \SOH(\ENQR\tresultLen\"\204\STX\n\
    \\RSExt4MballocPreallocFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2!\n\
    \\forig_logical\CAN\ETX \SOH(\rR\vorigLogical\DC2\GS\n\
    \\n\
    \orig_start\CAN\EOT \SOH(\ENQR\torigStart\DC2\GS\n\
    \\n\
    \orig_group\CAN\ENQ \SOH(\rR\torigGroup\DC2\EM\n\
    \\borig_len\CAN\ACK \SOH(\ENQR\aorigLen\DC2%\n\
    \\SOresult_logical\CAN\a \SOH(\rR\rresultLogical\DC2!\n\
    \\fresult_start\CAN\b \SOH(\ENQR\vresultStart\DC2!\n\
    \\fresult_group\CAN\t \SOH(\rR\vresultGroup\DC2\GS\n\
    \\n\
    \result_len\CAN\n\
    \ \SOH(\ENQR\tresultLen\"\156\SOH\n\
    \#Ext4OtherInodeUpdateTimeFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\EM\n\
    \\borig_ino\CAN\ETX \SOH(\EOTR\aorigIno\DC2\DLE\n\
    \\ETXuid\CAN\EOT \SOH(\rR\ETXuid\DC2\DLE\n\
    \\ETXgid\CAN\ENQ \SOH(\rR\ETXgid\DC2\DC2\n\
    \\EOTmode\CAN\ACK \SOH(\rR\EOTmode\"|\n\
    \\CANExt4PunchHoleFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\SYN\n\
    \\ACKoffset\CAN\ETX \SOH(\ETXR\ACKoffset\DC2\DLE\n\
    \\ETXlen\CAN\EOT \SOH(\ETXR\ETXlen\DC2\DC2\n\
    \\EOTmode\CAN\ENQ \SOH(\ENQR\EOTmode\"h\n\
    \\"Ext4ReadBlockBitmapLoadFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DC4\n\
    \\ENQgroup\CAN\STX \SOH(\rR\ENQgroup\DC2\SUB\n\
    \\bprefetch\CAN\ETX \SOH(\rR\bprefetch\"S\n\
    \\ETBExt4ReadpageFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DC4\n\
    \\ENQindex\CAN\ETX \SOH(\EOTR\ENQindex\"V\n\
    \\SUBExt4ReleasepageFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DC4\n\
    \\ENQindex\CAN\ETX \SOH(\EOTR\ENQindex\"\149\STX\n\
    \\ESCExt4RemoveBlocksFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DC2\n\
    \\EOTfrom\CAN\ETX \SOH(\rR\EOTfrom\DC2\SO\n\
    \\STXto\CAN\EOT \SOH(\rR\STXto\DC2\CAN\n\
    \\apartial\CAN\ENQ \SOH(\ETXR\apartial\DC2\ETB\n\
    \\aee_pblk\CAN\ACK \SOH(\EOTR\ACKeePblk\DC2\ETB\n\
    \\aee_lblk\CAN\a \SOH(\rR\ACKeeLblk\DC2\NAK\n\
    \\ACKee_len\CAN\b \SOH(\rR\ENQeeLen\DC2\ETB\n\
    \\apc_lblk\CAN\t \SOH(\rR\ACKpcLblk\DC2\ETB\n\
    \\apc_pclu\CAN\n\
    \ \SOH(\EOTR\ACKpcPclu\DC2\EM\n\
    \\bpc_state\CAN\v \SOH(\ENQR\apcState\"\244\SOH\n\
    \\FSExt4RequestBlocksFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DLE\n\
    \\ETXlen\CAN\ETX \SOH(\rR\ETXlen\DC2\CAN\n\
    \\alogical\CAN\EOT \SOH(\rR\alogical\DC2\DC4\n\
    \\ENQlleft\CAN\ENQ \SOH(\rR\ENQlleft\DC2\SYN\n\
    \\ACKlright\CAN\ACK \SOH(\rR\ACKlright\DC2\DC2\n\
    \\EOTgoal\CAN\a \SOH(\EOTR\EOTgoal\DC2\DC4\n\
    \\ENQpleft\CAN\b \SOH(\EOTR\ENQpleft\DC2\SYN\n\
    \\ACKpright\CAN\t \SOH(\EOTR\ACKpright\DC2\DC4\n\
    \\ENQflags\CAN\n\
    \ \SOH(\rR\ENQflags\"U\n\
    \\ESCExt4RequestInodeFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXdir\CAN\STX \SOH(\EOTR\ETXdir\DC2\DC2\n\
    \\EOTmode\CAN\ETX \SOH(\rR\EOTmode\"=\n\
    \\NAKExt4SyncFsFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DC2\n\
    \\EOTwait\CAN\STX \SOH(\ENQR\EOTwait\"\148\SOH\n\
    \\SUBExt4TrimAllFreeFtraceEvent\DC2\ESC\n\
    \\tdev_major\CAN\SOH \SOH(\ENQR\bdevMajor\DC2\ESC\n\
    \\tdev_minor\CAN\STX \SOH(\ENQR\bdevMinor\DC2\DC4\n\
    \\ENQgroup\CAN\ETX \SOH(\rR\ENQgroup\DC2\DC4\n\
    \\ENQstart\CAN\EOT \SOH(\ENQR\ENQstart\DC2\DLE\n\
    \\ETXlen\CAN\ENQ \SOH(\ENQR\ETXlen\"\147\SOH\n\
    \\EMExt4TrimExtentFtraceEvent\DC2\ESC\n\
    \\tdev_major\CAN\SOH \SOH(\ENQR\bdevMajor\DC2\ESC\n\
    \\tdev_minor\CAN\STX \SOH(\ENQR\bdevMinor\DC2\DC4\n\
    \\ENQgroup\CAN\ETX \SOH(\rR\ENQgroup\DC2\DC4\n\
    \\ENQstart\CAN\EOT \SOH(\ENQR\ENQstart\DC2\DLE\n\
    \\ETXlen\CAN\ENQ \SOH(\ENQR\ETXlen\"Z\n\
    \\FSExt4TruncateEnterFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\SYN\n\
    \\ACKblocks\CAN\ETX \SOH(\EOTR\ACKblocks\"Y\n\
    \\ESCExt4TruncateExitFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\SYN\n\
    \\ACKblocks\CAN\ETX \SOH(\EOTR\ACKblocks\"l\n\
    \\SUBExt4UnlinkEnterFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\SYN\n\
    \\ACKparent\CAN\ETX \SOH(\EOTR\ACKparent\DC2\DC2\n\
    \\EOTsize\CAN\EOT \SOH(\ETXR\EOTsize\"Q\n\
    \\EMExt4UnlinkExitFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DLE\n\
    \\ETXret\CAN\ETX \SOH(\ENQR\ETXret\"y\n\
    \\EMExt4WriteBeginFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DLE\n\
    \\ETXpos\CAN\ETX \SOH(\ETXR\ETXpos\DC2\DLE\n\
    \\ETXlen\CAN\EOT \SOH(\rR\ETXlen\DC2\DC4\n\
    \\ENQflags\CAN\ENQ \SOH(\rR\ENQflags\"y\n\
    \\ETBExt4WriteEndFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DLE\n\
    \\ETXpos\CAN\ETX \SOH(\ETXR\ETXpos\DC2\DLE\n\
    \\ETXlen\CAN\EOT \SOH(\rR\ETXlen\DC2\SYN\n\
    \\ACKcopied\CAN\ENQ \SOH(\rR\ACKcopied\"T\n\
    \\CANExt4WritepageFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DC4\n\
    \\ENQindex\CAN\ETX \SOH(\EOTR\ENQindex\"\204\STX\n\
    \\EMExt4WritepagesFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\RS\n\
    \\vnr_to_write\CAN\ETX \SOH(\ETXR\tnrToWrite\DC2#\n\
    \\rpages_skipped\CAN\EOT \SOH(\ETXR\fpagesSkipped\DC2\US\n\
    \\vrange_start\CAN\ENQ \SOH(\ETXR\n\
    \rangeStart\DC2\ESC\n\
    \\trange_end\CAN\ACK \SOH(\ETXR\brangeEnd\DC2'\n\
    \\SIwriteback_index\CAN\a \SOH(\EOTR\SOwritebackIndex\DC2\ESC\n\
    \\tsync_mode\CAN\b \SOH(\ENQR\bsyncMode\DC2\US\n\
    \\vfor_kupdate\CAN\t \SOH(\rR\n\
    \forKupdate\DC2!\n\
    \\frange_cyclic\CAN\n\
    \ \SOH(\rR\vrangeCyclic\"\231\SOH\n\
    \\USExt4WritepagesResultFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\DLE\n\
    \\ETXret\CAN\ETX \SOH(\ENQR\ETXret\DC2#\n\
    \\rpages_written\CAN\EOT \SOH(\ENQR\fpagesWritten\DC2#\n\
    \\rpages_skipped\CAN\ENQ \SOH(\ETXR\fpagesSkipped\DC2'\n\
    \\SIwriteback_index\CAN\ACK \SOH(\EOTR\SOwritebackIndex\DC2\ESC\n\
    \\tsync_mode\CAN\a \SOH(\ENQR\bsyncMode\"|\n\
    \\CANExt4ZeroRangeFtraceEvent\DC2\DLE\n\
    \\ETXdev\CAN\SOH \SOH(\EOTR\ETXdev\DC2\DLE\n\
    \\ETXino\CAN\STX \SOH(\EOTR\ETXino\DC2\SYN\n\
    \\ACKoffset\CAN\ETX \SOH(\ETXR\ACKoffset\DC2\DLE\n\
    \\ETXlen\CAN\EOT \SOH(\ETXR\ETXlen\DC2\DC2\n\
    \\EOTmode\CAN\ENQ \SOH(\ENQR\EOTmodeJ\200\177\STX\n\
    \\a\DC2\ENQ\EOT\NUL\183\ENQ\SOH\n\
    \a\n\
    \\SOH\f\DC2\ETX\EOT\NUL\DC22W Autogenerated by:\n\
    \ ../../src/tools/ftrace_proto_gen/ftrace_proto_gen.cc\n\
    \ Do not edit.\n\
    \\n\
    \\b\n\
    \\SOH\STX\DC2\ETX\ENQ\NUL\CAN\n\
    \\n\
    \\n\
    \\STX\EOT\NUL\DC2\EOT\a\NUL\r\SOH\n\
    \\n\
    \\n\
    \\ETX\EOT\NUL\SOH\DC2\ETX\a\b#\n\
    \\v\n\
    \\EOT\EOT\NUL\STX\NUL\DC2\ETX\b\STX\SUB\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\NUL\EOT\DC2\ETX\b\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\NUL\ENQ\DC2\ETX\b\v\DC1\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\NUL\SOH\DC2\ETX\b\DC2\NAK\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\NUL\ETX\DC2\ETX\b\CAN\EM\n\
    \\v\n\
    \\EOT\EOT\NUL\STX\SOH\DC2\ETX\t\STX\SUB\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\SOH\EOT\DC2\ETX\t\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\SOH\ENQ\DC2\ETX\t\v\DC1\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\SOH\SOH\DC2\ETX\t\DC2\NAK\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\SOH\ETX\DC2\ETX\t\CAN\EM\n\
    \\v\n\
    \\EOT\EOT\NUL\STX\STX\DC2\ETX\n\
    \\STX\EM\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\STX\EOT\DC2\ETX\n\
    \\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\STX\ENQ\DC2\ETX\n\
    \\v\DLE\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\STX\SOH\DC2\ETX\n\
    \\DC1\DC4\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\STX\ETX\DC2\ETX\n\
    \\ETB\CAN\n\
    \\v\n\
    \\EOT\EOT\NUL\STX\ETX\DC2\ETX\v\STX\SUB\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\ETX\EOT\DC2\ETX\v\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\ETX\ENQ\DC2\ETX\v\v\DC1\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\ETX\SOH\DC2\ETX\v\DC2\NAK\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\ETX\ETX\DC2\ETX\v\CAN\EM\n\
    \\v\n\
    \\EOT\EOT\NUL\STX\EOT\DC2\ETX\f\STX\FS\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\EOT\EOT\DC2\ETX\f\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\EOT\ENQ\DC2\ETX\f\v\DC1\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\EOT\SOH\DC2\ETX\f\DC2\ETB\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\EOT\ETX\DC2\ETX\f\SUB\ESC\n\
    \\n\
    \\n\
    \\STX\EOT\SOH\DC2\EOT\SO\NUL\DC4\SOH\n\
    \\n\
    \\n\
    \\ETX\EOT\SOH\SOH\DC2\ETX\SO\b!\n\
    \\v\n\
    \\EOT\EOT\SOH\STX\NUL\DC2\ETX\SI\STX\SUB\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\NUL\EOT\DC2\ETX\SI\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\NUL\ENQ\DC2\ETX\SI\v\DC1\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\NUL\SOH\DC2\ETX\SI\DC2\NAK\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\NUL\ETX\DC2\ETX\SI\CAN\EM\n\
    \\v\n\
    \\EOT\EOT\SOH\STX\SOH\DC2\ETX\DLE\STX\SUB\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\SOH\EOT\DC2\ETX\DLE\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\SOH\ENQ\DC2\ETX\DLE\v\DC1\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\SOH\SOH\DC2\ETX\DLE\DC2\NAK\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\SOH\ETX\DC2\ETX\DLE\CAN\EM\n\
    \\v\n\
    \\EOT\EOT\SOH\STX\STX\DC2\ETX\DC1\STX\EM\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\STX\EOT\DC2\ETX\DC1\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\STX\ENQ\DC2\ETX\DC1\v\DLE\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\STX\SOH\DC2\ETX\DC1\DC1\DC4\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\STX\ETX\DC2\ETX\DC1\ETB\CAN\n\
    \\v\n\
    \\EOT\EOT\SOH\STX\ETX\DC2\ETX\DC2\STX\SUB\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\ETX\EOT\DC2\ETX\DC2\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\ETX\ENQ\DC2\ETX\DC2\v\DC1\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\ETX\SOH\DC2\ETX\DC2\DC2\NAK\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\ETX\ETX\DC2\ETX\DC2\CAN\EM\n\
    \\v\n\
    \\EOT\EOT\SOH\STX\EOT\DC2\ETX\DC3\STX\GS\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\EOT\EOT\DC2\ETX\DC3\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\EOT\ENQ\DC2\ETX\DC3\v\DC1\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\EOT\SOH\DC2\ETX\DC3\DC2\CAN\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\EOT\ETX\DC2\ETX\DC3\ESC\FS\n\
    \\n\
    \\n\
    \\STX\EOT\STX\DC2\EOT\NAK\NUL\SUB\SOH\n\
    \\n\
    \\n\
    \\ETX\EOT\STX\SOH\DC2\ETX\NAK\b$\n\
    \\v\n\
    \\EOT\EOT\STX\STX\NUL\DC2\ETX\SYN\STX\SUB\n\
    \\f\n\
    \\ENQ\EOT\STX\STX\NUL\EOT\DC2\ETX\SYN\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\STX\STX\NUL\ENQ\DC2\ETX\SYN\v\DC1\n\
    \\f\n\
    \\ENQ\EOT\STX\STX\NUL\SOH\DC2\ETX\SYN\DC2\NAK\n\
    \\f\n\
    \\ENQ\EOT\STX\STX\NUL\ETX\DC2\ETX\SYN\CAN\EM\n\
    \\v\n\
    \\EOT\EOT\STX\STX\SOH\DC2\ETX\ETB\STX\SUB\n\
    \\f\n\
    \\ENQ\EOT\STX\STX\SOH\EOT\DC2\ETX\ETB\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\STX\STX\SOH\ENQ\DC2\ETX\ETB\v\DC1\n\
    \\f\n\
    \\ENQ\EOT\STX\STX\SOH\SOH\DC2\ETX\ETB\DC2\NAK\n\
    \\f\n\
    \\ENQ\EOT\STX\STX\SOH\ETX\DC2\ETX\ETB\CAN\EM\n\
    \\v\n\
    \\EOT\EOT\STX\STX\STX\DC2\ETX\CAN\STX\GS\n\
    \\f\n\
    \\ENQ\EOT\STX\STX\STX\EOT\DC2\ETX\CAN\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\STX\STX\STX\ENQ\DC2\ETX\CAN\v\DC1\n\
    \\f\n\
    \\ENQ\EOT\STX\STX\STX\SOH\DC2\ETX\CAN\DC2\CAN\n\
    \\f\n\
    \\ENQ\EOT\STX\STX\STX\ETX\DC2\ETX\CAN\ESC\FS\n\
    \\v\n\
    \\EOT\EOT\STX\STX\ETX\DC2\ETX\EM\STX\RS\n\
    \\f\n\
    \\ENQ\EOT\STX\STX\ETX\EOT\DC2\ETX\EM\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\STX\STX\ETX\ENQ\DC2\ETX\EM\v\DLE\n\
    \\f\n\
    \\ENQ\EOT\STX\STX\ETX\SOH\DC2\ETX\EM\DC1\EM\n\
    \\f\n\
    \\ENQ\EOT\STX\STX\ETX\ETX\DC2\ETX\EM\FS\GS\n\
    \\n\
    \\n\
    \\STX\EOT\ETX\DC2\EOT\ESC\NUL\US\SOH\n\
    \\n\
    \\n\
    \\ETX\EOT\ETX\SOH\DC2\ETX\ESC\b#\n\
    \\v\n\
    \\EOT\EOT\ETX\STX\NUL\DC2\ETX\FS\STX\SUB\n\
    \\f\n\
    \\ENQ\EOT\ETX\STX\NUL\EOT\DC2\ETX\FS\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\ETX\STX\NUL\ENQ\DC2\ETX\FS\v\DC1\n\
    \\f\n\
    \\ENQ\EOT\ETX\STX\NUL\SOH\DC2\ETX\FS\DC2\NAK\n\
    \\f\n\
    \\ENQ\EOT\ETX\STX\NUL\ETX\DC2\ETX\FS\CAN\EM\n\
    \\v\n\
    \\EOT\EOT\ETX\STX\SOH\DC2\ETX\GS\STX\SUB\n\
    \\f\n\
    \\ENQ\EOT\ETX\STX\SOH\EOT\DC2\ETX\GS\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\ETX\STX\SOH\ENQ\DC2\ETX\GS\v\DC1\n\
    \\f\n\
    \\ENQ\EOT\ETX\STX\SOH\SOH\DC2\ETX\GS\DC2\NAK\n\
    \\f\n\
    \\ENQ\EOT\ETX\STX\SOH\ETX\DC2\ETX\GS\CAN\EM\n\
    \\v\n\
    \\EOT\EOT\ETX\STX\STX\DC2\ETX\RS\STX\EM\n\
    \\f\n\
    \\ENQ\EOT\ETX\STX\STX\EOT\DC2\ETX\RS\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\ETX\STX\STX\ENQ\DC2\ETX\RS\v\DLE\n\
    \\f\n\
    \\ENQ\EOT\ETX\STX\STX\SOH\DC2\ETX\RS\DC1\DC4\n\
    \\f\n\
    \\ENQ\EOT\ETX\STX\STX\ETX\DC2\ETX\RS\ETB\CAN\n\
    \\n\
    \\n\
    \\STX\EOT\EOT\DC2\EOT \NUL%\SOH\n\
    \\n\
    \\n\
    \\ETX\EOT\EOT\SOH\DC2\ETX \b$\n\
    \\v\n\
    \\EOT\EOT\EOT\STX\NUL\DC2\ETX!\STX\SUB\n\
    \\f\n\
    \\ENQ\EOT\EOT\STX\NUL\EOT\DC2\ETX!\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\EOT\STX\NUL\ENQ\DC2\ETX!\v\DC1\n\
    \\f\n\
    \\ENQ\EOT\EOT\STX\NUL\SOH\DC2\ETX!\DC2\NAK\n\
    \\f\n\
    \\ENQ\EOT\EOT\STX\NUL\ETX\DC2\ETX!\CAN\EM\n\
    \\v\n\
    \\EOT\EOT\EOT\STX\SOH\DC2\ETX\"\STX\SUB\n\
    \\f\n\
    \\ENQ\EOT\EOT\STX\SOH\EOT\DC2\ETX\"\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\EOT\STX\SOH\ENQ\DC2\ETX\"\v\DC1\n\
    \\f\n\
    \\ENQ\EOT\EOT\STX\SOH\SOH\DC2\ETX\"\DC2\NAK\n\
    \\f\n\
    \\ENQ\EOT\EOT\STX\SOH\ETX\DC2\ETX\"\CAN\EM\n\
    \\v\n\
    \\EOT\EOT\EOT\STX\STX\DC2\ETX#\STX\"\n\
    \\f\n\
    \\ENQ\EOT\EOT\STX\STX\EOT\DC2\ETX#\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\EOT\STX\STX\ENQ\DC2\ETX#\v\DC1\n\
    \\f\n\
    \\ENQ\EOT\EOT\STX\STX\SOH\DC2\ETX#\DC2\GS\n\
    \\f\n\
    \\ENQ\EOT\EOT\STX\STX\ETX\DC2\ETX# !\n\
    \\v\n\
    \\EOT\EOT\EOT\STX\ETX\DC2\ETX$\STX\"\n\
    \\f\n\
    \\ENQ\EOT\EOT\STX\ETX\EOT\DC2\ETX$\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\EOT\STX\ETX\ENQ\DC2\ETX$\v\DC1\n\
    \\f\n\
    \\ENQ\EOT\EOT\STX\ETX\SOH\DC2\ETX$\DC2\GS\n\
    \\f\n\
    \\ENQ\EOT\EOT\STX\ETX\ETX\DC2\ETX$ !\n\
    \\n\
    \\n\
    \\STX\EOT\ENQ\DC2\EOT&\NUL2\SOH\n\
    \\n\
    \\n\
    \\ETX\EOT\ENQ\SOH\DC2\ETX&\b%\n\
    \\v\n\
    \\EOT\EOT\ENQ\STX\NUL\DC2\ETX'\STX\SUB\n\
    \\f\n\
    \\ENQ\EOT\ENQ\STX\NUL\EOT\DC2\ETX'\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\ENQ\STX\NUL\ENQ\DC2\ETX'\v\DC1\n\
    \\f\n\
    \\ENQ\EOT\ENQ\STX\NUL\SOH\DC2\ETX'\DC2\NAK\n\
    \\f\n\
    \\ENQ\EOT\ENQ\STX\NUL\ETX\DC2\ETX'\CAN\EM\n\
    \\v\n\
    \\EOT\EOT\ENQ\STX\SOH\DC2\ETX(\STX\SUB\n\
    \\f\n\
    \\ENQ\EOT\ENQ\STX\SOH\EOT\DC2\ETX(\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\ENQ\STX\SOH\ENQ\DC2\ETX(\v\DC1\n\
    \\f\n\
    \\ENQ\EOT\ENQ\STX\SOH\SOH\DC2\ETX(\DC2\NAK\n\
    \\f\n\
    \\ENQ\EOT\ENQ\STX\SOH\ETX\DC2\ETX(\CAN\EM\n\
    \\v\n\
    \\EOT\EOT\ENQ\STX\STX\DC2\ETX)\STX\FS\n\
    \\f\n\
    \\ENQ\EOT\ENQ\STX\STX\EOT\DC2\ETX)\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\ENQ\STX\STX\ENQ\DC2\ETX)\v\DC1\n\
    \\f\n\
    \\ENQ\EOT\ENQ\STX\STX\SOH\DC2\ETX)\DC2\ETB\n\
    \\f\n\
    \\ENQ\EOT\ENQ\STX\STX\ETX\DC2\ETX)\SUB\ESC\n\
    \\v\n\
    \\EOT\EOT\ENQ\STX\ETX\DC2\ETX*\STX\SUB\n\
    \\f\n\
    \\ENQ\EOT\ENQ\STX\ETX\EOT\DC2\ETX*\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\ENQ\STX\ETX\ENQ\DC2\ETX*\v\DC1\n\
    \\f\n\
    \\ENQ\EOT\ENQ\STX\ETX\SOH\DC2\ETX*\DC2\NAK\n\
    \\f\n\
    \\ENQ\EOT\ENQ\STX\ETX\ETX\DC2\ETX*\CAN\EM\n\
    \\v\n\
    \\EOT\EOT\ENQ\STX\EOT\DC2\ETX+\STX\RS\n\
    \\f\n\
    \\ENQ\EOT\ENQ\STX\EOT\EOT\DC2\ETX+\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\ENQ\STX\EOT\ENQ\DC2\ETX+\v\DC1\n\
    \\f\n\
    \\ENQ\EOT\ENQ\STX\EOT\SOH\DC2\ETX+\DC2\EM\n\
    \\f\n\
    \\ENQ\EOT\ENQ\STX\EOT\ETX\DC2\ETX+\FS\GS\n\
    \\v\n\
    \\EOT\EOT\ENQ\STX\ENQ\DC2\ETX,\STX\FS\n\
    \\f\n\
    \\ENQ\EOT\ENQ\STX\ENQ\EOT\DC2\ETX,\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\ENQ\STX\ENQ\ENQ\DC2\ETX,\v\DC1\n\
    \\f\n\
    \\ENQ\EOT\ENQ\STX\ENQ\SOH\DC2\ETX,\DC2\ETB\n\
    \\f\n\
    \\ENQ\EOT\ENQ\STX\ENQ\ETX\DC2\ETX,\SUB\ESC\n\
    \\v\n\
    \\EOT\EOT\ENQ\STX\ACK\DC2\ETX-\STX\GS\n\
    \\f\n\
    \\ENQ\EOT\ENQ\STX\ACK\EOT\DC2\ETX-\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\ENQ\STX\ACK\ENQ\DC2\ETX-\v\DC1\n\
    \\f\n\
    \\ENQ\EOT\ENQ\STX\ACK\SOH\DC2\ETX-\DC2\CAN\n\
    \\f\n\
    \\ENQ\EOT\ENQ\STX\ACK\ETX\DC2\ETX-\ESC\FS\n\
    \\v\n\
    \\EOT\EOT\ENQ\STX\a\DC2\ETX.\STX\ESC\n\
    \\f\n\
    \\ENQ\EOT\ENQ\STX\a\EOT\DC2\ETX.\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\ENQ\STX\a\ENQ\DC2\ETX.\v\DC1\n\
    \\f\n\
    \\ENQ\EOT\ENQ\STX\a\SOH\DC2\ETX.\DC2\SYN\n\
    \\f\n\
    \\ENQ\EOT\ENQ\STX\a\ETX\DC2\ETX.\EM\SUB\n\
    \\v\n\
    \\EOT\EOT\ENQ\STX\b\DC2\ETX/\STX\FS\n\
    \\f\n\
    \\ENQ\EOT\ENQ\STX\b\EOT\DC2\ETX/\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\ENQ\STX\b\ENQ\DC2\ETX/\v\DC1\n\
    \\f\n\
    \\ENQ\EOT\ENQ\STX\b\SOH\DC2\ETX/\DC2\ETB\n\
    \\f\n\
    \\ENQ\EOT\ENQ\STX\b\ETX\DC2\ETX/\SUB\ESC\n\
    \\v\n\
    \\EOT\EOT\ENQ\STX\t\DC2\ETX0\STX\RS\n\
    \\f\n\
    \\ENQ\EOT\ENQ\STX\t\EOT\DC2\ETX0\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\ENQ\STX\t\ENQ\DC2\ETX0\v\DC1\n\
    \\f\n\
    \\ENQ\EOT\ENQ\STX\t\SOH\DC2\ETX0\DC2\CAN\n\
    \\f\n\
    \\ENQ\EOT\ENQ\STX\t\ETX\DC2\ETX0\ESC\GS\n\
    \\v\n\
    \\EOT\EOT\ENQ\STX\n\
    \\DC2\ETX1\STX\GS\n\
    \\f\n\
    \\ENQ\EOT\ENQ\STX\n\
    \\EOT\DC2\ETX1\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\ENQ\STX\n\
    \\ENQ\DC2\ETX1\v\DC1\n\
    \\f\n\
    \\ENQ\EOT\ENQ\STX\n\
    \\SOH\DC2\ETX1\DC2\ETB\n\
    \\f\n\
    \\ENQ\EOT\ENQ\STX\n\
    \\ETX\DC2\ETX1\SUB\FS\n\
    \\n\
    \\n\
    \\STX\EOT\ACK\DC2\EOT3\NUL8\SOH\n\
    \\n\
    \\n\
    \\ETX\EOT\ACK\SOH\DC2\ETX3\b$\n\
    \\v\n\
    \\EOT\EOT\ACK\STX\NUL\DC2\ETX4\STX\SUB\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\NUL\EOT\DC2\ETX4\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\NUL\ENQ\DC2\ETX4\v\DC1\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\NUL\SOH\DC2\ETX4\DC2\NAK\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\NUL\ETX\DC2\ETX4\CAN\EM\n\
    \\v\n\
    \\EOT\EOT\ACK\STX\SOH\DC2\ETX5\STX\SUB\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\SOH\EOT\DC2\ETX5\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\SOH\ENQ\DC2\ETX5\v\DC1\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\SOH\SOH\DC2\ETX5\DC2\NAK\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\SOH\ETX\DC2\ETX5\CAN\EM\n\
    \\v\n\
    \\EOT\EOT\ACK\STX\STX\DC2\ETX6\STX\SUB\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\STX\EOT\DC2\ETX6\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\STX\ENQ\DC2\ETX6\v\DC1\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\STX\SOH\DC2\ETX6\DC2\NAK\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\STX\ETX\DC2\ETX6\CAN\EM\n\
    \\v\n\
    \\EOT\EOT\ACK\STX\ETX\DC2\ETX7\STX\ESC\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\ETX\EOT\DC2\ETX7\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\ETX\ENQ\DC2\ETX7\v\DC1\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\ETX\SOH\DC2\ETX7\DC2\SYN\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\ETX\ETX\DC2\ETX7\EM\SUB\n\
    \\n\
    \\n\
    \\STX\EOT\a\DC2\EOT9\NUL=\SOH\n\
    \\n\
    \\n\
    \\ETX\EOT\a\SOH\DC2\ETX9\b+\n\
    \\v\n\
    \\EOT\EOT\a\STX\NUL\DC2\ETX:\STX\SUB\n\
    \\f\n\
    \\ENQ\EOT\a\STX\NUL\EOT\DC2\ETX:\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\a\STX\NUL\ENQ\DC2\ETX:\v\DC1\n\
    \\f\n\
    \\ENQ\EOT\a\STX\NUL\SOH\DC2\ETX:\DC2\NAK\n\
    \\f\n\
    \\ENQ\EOT\a\STX\NUL\ETX\DC2\ETX:\CAN\EM\n\
    \\v\n\
    \\EOT\EOT\a\STX\SOH\DC2\ETX;\STX\SUB\n\
    \\f\n\
    \\ENQ\EOT\a\STX\SOH\EOT\DC2\ETX;\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\a\STX\SOH\ENQ\DC2\ETX;\v\DC1\n\
    \\f\n\
    \\ENQ\EOT\a\STX\SOH\SOH\DC2\ETX;\DC2\NAK\n\
    \\f\n\
    \\ENQ\EOT\a\STX\SOH\ETX\DC2\ETX;\CAN\EM\n\
    \\v\n\
    \\EOT\EOT\a\STX\STX\DC2\ETX<\STX\RS\n\
    \\f\n\
    \\ENQ\EOT\a\STX\STX\EOT\DC2\ETX<\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\a\STX\STX\ENQ\DC2\ETX<\v\DLE\n\
    \\f\n\
    \\ENQ\EOT\a\STX\STX\SOH\DC2\ETX<\DC1\EM\n\
    \\f\n\
    \\ENQ\EOT\a\STX\STX\ETX\DC2\ETX<\FS\GS\n\
    \\n\
    \\n\
    \\STX\EOT\b\DC2\EOT>\NULC\SOH\n\
    \\n\
    \\n\
    \\ETX\EOT\b\SOH\DC2\ETX>\b$\n\
    \\v\n\
    \\EOT\EOT\b\STX\NUL\DC2\ETX?\STX\SUB\n\
    \\f\n\
    \\ENQ\EOT\b\STX\NUL\EOT\DC2\ETX?\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\b\STX\NUL\ENQ\DC2\ETX?\v\DC1\n\
    \\f\n\
    \\ENQ\EOT\b\STX\NUL\SOH\DC2\ETX?\DC2\NAK\n\
    \\f\n\
    \\ENQ\EOT\b\STX\NUL\ETX\DC2\ETX?\CAN\EM\n\
    \\v\n\
    \\EOT\EOT\b\STX\SOH\DC2\ETX@\STX\SUB\n\
    \\f\n\
    \\ENQ\EOT\b\STX\SOH\EOT\DC2\ETX@\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\b\STX\SOH\ENQ\DC2\ETX@\v\DC1\n\
    \\f\n\
    \\ENQ\EOT\b\STX\SOH\SOH\DC2\ETX@\DC2\NAK\n\
    \\f\n\
    \\ENQ\EOT\b\STX\SOH\ETX\DC2\ETX@\CAN\EM\n\
    \\v\n\
    \\EOT\EOT\b\STX\STX\DC2\ETXA\STX\FS\n\
    \\f\n\
    \\ENQ\EOT\b\STX\STX\EOT\DC2\ETXA\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\b\STX\STX\ENQ\DC2\ETXA\v\DLE\n\
    \\f\n\
    \\ENQ\EOT\b\STX\STX\SOH\DC2\ETXA\DC1\ETB\n\
    \\f\n\
    \\ENQ\EOT\b\STX\STX\ETX\DC2\ETXA\SUB\ESC\n\
    \\v\n\
    \\EOT\EOT\b\STX\ETX\DC2\ETXB\STX\EM\n\
    \\f\n\
    \\ENQ\EOT\b\STX\ETX\EOT\DC2\ETXB\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\b\STX\ETX\ENQ\DC2\ETXB\v\DLE\n\
    \\f\n\
    \\ENQ\EOT\b\STX\ETX\SOH\DC2\ETXB\DC1\DC4\n\
    \\f\n\
    \\ENQ\EOT\b\STX\ETX\ETX\DC2\ETXB\ETB\CAN\n\
    \\n\
    \\n\
    \\STX\EOT\t\DC2\EOTD\NULM\SOH\n\
    \\n\
    \\n\
    \\ETX\EOT\t\SOH\DC2\ETXD\b%\n\
    \\v\n\
    \\EOT\EOT\t\STX\NUL\DC2\ETXE\STX\SUB\n\
    \\f\n\
    \\ENQ\EOT\t\STX\NUL\EOT\DC2\ETXE\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\t\STX\NUL\ENQ\DC2\ETXE\v\DC1\n\
    \\f\n\
    \\ENQ\EOT\t\STX\NUL\SOH\DC2\ETXE\DC2\NAK\n\
    \\f\n\
    \\ENQ\EOT\t\STX\NUL\ETX\DC2\ETXE\CAN\EM\n\
    \\v\n\
    \\EOT\EOT\t\STX\SOH\DC2\ETXF\STX\SUB\n\
    \\f\n\
    \\ENQ\EOT\t\STX\SOH\EOT\DC2\ETXF\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\t\STX\SOH\ENQ\DC2\ETXF\v\DC1\n\
    \\f\n\
    \\ENQ\EOT\t\STX\SOH\SOH\DC2\ETXF\DC2\NAK\n\
    \\f\n\
    \\ENQ\EOT\t\STX\SOH\ETX\DC2\ETXF\CAN\EM\n\
    \\v\n\
    \\EOT\EOT\t\STX\STX\DC2\ETXG\STX\US\n\
    \\f\n\
    \\ENQ\EOT\t\STX\STX\EOT\DC2\ETXG\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\t\STX\STX\ENQ\DC2\ETXG\v\DC1\n\
    \\f\n\
    \\ENQ\EOT\t\STX\STX\SOH\DC2\ETXG\DC2\SUB\n\
    \\f\n\
    \\ENQ\EOT\t\STX\STX\ETX\DC2\ETXG\GS\RS\n\
    \\v\n\
    \\EOT\EOT\t\STX\ETX\DC2\ETXH\STX\"\n\
    \\f\n\
    \\ENQ\EOT\t\STX\ETX\EOT\DC2\ETXH\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\t\STX\ETX\ENQ\DC2\ETXH\v\DLE\n\
    \\f\n\
    \\ENQ\EOT\t\STX\ETX\SOH\DC2\ETXH\DC1\GS\n\
    \\f\n\
    \\ENQ\EOT\t\STX\ETX\ETX\DC2\ETXH !\n\
    \\v\n\
    \\EOT\EOT\t\STX\EOT\DC2\ETXI\STX*\n\
    \\f\n\
    \\ENQ\EOT\t\STX\EOT\EOT\DC2\ETXI\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\t\STX\EOT\ENQ\DC2\ETXI\v\DLE\n\
    \\f\n\
    \\ENQ\EOT\t\STX\EOT\SOH\DC2\ETXI\DC1%\n\
    \\f\n\
    \\ENQ\EOT\t\STX\EOT\ETX\DC2\ETXI()\n\
    \\v\n\
    \\EOT\EOT\t\STX\ENQ\DC2\ETXJ\STX*\n\
    \\f\n\
    \\ENQ\EOT\t\STX\ENQ\EOT\DC2\ETXJ\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\t\STX\ENQ\ENQ\DC2\ETXJ\v\DLE\n\
    \\f\n\
    \\ENQ\EOT\t\STX\ENQ\SOH\DC2\ETXJ\DC1%\n\
    \\f\n\
    \\ENQ\EOT\t\STX\ENQ\ETX\DC2\ETXJ()\n\
    \\v\n\
    \\EOT\EOT\t\STX\ACK\DC2\ETXK\STX+\n\
    \\f\n\
    \\ENQ\EOT\t\STX\ACK\EOT\DC2\ETXK\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\t\STX\ACK\ENQ\DC2\ETXK\v\DLE\n\
    \\f\n\
    \\ENQ\EOT\t\STX\ACK\SOH\DC2\ETXK\DC1&\n\
    \\f\n\
    \\ENQ\EOT\t\STX\ACK\ETX\DC2\ETXK)*\n\
    \\v\n\
    \\EOT\EOT\t\STX\a\DC2\ETXL\STX\ESC\n\
    \\f\n\
    \\ENQ\EOT\t\STX\a\EOT\DC2\ETXL\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\t\STX\a\ENQ\DC2\ETXL\v\DC1\n\
    \\f\n\
    \\ENQ\EOT\t\STX\a\SOH\DC2\ETXL\DC2\SYN\n\
    \\f\n\
    \\ENQ\EOT\t\STX\a\ETX\DC2\ETXL\EM\SUB\n\
    \\n\
    \\n\
    \\STX\EOT\n\
    \\DC2\EOTN\NULV\SOH\n\
    \\n\
    \\n\
    \\ETX\EOT\n\
    \\SOH\DC2\ETXN\b%\n\
    \\v\n\
    \\EOT\EOT\n\
    \\STX\NUL\DC2\ETXO\STX\SUB\n\
    \\f\n\
    \\ENQ\EOT\n\
    \\STX\NUL\EOT\DC2\ETXO\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\n\
    \\STX\NUL\ENQ\DC2\ETXO\v\DC1\n\
    \\f\n\
    \\ENQ\EOT\n\
    \\STX\NUL\SOH\DC2\ETXO\DC2\NAK\n\
    \\f\n\
    \\ENQ\EOT\n\
    \\STX\NUL\ETX\DC2\ETXO\CAN\EM\n\
    \\v\n\
    \\EOT\EOT\n\
    \\STX\SOH\DC2\ETXP\STX\SUB\n\
    \\f\n\
    \\ENQ\EOT\n\
    \\STX\SOH\EOT\DC2\ETXP\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\n\
    \\STX\SOH\ENQ\DC2\ETXP\v\DC1\n\
    \\f\n\
    \\ENQ\EOT\n\
    \\STX\SOH\SOH\DC2\ETXP\DC2\NAK\n\
    \\f\n\
    \\ENQ\EOT\n\
    \\STX\SOH\ETX\DC2\ETXP\CAN\EM\n\
    \\v\n\
    \\EOT\EOT\n\
    \\STX\STX\DC2\ETXQ\STX\US\n\
    \\f\n\
    \\ENQ\EOT\n\
    \\STX\STX\EOT\DC2\ETXQ\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\n\
    \\STX\STX\ENQ\DC2\ETXQ\v\DC1\n\
    \\f\n\
    \\ENQ\EOT\n\
    \\STX\STX\SOH\DC2\ETXQ\DC2\SUB\n\
    \\f\n\
    \\ENQ\EOT\n\
    \\STX\STX\ETX\DC2\ETXQ\GS\RS\n\
    \\v\n\
    \\EOT\EOT\n\
    \\STX\ETX\DC2\ETXR\STX*\n\
    \\f\n\
    \\ENQ\EOT\n\
    \\STX\ETX\EOT\DC2\ETXR\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\n\
    \\STX\ETX\ENQ\DC2\ETXR\v\DLE\n\
    \\f\n\
    \\ENQ\EOT\n\
    \\STX\ETX\SOH\DC2\ETXR\DC1%\n\
    \\f\n\
    \\ENQ\EOT\n\
    \\STX\ETX\ETX\DC2\ETXR()\n\
    \\v\n\
    \\EOT\EOT\n\
    \\STX\EOT\DC2\ETXS\STX*\n\
    \\f\n\
    \\ENQ\EOT\n\
    \\STX\EOT\EOT\DC2\ETXS\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\n\
    \\STX\EOT\ENQ\DC2\ETXS\v\DLE\n\
    \\f\n\
    \\ENQ\EOT\n\
    \\STX\EOT\SOH\DC2\ETXS\DC1%\n\
    \\f\n\
    \\ENQ\EOT\n\
    \\STX\EOT\ETX\DC2\ETXS()\n\
    \\v\n\
    \\EOT\EOT\n\
    \\STX\ENQ\DC2\ETXT\STX\ESC\n\
    \\f\n\
    \\ENQ\EOT\n\
    \\STX\ENQ\EOT\DC2\ETXT\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\n\
    \\STX\ENQ\ENQ\DC2\ETXT\v\DC1\n\
    \\f\n\
    \\ENQ\EOT\n\
    \\STX\ENQ\SOH\DC2\ETXT\DC2\SYN\n\
    \\f\n\
    \\ENQ\EOT\n\
    \\STX\ENQ\ETX\DC2\ETXT\EM\SUB\n\
    \\v\n\
    \\EOT\EOT\n\
    \\STX\ACK\DC2\ETXU\STX\US\n\
    \\f\n\
    \\ENQ\EOT\n\
    \\STX\ACK\EOT\DC2\ETXU\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\n\
    \\STX\ACK\ENQ\DC2\ETXU\v\DLE\n\
    \\f\n\
    \\ENQ\EOT\n\
    \\STX\ACK\SOH\DC2\ETXU\DC1\SUB\n\
    \\f\n\
    \\ENQ\EOT\n\
    \\STX\ACK\ETX\DC2\ETXU\GS\RS\n\
    \\n\
    \\n\
    \\STX\EOT\v\DC2\EOTW\NULa\SOH\n\
    \\n\
    \\n\
    \\ETX\EOT\v\SOH\DC2\ETXW\b+\n\
    \\v\n\
    \\EOT\EOT\v\STX\NUL\DC2\ETXX\STX\SUB\n\
    \\f\n\
    \\ENQ\EOT\v\STX\NUL\EOT\DC2\ETXX\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\v\STX\NUL\ENQ\DC2\ETXX\v\DC1\n\
    \\f\n\
    \\ENQ\EOT\v\STX\NUL\SOH\DC2\ETXX\DC2\NAK\n\
    \\f\n\
    \\ENQ\EOT\v\STX\NUL\ETX\DC2\ETXX\CAN\EM\n\
    \\v\n\
    \\EOT\EOT\v\STX\SOH\DC2\ETXY\STX\SUB\n\
    \\f\n\
    \\ENQ\EOT\v\STX\SOH\EOT\DC2\ETXY\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\v\STX\SOH\ENQ\DC2\ETXY\v\DC1\n\
    \\f\n\
    \\ENQ\EOT\v\STX\SOH\SOH\DC2\ETXY\DC2\NAK\n\
    \\f\n\
    \\ENQ\EOT\v\STX\SOH\ETX\DC2\ETXY\CAN\EM\n\
    \\v\n\
    \\EOT\EOT\v\STX\STX\DC2\ETXZ\STX\US\n\
    \\f\n\
    \\ENQ\EOT\v\STX\STX\EOT\DC2\ETXZ\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\v\STX\STX\ENQ\DC2\ETXZ\v\DC1\n\
    \\f\n\
    \\ENQ\EOT\v\STX\STX\SOH\DC2\ETXZ\DC2\SUB\n\
    \\f\n\
    \\ENQ\EOT\v\STX\STX\ETX\DC2\ETXZ\GS\RS\n\
    \\v\n\
    \\EOT\EOT\v\STX\ETX\DC2\ETX[\STX!\n\
    \\f\n\
    \\ENQ\EOT\v\STX\ETX\EOT\DC2\ETX[\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\v\STX\ETX\ENQ\DC2\ETX[\v\DLE\n\
    \\f\n\
    \\ENQ\EOT\v\STX\ETX\SOH\DC2\ETX[\DC1\FS\n\
    \\f\n\
    \\ENQ\EOT\v\STX\ETX\ETX\DC2\ETX[\US \n\
    \\v\n\
    \\EOT\EOT\v\STX\EOT\DC2\ETX\\\STX*\n\
    \\f\n\
    \\ENQ\EOT\v\STX\EOT\EOT\DC2\ETX\\\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\v\STX\EOT\ENQ\DC2\ETX\\\v\DLE\n\
    \\f\n\
    \\ENQ\EOT\v\STX\EOT\SOH\DC2\ETX\\\DC1%\n\
    \\f\n\
    \\ENQ\EOT\v\STX\EOT\ETX\DC2\ETX\\()\n\
    \\v\n\
    \\EOT\EOT\v\STX\ENQ\DC2\ETX]\STX*\n\
    \\f\n\
    \\ENQ\EOT\v\STX\ENQ\EOT\DC2\ETX]\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\v\STX\ENQ\ENQ\DC2\ETX]\v\DLE\n\
    \\f\n\
    \\ENQ\EOT\v\STX\ENQ\SOH\DC2\ETX]\DC1%\n\
    \\f\n\
    \\ENQ\EOT\v\STX\ENQ\ETX\DC2\ETX]()\n\
    \\v\n\
    \\EOT\EOT\v\STX\ACK\DC2\ETX^\STX+\n\
    \\f\n\
    \\ENQ\EOT\v\STX\ACK\EOT\DC2\ETX^\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\v\STX\ACK\ENQ\DC2\ETX^\v\DLE\n\
    \\f\n\
    \\ENQ\EOT\v\STX\ACK\SOH\DC2\ETX^\DC1&\n\
    \\f\n\
    \\ENQ\EOT\v\STX\ACK\ETX\DC2\ETX^)*\n\
    \\v\n\
    \\EOT\EOT\v\STX\a\DC2\ETX_\STX!\n\
    \\f\n\
    \\ENQ\EOT\v\STX\a\EOT\DC2\ETX_\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\v\STX\a\ENQ\DC2\ETX_\v\DLE\n\
    \\f\n\
    \\ENQ\EOT\v\STX\a\SOH\DC2\ETX_\DC1\FS\n\
    \\f\n\
    \\ENQ\EOT\v\STX\a\ETX\DC2\ETX_\US \n\
    \\v\n\
    \\EOT\EOT\v\STX\b\DC2\ETX`\STX\ESC\n\
    \\f\n\
    \\ENQ\EOT\v\STX\b\EOT\DC2\ETX`\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\v\STX\b\ENQ\DC2\ETX`\v\DC1\n\
    \\f\n\
    \\ENQ\EOT\v\STX\b\SOH\DC2\ETX`\DC2\SYN\n\
    \\f\n\
    \\ENQ\EOT\v\STX\b\ETX\DC2\ETX`\EM\SUB\n\
    \\n\
    \\n\
    \\STX\EOT\f\DC2\EOTb\NULm\SOH\n\
    \\n\
    \\n\
    \\ETX\EOT\f\SOH\DC2\ETXb\b#\n\
    \\v\n\
    \\EOT\EOT\f\STX\NUL\DC2\ETXc\STX\SUB\n\
    \\f\n\
    \\ENQ\EOT\f\STX\NUL\EOT\DC2\ETXc\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\f\STX\NUL\ENQ\DC2\ETXc\v\DC1\n\
    \\f\n\
    \\ENQ\EOT\f\STX\NUL\SOH\DC2\ETXc\DC2\NAK\n\
    \\f\n\
    \\ENQ\EOT\f\STX\NUL\ETX\DC2\ETXc\CAN\EM\n\
    \\v\n\
    \\EOT\EOT\f\STX\SOH\DC2\ETXd\STX\SUB\n\
    \\f\n\
    \\ENQ\EOT\f\STX\SOH\EOT\DC2\ETXd\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\f\STX\SOH\ENQ\DC2\ETXd\v\DC1\n\
    \\f\n\
    \\ENQ\EOT\f\STX\SOH\SOH\DC2\ETXd\DC2\NAK\n\
    \\f\n\
    \\ENQ\EOT\f\STX\SOH\ETX\DC2\ETXd\CAN\EM\n\
    \\v\n\
    \\EOT\EOT\f\STX\STX\DC2\ETXe\STX!\n\
    \\f\n\
    \\ENQ\EOT\f\STX\STX\EOT\DC2\ETXe\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\f\STX\STX\ENQ\DC2\ETXe\v\DC1\n\
    \\f\n\
    \\ENQ\EOT\f\STX\STX\SOH\DC2\ETXe\DC2\FS\n\
    \\f\n\
    \\ENQ\EOT\f\STX\STX\ETX\DC2\ETXe\US \n\
    \\v\n\
    \\EOT\EOT\f\STX\ETX\DC2\ETXf\STX!\n\
    \\f\n\
    \\ENQ\EOT\f\STX\ETX\EOT\DC2\ETXf\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\f\STX\ETX\ENQ\DC2\ETXf\v\DLE\n\
    \\f\n\
    \\ENQ\EOT\f\STX\ETX\SOH\DC2\ETXf\DC1\FS\n\
    \\f\n\
    \\ENQ\EOT\f\STX\ETX\ETX\DC2\ETXf\US \n\
    \\v\n\
    \\EOT\EOT\f\STX\EOT\DC2\ETXg\STX\US\n\
    \\f\n\
    \\ENQ\EOT\f\STX\EOT\EOT\DC2\ETXg\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\f\STX\EOT\ENQ\DC2\ETXg\v\DLE\n\
    \\f\n\
    \\ENQ\EOT\f\STX\EOT\SOH\DC2\ETXg\DC1\SUB\n\
    \\f\n\
    \\ENQ\EOT\f\STX\EOT\ETX\DC2\ETXg\GS\RS\n\
    \\v\n\
    \\EOT\EOT\f\STX\ENQ\DC2\ETXh\STX \n\
    \\f\n\
    \\ENQ\EOT\f\STX\ENQ\EOT\DC2\ETXh\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\f\STX\ENQ\ENQ\DC2\ETXh\v\DC1\n\
    \\f\n\
    \\ENQ\EOT\f\STX\ENQ\SOH\DC2\ETXh\DC2\ESC\n\
    \\f\n\
    \\ENQ\EOT\f\STX\ENQ\ETX\DC2\ETXh\RS\US\n\
    \\v\n\
    \\EOT\EOT\f\STX\ACK\DC2\ETXi\STX\GS\n\
    \\f\n\
    \\ENQ\EOT\f\STX\ACK\EOT\DC2\ETXi\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\f\STX\ACK\ENQ\DC2\ETXi\v\DC1\n\
    \\f\n\
    \\ENQ\EOT\f\STX\ACK\SOH\DC2\ETXi\DC2\CAN\n\
    \\f\n\
    \\ENQ\EOT\f\STX\ACK\ETX\DC2\ETXi\ESC\FS\n\
    \\v\n\
    \\EOT\EOT\f\STX\a\DC2\ETXj\STX\RS\n\
    \\f\n\
    \\ENQ\EOT\f\STX\a\EOT\DC2\ETXj\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\f\STX\a\ENQ\DC2\ETXj\v\DC1\n\
    \\f\n\
    \\ENQ\EOT\f\STX\a\SOH\DC2\ETXj\DC2\EM\n\
    \\f\n\
    \\ENQ\EOT\f\STX\a\ETX\DC2\ETXj\FS\GS\n\
    \\v\n\
    \\EOT\EOT\f\STX\b\DC2\ETXk\STX\GS\n\
    \\f\n\
    \\ENQ\EOT\f\STX\b\EOT\DC2\ETXk\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\f\STX\b\ENQ\DC2\ETXk\v\DLE\n\
    \\f\n\
    \\ENQ\EOT\f\STX\b\SOH\DC2\ETXk\DC1\CAN\n\
    \\f\n\
    \\ENQ\EOT\f\STX\b\ETX\DC2\ETXk\ESC\FS\n\
    \\v\n\
    \\EOT\EOT\f\STX\t\DC2\ETXl\STX$\n\
    \\f\n\
    \\ENQ\EOT\f\STX\t\EOT\DC2\ETXl\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\f\STX\t\ENQ\DC2\ETXl\v\DLE\n\
    \\f\n\
    \\ENQ\EOT\f\STX\t\SOH\DC2\ETXl\DC1\RS\n\
    \\f\n\
    \\ENQ\EOT\f\STX\t\ETX\DC2\ETXl!#\n\
    \\n\
    \\n\
    \\STX\EOT\r\DC2\EOTn\NULt\SOH\n\
    \\n\
    \\n\
    \\ETX\EOT\r\SOH\DC2\ETXn\b)\n\
    \\v\n\
    \\EOT\EOT\r\STX\NUL\DC2\ETXo\STX\SUB\n\
    \\f\n\
    \\ENQ\EOT\r\STX\NUL\EOT\DC2\ETXo\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\r\STX\NUL\ENQ\DC2\ETXo\v\DC1\n\
    \\f\n\
    \\ENQ\EOT\r\STX\NUL\SOH\DC2\ETXo\DC2\NAK\n\
    \\f\n\
    \\ENQ\EOT\r\STX\NUL\ETX\DC2\ETXo\CAN\EM\n\
    \\v\n\
    \\EOT\EOT\r\STX\SOH\DC2\ETXp\STX\SUB\n\
    \\f\n\
    \\ENQ\EOT\r\STX\SOH\EOT\DC2\ETXp\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\r\STX\SOH\ENQ\DC2\ETXp\v\DC1\n\
    \\f\n\
    \\ENQ\EOT\r\STX\SOH\SOH\DC2\ETXp\DC2\NAK\n\
    \\f\n\
    \\ENQ\EOT\r\STX\SOH\ETX\DC2\ETXp\CAN\EM\n\
    \\v\n\
    \\EOT\EOT\r\STX\STX\DC2\ETXq\STX\ESC\n\
    \\f\n\
    \\ENQ\EOT\r\STX\STX\EOT\DC2\ETXq\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\r\STX\STX\ENQ\DC2\ETXq\v\DC1\n\
    \\f\n\
    \\ENQ\EOT\r\STX\STX\SOH\DC2\ETXq\DC2\SYN\n\
    \\f\n\
    \\ENQ\EOT\r\STX\STX\ETX\DC2\ETXq\EM\SUB\n\
    \\v\n\
    \\EOT\EOT\r\STX\ETX\DC2\ETXr\STX\SUB\n\
    \\f\n\
    \\ENQ\EOT\r\STX\ETX\EOT\DC2\ETXr\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\r\STX\ETX\ENQ\DC2\ETXr\v\DC1\n\
    \\f\n\
    \\ENQ\EOT\r\STX\ETX\SOH\DC2\ETXr\DC2\NAK\n\
    \\f\n\
    \\ENQ\EOT\r\STX\ETX\ETX\DC2\ETXr\CAN\EM\n\
    \\v\n\
    \\EOT\EOT\r\STX\EOT\DC2\ETXs\STX\FS\n\
    \\f\n\
    \\ENQ\EOT\r\STX\EOT\EOT\DC2\ETXs\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\r\STX\EOT\ENQ\DC2\ETXs\v\DC1\n\
    \\f\n\
    \\ENQ\EOT\r\STX\EOT\SOH\DC2\ETXs\DC2\ETB\n\
    \\f\n\
    \\ENQ\EOT\r\STX\EOT\ETX\DC2\ETXs\SUB\ESC\n\
    \\n\
    \\n\
    \\STX\EOT\SO\DC2\EOTu\NUL{\SOH\n\
    \\n\
    \\n\
    \\ETX\EOT\SO\SOH\DC2\ETXu\b$\n\
    \\v\n\
    \\EOT\EOT\SO\STX\NUL\DC2\ETXv\STX\SUB\n\
    \\f\n\
    \\ENQ\EOT\SO\STX\NUL\EOT\DC2\ETXv\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\SO\STX\NUL\ENQ\DC2\ETXv\v\DC1\n\
    \\f\n\
    \\ENQ\EOT\SO\STX\NUL\SOH\DC2\ETXv\DC2\NAK\n\
    \\f\n\
    \\ENQ\EOT\SO\STX\NUL\ETX\DC2\ETXv\CAN\EM\n\
    \\v\n\
    \\EOT\EOT\SO\STX\SOH\DC2\ETXw\STX\SUB\n\
    \\f\n\
    \\ENQ\EOT\SO\STX\SOH\EOT\DC2\ETXw\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\SO\STX\SOH\ENQ\DC2\ETXw\v\DC1\n\
    \\f\n\
    \\ENQ\EOT\SO\STX\SOH\SOH\DC2\ETXw\DC2\NAK\n\
    \\f\n\
    \\ENQ\EOT\SO\STX\SOH\ETX\DC2\ETXw\CAN\EM\n\
    \\v\n\
    \\EOT\EOT\SO\STX\STX\DC2\ETXx\STX\EM\n\
    \\f\n\
    \\ENQ\EOT\SO\STX\STX\EOT\DC2\ETXx\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\SO\STX\STX\ENQ\DC2\ETXx\v\DLE\n\
    \\f\n\
    \\ENQ\EOT\SO\STX\STX\SOH\DC2\ETXx\DC1\DC4\n\
    \\f\n\
    \\ENQ\EOT\SO\STX\STX\ETX\DC2\ETXx\ETB\CAN\n\
    \\v\n\
    \\EOT\EOT\SO\STX\ETX\DC2\ETXy\STX\SUB\n\
    \\f\n\
    \\ENQ\EOT\SO\STX\ETX\EOT\DC2\ETXy\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\SO\STX\ETX\ENQ\DC2\ETXy\v\DC1\n\
    \\f\n\
    \\ENQ\EOT\SO\STX\ETX\SOH\DC2\ETXy\DC2\NAK\n\
    \\f\n\
    \\ENQ\EOT\SO\STX\ETX\ETX\DC2\ETXy\CAN\EM\n\
    \\v\n\
    \\EOT\EOT\SO\STX\EOT\DC2\ETXz\STX\CAN\n\
    \\f\n\
    \\ENQ\EOT\SO\STX\EOT\EOT\DC2\ETXz\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\SO\STX\EOT\ENQ\DC2\ETXz\v\DLE\n\
    \\f\n\
    \\ENQ\EOT\SO\STX\EOT\SOH\DC2\ETXz\DC1\DC3\n\
    \\f\n\
    \\ENQ\EOT\SO\STX\EOT\ETX\DC2\ETXz\SYN\ETB\n\
    \\v\n\
    \\STX\EOT\SI\DC2\ENQ|\NUL\131\SOH\SOH\n\
    \\n\
    \\n\
    \\ETX\EOT\SI\SOH\DC2\ETX|\b#\n\
    \\v\n\
    \\EOT\EOT\SI\STX\NUL\DC2\ETX}\STX\SUB\n\
    \\f\n\
    \\ENQ\EOT\SI\STX\NUL\EOT\DC2\ETX}\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\SI\STX\NUL\ENQ\DC2\ETX}\v\DC1\n\
    \\f\n\
    \\ENQ\EOT\SI\STX\NUL\SOH\DC2\ETX}\DC2\NAK\n\
    \\f\n\
    \\ENQ\EOT\SI\STX\NUL\ETX\DC2\ETX}\CAN\EM\n\
    \\v\n\
    \\EOT\EOT\SI\STX\SOH\DC2\ETX~\STX\SUB\n\
    \\f\n\
    \\ENQ\EOT\SI\STX\SOH\EOT\DC2\ETX~\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\SI\STX\SOH\ENQ\DC2\ETX~\v\DC1\n\
    \\f\n\
    \\ENQ\EOT\SI\STX\SOH\SOH\DC2\ETX~\DC2\NAK\n\
    \\f\n\
    \\ENQ\EOT\SI\STX\SOH\ETX\DC2\ETX~\CAN\EM\n\
    \\v\n\
    \\EOT\EOT\SI\STX\STX\DC2\ETX\DEL\STX\EM\n\
    \\f\n\
    \\ENQ\EOT\SI\STX\STX\EOT\DC2\ETX\DEL\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\SI\STX\STX\ENQ\DC2\ETX\DEL\v\DLE\n\
    \\f\n\
    \\ENQ\EOT\SI\STX\STX\SOH\DC2\ETX\DEL\DC1\DC4\n\
    \\f\n\
    \\ENQ\EOT\SI\STX\STX\ETX\DC2\ETX\DEL\ETB\CAN\n\
    \\f\n\
    \\EOT\EOT\SI\STX\ETX\DC2\EOT\128\SOH\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\ETX\EOT\DC2\EOT\128\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\ETX\ENQ\DC2\EOT\128\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\ETX\SOH\DC2\EOT\128\SOH\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\ETX\ETX\DC2\EOT\128\SOH\CAN\EM\n\
    \\f\n\
    \\EOT\EOT\SI\STX\EOT\DC2\EOT\129\SOH\STX\CAN\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\EOT\EOT\DC2\EOT\129\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\EOT\ENQ\DC2\EOT\129\SOH\v\DLE\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\EOT\SOH\DC2\EOT\129\SOH\DC1\DC3\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\EOT\ETX\DC2\EOT\129\SOH\SYN\ETB\n\
    \\f\n\
    \\EOT\EOT\SI\STX\ENQ\DC2\EOT\130\SOH\STX\EM\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\ENQ\EOT\DC2\EOT\130\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\ENQ\ENQ\DC2\EOT\130\SOH\v\DLE\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\ENQ\SOH\DC2\EOT\130\SOH\DC1\DC4\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\ENQ\ETX\DC2\EOT\130\SOH\ETB\CAN\n\
    \\f\n\
    \\STX\EOT\DLE\DC2\ACK\132\SOH\NUL\136\SOH\SOH\n\
    \\v\n\
    \\ETX\EOT\DLE\SOH\DC2\EOT\132\SOH\b$\n\
    \\f\n\
    \\EOT\EOT\DLE\STX\NUL\DC2\EOT\133\SOH\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT\DLE\STX\NUL\EOT\DC2\EOT\133\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DLE\STX\NUL\ENQ\DC2\EOT\133\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\DLE\STX\NUL\SOH\DC2\EOT\133\SOH\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT\DLE\STX\NUL\ETX\DC2\EOT\133\SOH\CAN\EM\n\
    \\f\n\
    \\EOT\EOT\DLE\STX\SOH\DC2\EOT\134\SOH\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT\DLE\STX\SOH\EOT\DC2\EOT\134\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DLE\STX\SOH\ENQ\DC2\EOT\134\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\DLE\STX\SOH\SOH\DC2\EOT\134\SOH\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT\DLE\STX\SOH\ETX\DC2\EOT\134\SOH\CAN\EM\n\
    \\f\n\
    \\EOT\EOT\DLE\STX\STX\DC2\EOT\135\SOH\STX\FS\n\
    \\r\n\
    \\ENQ\EOT\DLE\STX\STX\EOT\DC2\EOT\135\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DLE\STX\STX\ENQ\DC2\EOT\135\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\DLE\STX\STX\SOH\DC2\EOT\135\SOH\DC2\ETB\n\
    \\r\n\
    \\ENQ\EOT\DLE\STX\STX\ETX\DC2\EOT\135\SOH\SUB\ESC\n\
    \\f\n\
    \\STX\EOT\DC1\DC2\ACK\137\SOH\NUL\142\SOH\SOH\n\
    \\v\n\
    \\ETX\EOT\DC1\SOH\DC2\EOT\137\SOH\b,\n\
    \\f\n\
    \\EOT\EOT\DC1\STX\NUL\DC2\EOT\138\SOH\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT\DC1\STX\NUL\EOT\DC2\EOT\138\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC1\STX\NUL\ENQ\DC2\EOT\138\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\DC1\STX\NUL\SOH\DC2\EOT\138\SOH\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT\DC1\STX\NUL\ETX\DC2\EOT\138\SOH\CAN\EM\n\
    \\f\n\
    \\EOT\EOT\DC1\STX\SOH\DC2\EOT\139\SOH\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT\DC1\STX\SOH\EOT\DC2\EOT\139\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC1\STX\SOH\ENQ\DC2\EOT\139\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\DC1\STX\SOH\SOH\DC2\EOT\139\SOH\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT\DC1\STX\SOH\ETX\DC2\EOT\139\SOH\CAN\EM\n\
    \\f\n\
    \\EOT\EOT\DC1\STX\STX\DC2\EOT\140\SOH\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT\DC1\STX\STX\EOT\DC2\EOT\140\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC1\STX\STX\ENQ\DC2\EOT\140\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\DC1\STX\STX\SOH\DC2\EOT\140\SOH\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT\DC1\STX\STX\ETX\DC2\EOT\140\SOH\CAN\EM\n\
    \\f\n\
    \\EOT\EOT\DC1\STX\ETX\DC2\EOT\141\SOH\STX\GS\n\
    \\r\n\
    \\ENQ\EOT\DC1\STX\ETX\EOT\DC2\EOT\141\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC1\STX\ETX\ENQ\DC2\EOT\141\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\DC1\STX\ETX\SOH\DC2\EOT\141\SOH\DC2\CAN\n\
    \\r\n\
    \\ENQ\EOT\DC1\STX\ETX\ETX\DC2\EOT\141\SOH\ESC\FS\n\
    \\f\n\
    \\STX\EOT\DC2\DC2\ACK\143\SOH\NUL\147\SOH\SOH\n\
    \\v\n\
    \\ETX\EOT\DC2\SOH\DC2\EOT\143\SOH\b \n\
    \\f\n\
    \\EOT\EOT\DC2\STX\NUL\DC2\EOT\144\SOH\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT\DC2\STX\NUL\EOT\DC2\EOT\144\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC2\STX\NUL\ENQ\DC2\EOT\144\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\DC2\STX\NUL\SOH\DC2\EOT\144\SOH\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT\DC2\STX\NUL\ETX\DC2\EOT\144\SOH\CAN\EM\n\
    \\f\n\
    \\EOT\EOT\DC2\STX\SOH\DC2\EOT\145\SOH\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT\DC2\STX\SOH\EOT\DC2\EOT\145\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC2\STX\SOH\ENQ\DC2\EOT\145\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\DC2\STX\SOH\SOH\DC2\EOT\145\SOH\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT\DC2\STX\SOH\ETX\DC2\EOT\145\SOH\CAN\EM\n\
    \\f\n\
    \\EOT\EOT\DC2\STX\STX\DC2\EOT\146\SOH\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT\DC2\STX\STX\EOT\DC2\EOT\146\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC2\STX\STX\ENQ\DC2\EOT\146\SOH\v\DLE\n\
    \\r\n\
    \\ENQ\EOT\DC2\STX\STX\SOH\DC2\EOT\146\SOH\DC1\NAK\n\
    \\r\n\
    \\ENQ\EOT\DC2\STX\STX\ETX\DC2\EOT\146\SOH\CAN\EM\n\
    \\f\n\
    \\STX\EOT\DC3\DC2\ACK\148\SOH\NUL\155\SOH\SOH\n\
    \\v\n\
    \\ETX\EOT\DC3\SOH\DC2\EOT\148\SOH\b$\n\
    \\f\n\
    \\EOT\EOT\DC3\STX\NUL\DC2\EOT\149\SOH\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\NUL\EOT\DC2\EOT\149\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\NUL\ENQ\DC2\EOT\149\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\NUL\SOH\DC2\EOT\149\SOH\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\NUL\ETX\DC2\EOT\149\SOH\CAN\EM\n\
    \\f\n\
    \\EOT\EOT\DC3\STX\SOH\DC2\EOT\150\SOH\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\SOH\EOT\DC2\EOT\150\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\SOH\ENQ\DC2\EOT\150\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\SOH\SOH\DC2\EOT\150\SOH\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\SOH\ETX\DC2\EOT\150\SOH\CAN\EM\n\
    \\f\n\
    \\EOT\EOT\DC3\STX\STX\DC2\EOT\151\SOH\STX\ESC\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\STX\EOT\DC2\EOT\151\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\STX\ENQ\DC2\EOT\151\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\STX\SOH\DC2\EOT\151\SOH\DC2\SYN\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\STX\ETX\DC2\EOT\151\SOH\EM\SUB\n\
    \\f\n\
    \\EOT\EOT\DC3\STX\ETX\DC2\EOT\152\SOH\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\ETX\EOT\DC2\EOT\152\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\ETX\ENQ\DC2\EOT\152\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\ETX\SOH\DC2\EOT\152\SOH\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\ETX\ETX\DC2\EOT\152\SOH\CAN\EM\n\
    \\f\n\
    \\EOT\EOT\DC3\STX\EOT\DC2\EOT\153\SOH\STX\ESC\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\EOT\EOT\DC2\EOT\153\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\EOT\ENQ\DC2\EOT\153\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\EOT\SOH\DC2\EOT\153\SOH\DC2\SYN\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\EOT\ETX\DC2\EOT\153\SOH\EM\SUB\n\
    \\f\n\
    \\EOT\EOT\DC3\STX\ENQ\DC2\EOT\154\SOH\STX\GS\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\ENQ\EOT\DC2\EOT\154\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\ENQ\ENQ\DC2\EOT\154\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\ENQ\SOH\DC2\EOT\154\SOH\DC2\CAN\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\ENQ\ETX\DC2\EOT\154\SOH\ESC\FS\n\
    \\f\n\
    \\STX\EOT\DC4\DC2\ACK\156\SOH\NUL\160\SOH\SOH\n\
    \\v\n\
    \\ETX\EOT\DC4\SOH\DC2\EOT\156\SOH\b4\n\
    \\f\n\
    \\EOT\EOT\DC4\STX\NUL\DC2\EOT\157\SOH\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\NUL\EOT\DC2\EOT\157\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\NUL\ENQ\DC2\EOT\157\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\NUL\SOH\DC2\EOT\157\SOH\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\NUL\ETX\DC2\EOT\157\SOH\CAN\EM\n\
    \\f\n\
    \\EOT\EOT\DC4\STX\SOH\DC2\EOT\158\SOH\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\SOH\EOT\DC2\EOT\158\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\SOH\ENQ\DC2\EOT\158\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\SOH\SOH\DC2\EOT\158\SOH\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\SOH\ETX\DC2\EOT\158\SOH\CAN\EM\n\
    \\f\n\
    \\EOT\EOT\DC4\STX\STX\DC2\EOT\159\SOH\STX\ESC\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\STX\EOT\DC2\EOT\159\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\STX\ENQ\DC2\EOT\159\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\STX\SOH\DC2\EOT\159\SOH\DC2\SYN\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\STX\ETX\DC2\EOT\159\SOH\EM\SUB\n\
    \\f\n\
    \\STX\EOT\NAK\DC2\ACK\161\SOH\NUL\168\SOH\SOH\n\
    \\v\n\
    \\ETX\EOT\NAK\SOH\DC2\EOT\161\SOH\b3\n\
    \\f\n\
    \\EOT\EOT\NAK\STX\NUL\DC2\EOT\162\SOH\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\NUL\EOT\DC2\EOT\162\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\NUL\ENQ\DC2\EOT\162\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\NUL\SOH\DC2\EOT\162\SOH\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\NUL\ETX\DC2\EOT\162\SOH\CAN\EM\n\
    \\f\n\
    \\EOT\EOT\NAK\STX\SOH\DC2\EOT\163\SOH\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\SOH\EOT\DC2\EOT\163\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\SOH\ENQ\DC2\EOT\163\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\SOH\SOH\DC2\EOT\163\SOH\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\SOH\ETX\DC2\EOT\163\SOH\CAN\EM\n\
    \\f\n\
    \\EOT\EOT\NAK\STX\STX\DC2\EOT\164\SOH\STX\ESC\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\STX\EOT\DC2\EOT\164\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\STX\ENQ\DC2\EOT\164\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\STX\SOH\DC2\EOT\164\SOH\DC2\SYN\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\STX\ETX\DC2\EOT\164\SOH\EM\SUB\n\
    \\f\n\
    \\EOT\EOT\NAK\STX\ETX\DC2\EOT\165\SOH\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\ETX\EOT\DC2\EOT\165\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\ETX\ENQ\DC2\EOT\165\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\ETX\SOH\DC2\EOT\165\SOH\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\ETX\ETX\DC2\EOT\165\SOH\CAN\EM\n\
    \\f\n\
    \\EOT\EOT\NAK\STX\EOT\DC2\EOT\166\SOH\STX\ESC\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\EOT\EOT\DC2\EOT\166\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\EOT\ENQ\DC2\EOT\166\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\EOT\SOH\DC2\EOT\166\SOH\DC2\SYN\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\EOT\ETX\DC2\EOT\166\SOH\EM\SUB\n\
    \\f\n\
    \\EOT\EOT\NAK\STX\ENQ\DC2\EOT\167\SOH\STX\GS\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\ENQ\EOT\DC2\EOT\167\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\ENQ\ENQ\DC2\EOT\167\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\ENQ\SOH\DC2\EOT\167\SOH\DC2\CAN\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\ENQ\ETX\DC2\EOT\167\SOH\ESC\FS\n\
    \\f\n\
    \\STX\EOT\SYN\DC2\ACK\169\SOH\NUL\176\SOH\SOH\n\
    \\v\n\
    \\ETX\EOT\SYN\SOH\DC2\EOT\169\SOH\b%\n\
    \\f\n\
    \\EOT\EOT\SYN\STX\NUL\DC2\EOT\170\SOH\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\NUL\EOT\DC2\EOT\170\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\NUL\ENQ\DC2\EOT\170\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\NUL\SOH\DC2\EOT\170\SOH\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\NUL\ETX\DC2\EOT\170\SOH\CAN\EM\n\
    \\f\n\
    \\EOT\EOT\SYN\STX\SOH\DC2\EOT\171\SOH\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\SOH\EOT\DC2\EOT\171\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\SOH\ENQ\DC2\EOT\171\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\SOH\SOH\DC2\EOT\171\SOH\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\SOH\ETX\DC2\EOT\171\SOH\CAN\EM\n\
    \\f\n\
    \\EOT\EOT\SYN\STX\STX\DC2\EOT\172\SOH\STX\ESC\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\STX\EOT\DC2\EOT\172\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\STX\ENQ\DC2\EOT\172\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\STX\SOH\DC2\EOT\172\SOH\DC2\SYN\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\STX\ETX\DC2\EOT\172\SOH\EM\SUB\n\
    \\f\n\
    \\EOT\EOT\SYN\STX\ETX\DC2\EOT\173\SOH\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\ETX\EOT\DC2\EOT\173\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\ETX\ENQ\DC2\EOT\173\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\ETX\SOH\DC2\EOT\173\SOH\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\ETX\ETX\DC2\EOT\173\SOH\CAN\EM\n\
    \\f\n\
    \\EOT\EOT\SYN\STX\EOT\DC2\EOT\174\SOH\STX\ESC\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\EOT\EOT\DC2\EOT\174\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\EOT\ENQ\DC2\EOT\174\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\EOT\SOH\DC2\EOT\174\SOH\DC2\SYN\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\EOT\ETX\DC2\EOT\174\SOH\EM\SUB\n\
    \\f\n\
    \\EOT\EOT\SYN\STX\ENQ\DC2\EOT\175\SOH\STX\GS\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\ENQ\EOT\DC2\EOT\175\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\ENQ\ENQ\DC2\EOT\175\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\ENQ\SOH\DC2\EOT\175\SOH\DC2\CAN\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\ENQ\ETX\DC2\EOT\175\SOH\ESC\FS\n\
    \\f\n\
    \\STX\EOT\ETB\DC2\ACK\177\SOH\NUL\181\SOH\SOH\n\
    \\v\n\
    \\ETX\EOT\ETB\SOH\DC2\EOT\177\SOH\b*\n\
    \\f\n\
    \\EOT\EOT\ETB\STX\NUL\DC2\EOT\178\SOH\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\NUL\EOT\DC2\EOT\178\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\NUL\ENQ\DC2\EOT\178\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\NUL\SOH\DC2\EOT\178\SOH\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\NUL\ETX\DC2\EOT\178\SOH\CAN\EM\n\
    \\f\n\
    \\EOT\EOT\ETB\STX\SOH\DC2\EOT\179\SOH\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\SOH\EOT\DC2\EOT\179\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\SOH\ENQ\DC2\EOT\179\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\SOH\SOH\DC2\EOT\179\SOH\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\SOH\ETX\DC2\EOT\179\SOH\CAN\EM\n\
    \\f\n\
    \\EOT\EOT\ETB\STX\STX\DC2\EOT\180\SOH\STX\ESC\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\STX\EOT\DC2\EOT\180\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\STX\ENQ\DC2\EOT\180\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\STX\SOH\DC2\EOT\180\SOH\DC2\SYN\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\STX\ETX\DC2\EOT\180\SOH\EM\SUB\n\
    \\f\n\
    \\STX\EOT\CAN\DC2\ACK\182\SOH\NUL\190\SOH\SOH\n\
    \\v\n\
    \\ETX\EOT\CAN\SOH\DC2\EOT\182\SOH\b)\n\
    \\f\n\
    \\EOT\EOT\CAN\STX\NUL\DC2\EOT\183\SOH\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\NUL\EOT\DC2\EOT\183\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\NUL\ENQ\DC2\EOT\183\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\NUL\SOH\DC2\EOT\183\SOH\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\NUL\ETX\DC2\EOT\183\SOH\CAN\EM\n\
    \\f\n\
    \\EOT\EOT\CAN\STX\SOH\DC2\EOT\184\SOH\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\SOH\EOT\DC2\EOT\184\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\SOH\ENQ\DC2\EOT\184\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\SOH\SOH\DC2\EOT\184\SOH\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\SOH\ETX\DC2\EOT\184\SOH\CAN\EM\n\
    \\f\n\
    \\EOT\EOT\CAN\STX\STX\DC2\EOT\185\SOH\STX\ESC\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\STX\EOT\DC2\EOT\185\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\STX\ENQ\DC2\EOT\185\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\STX\SOH\DC2\EOT\185\SOH\DC2\SYN\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\STX\ETX\DC2\EOT\185\SOH\EM\SUB\n\
    \\f\n\
    \\EOT\EOT\CAN\STX\ETX\DC2\EOT\186\SOH\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\ETX\EOT\DC2\EOT\186\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\ETX\ENQ\DC2\EOT\186\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\ETX\SOH\DC2\EOT\186\SOH\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\ETX\ETX\DC2\EOT\186\SOH\CAN\EM\n\
    \\f\n\
    \\EOT\EOT\CAN\STX\EOT\DC2\EOT\187\SOH\STX\ESC\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\EOT\EOT\DC2\EOT\187\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\EOT\ENQ\DC2\EOT\187\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\EOT\SOH\DC2\EOT\187\SOH\DC2\SYN\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\EOT\ETX\DC2\EOT\187\SOH\EM\SUB\n\
    \\f\n\
    \\EOT\EOT\CAN\STX\ENQ\DC2\EOT\188\SOH\STX\GS\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\ENQ\EOT\DC2\EOT\188\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\ENQ\ENQ\DC2\EOT\188\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\ENQ\SOH\DC2\EOT\188\SOH\DC2\CAN\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\ENQ\ETX\DC2\EOT\188\SOH\ESC\FS\n\
    \\f\n\
    \\EOT\EOT\CAN\STX\ACK\DC2\EOT\189\SOH\STX\ESC\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\ACK\EOT\DC2\EOT\189\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\ACK\ENQ\DC2\EOT\189\SOH\v\DLE\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\ACK\SOH\DC2\EOT\189\SOH\DC1\SYN\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\ACK\ETX\DC2\EOT\189\SOH\EM\SUB\n\
    \\f\n\
    \\STX\EOT\EM\DC2\ACK\191\SOH\NUL\196\SOH\SOH\n\
    \\v\n\
    \\ETX\EOT\EM\SOH\DC2\EOT\191\SOH\b%\n\
    \\f\n\
    \\EOT\EOT\EM\STX\NUL\DC2\EOT\192\SOH\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\NUL\EOT\DC2\EOT\192\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\NUL\ENQ\DC2\EOT\192\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\NUL\SOH\DC2\EOT\192\SOH\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\NUL\ETX\DC2\EOT\192\SOH\CAN\EM\n\
    \\f\n\
    \\EOT\EOT\EM\STX\SOH\DC2\EOT\193\SOH\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\SOH\EOT\DC2\EOT\193\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\SOH\ENQ\DC2\EOT\193\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\SOH\SOH\DC2\EOT\193\SOH\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\SOH\ETX\DC2\EOT\193\SOH\CAN\EM\n\
    \\f\n\
    \\EOT\EOT\EM\STX\STX\DC2\EOT\194\SOH\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\STX\EOT\DC2\EOT\194\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\STX\ENQ\DC2\EOT\194\SOH\v\DLE\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\STX\SOH\DC2\EOT\194\SOH\DC1\NAK\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\STX\ETX\DC2\EOT\194\SOH\CAN\EM\n\
    \\f\n\
    \\EOT\EOT\EM\STX\ETX\DC2\EOT\195\SOH\STX\EM\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\ETX\EOT\DC2\EOT\195\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\ETX\ENQ\DC2\EOT\195\SOH\v\DLE\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\ETX\SOH\DC2\EOT\195\SOH\DC1\DC4\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\ETX\ETX\DC2\EOT\195\SOH\ETB\CAN\n\
    \\f\n\
    \\STX\EOT\SUB\DC2\ACK\197\SOH\NUL\203\SOH\SOH\n\
    \\v\n\
    \\ETX\EOT\SUB\SOH\DC2\EOT\197\SOH\b\US\n\
    \\f\n\
    \\EOT\EOT\SUB\STX\NUL\DC2\EOT\198\SOH\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\NUL\EOT\DC2\EOT\198\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\NUL\ENQ\DC2\EOT\198\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\NUL\SOH\DC2\EOT\198\SOH\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\NUL\ETX\DC2\EOT\198\SOH\CAN\EM\n\
    \\f\n\
    \\EOT\EOT\SUB\STX\SOH\DC2\EOT\199\SOH\STX\US\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\SOH\EOT\DC2\EOT\199\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\SOH\ENQ\DC2\EOT\199\SOH\v\DLE\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\SOH\SOH\DC2\EOT\199\SOH\DC1\SUB\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\SOH\ETX\DC2\EOT\199\SOH\GS\RS\n\
    \\f\n\
    \\EOT\EOT\SUB\STX\STX\DC2\EOT\200\SOH\STX \n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\STX\EOT\DC2\EOT\200\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\STX\ENQ\DC2\EOT\200\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\STX\SOH\DC2\EOT\200\SOH\DC2\ESC\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\STX\ETX\DC2\EOT\200\SOH\RS\US\n\
    \\f\n\
    \\EOT\EOT\SUB\STX\ETX\DC2\EOT\201\SOH\STX \n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\ETX\EOT\DC2\EOT\201\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\ETX\ENQ\DC2\EOT\201\SOH\v\DLE\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\ETX\SOH\DC2\EOT\201\SOH\DC1\ESC\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\ETX\ETX\DC2\EOT\201\SOH\RS\US\n\
    \\f\n\
    \\EOT\EOT\SUB\STX\EOT\DC2\EOT\202\SOH\STX\GS\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\EOT\EOT\DC2\EOT\202\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\EOT\ENQ\DC2\EOT\202\SOH\v\DLE\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\EOT\SOH\DC2\EOT\202\SOH\DC1\CAN\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\EOT\ETX\DC2\EOT\202\SOH\ESC\FS\n\
    \\f\n\
    \\STX\EOT\ESC\DC2\ACK\204\SOH\NUL\208\SOH\SOH\n\
    \\v\n\
    \\ETX\EOT\ESC\SOH\DC2\EOT\204\SOH\b$\n\
    \\f\n\
    \\EOT\EOT\ESC\STX\NUL\DC2\EOT\205\SOH\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT\ESC\STX\NUL\EOT\DC2\EOT\205\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\ESC\STX\NUL\ENQ\DC2\EOT\205\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\ESC\STX\NUL\SOH\DC2\EOT\205\SOH\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT\ESC\STX\NUL\ETX\DC2\EOT\205\SOH\CAN\EM\n\
    \\f\n\
    \\EOT\EOT\ESC\STX\SOH\DC2\EOT\206\SOH\STX \n\
    \\r\n\
    \\ENQ\EOT\ESC\STX\SOH\EOT\DC2\EOT\206\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\ESC\STX\SOH\ENQ\DC2\EOT\206\SOH\v\DLE\n\
    \\r\n\
    \\ENQ\EOT\ESC\STX\SOH\SOH\DC2\EOT\206\SOH\DC1\ESC\n\
    \\r\n\
    \\ENQ\EOT\ESC\STX\SOH\ETX\DC2\EOT\206\SOH\RS\US\n\
    \\f\n\
    \\EOT\EOT\ESC\STX\STX\DC2\EOT\207\SOH\STX\US\n\
    \\r\n\
    \\ENQ\EOT\ESC\STX\STX\EOT\DC2\EOT\207\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\ESC\STX\STX\ENQ\DC2\EOT\207\SOH\v\DLE\n\
    \\r\n\
    \\ENQ\EOT\ESC\STX\STX\SOH\DC2\EOT\207\SOH\DC1\SUB\n\
    \\r\n\
    \\ENQ\EOT\ESC\STX\STX\ETX\DC2\EOT\207\SOH\GS\RS\n\
    \\f\n\
    \\STX\EOT\FS\DC2\ACK\209\SOH\NUL\213\SOH\SOH\n\
    \\v\n\
    \\ETX\EOT\FS\SOH\DC2\EOT\209\SOH\b(\n\
    \\f\n\
    \\EOT\EOT\FS\STX\NUL\DC2\EOT\210\SOH\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT\FS\STX\NUL\EOT\DC2\EOT\210\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\FS\STX\NUL\ENQ\DC2\EOT\210\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\FS\STX\NUL\SOH\DC2\EOT\210\SOH\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT\FS\STX\NUL\ETX\DC2\EOT\210\SOH\CAN\EM\n\
    \\f\n\
    \\EOT\EOT\FS\STX\SOH\DC2\EOT\211\SOH\STX \n\
    \\r\n\
    \\ENQ\EOT\FS\STX\SOH\EOT\DC2\EOT\211\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\FS\STX\SOH\ENQ\DC2\EOT\211\SOH\v\DLE\n\
    \\r\n\
    \\ENQ\EOT\FS\STX\SOH\SOH\DC2\EOT\211\SOH\DC1\ESC\n\
    \\r\n\
    \\ENQ\EOT\FS\STX\SOH\ETX\DC2\EOT\211\SOH\RS\US\n\
    \\f\n\
    \\EOT\EOT\FS\STX\STX\DC2\EOT\212\SOH\STX\US\n\
    \\r\n\
    \\ENQ\EOT\FS\STX\STX\EOT\DC2\EOT\212\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\FS\STX\STX\ENQ\DC2\EOT\212\SOH\v\DLE\n\
    \\r\n\
    \\ENQ\EOT\FS\STX\STX\SOH\DC2\EOT\212\SOH\DC1\SUB\n\
    \\r\n\
    \\ENQ\EOT\FS\STX\STX\ETX\DC2\EOT\212\SOH\GS\RS\n\
    \\f\n\
    \\STX\EOT\GS\DC2\ACK\214\SOH\NUL\218\SOH\SOH\n\
    \\v\n\
    \\ETX\EOT\GS\SOH\DC2\EOT\214\SOH\b'\n\
    \\f\n\
    \\EOT\EOT\GS\STX\NUL\DC2\EOT\215\SOH\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT\GS\STX\NUL\EOT\DC2\EOT\215\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\GS\STX\NUL\ENQ\DC2\EOT\215\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\GS\STX\NUL\SOH\DC2\EOT\215\SOH\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT\GS\STX\NUL\ETX\DC2\EOT\215\SOH\CAN\EM\n\
    \\f\n\
    \\EOT\EOT\GS\STX\SOH\DC2\EOT\216\SOH\STX\US\n\
    \\r\n\
    \\ENQ\EOT\GS\STX\SOH\EOT\DC2\EOT\216\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\GS\STX\SOH\ENQ\DC2\EOT\216\SOH\v\DLE\n\
    \\r\n\
    \\ENQ\EOT\GS\STX\SOH\SOH\DC2\EOT\216\SOH\DC1\SUB\n\
    \\r\n\
    \\ENQ\EOT\GS\STX\SOH\ETX\DC2\EOT\216\SOH\GS\RS\n\
    \\f\n\
    \\EOT\EOT\GS\STX\STX\DC2\EOT\217\SOH\STX\US\n\
    \\r\n\
    \\ENQ\EOT\GS\STX\STX\EOT\DC2\EOT\217\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\GS\STX\STX\ENQ\DC2\EOT\217\SOH\v\DLE\n\
    \\r\n\
    \\ENQ\EOT\GS\STX\STX\SOH\DC2\EOT\217\SOH\DC1\SUB\n\
    \\r\n\
    \\ENQ\EOT\GS\STX\STX\ETX\DC2\EOT\217\SOH\GS\RS\n\
    \\f\n\
    \\STX\EOT\RS\DC2\ACK\219\SOH\NUL\223\SOH\SOH\n\
    \\v\n\
    \\ETX\EOT\RS\SOH\DC2\EOT\219\SOH\b!\n\
    \\f\n\
    \\EOT\EOT\RS\STX\NUL\DC2\EOT\220\SOH\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT\RS\STX\NUL\EOT\DC2\EOT\220\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\RS\STX\NUL\ENQ\DC2\EOT\220\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\RS\STX\NUL\SOH\DC2\EOT\220\SOH\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT\RS\STX\NUL\ETX\DC2\EOT\220\SOH\CAN\EM\n\
    \\f\n\
    \\EOT\EOT\RS\STX\SOH\DC2\EOT\221\SOH\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT\RS\STX\SOH\EOT\DC2\EOT\221\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\RS\STX\SOH\ENQ\DC2\EOT\221\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\RS\STX\SOH\SOH\DC2\EOT\221\SOH\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT\RS\STX\SOH\ETX\DC2\EOT\221\SOH\CAN\EM\n\
    \\f\n\
    \\EOT\EOT\RS\STX\STX\DC2\EOT\222\SOH\STX\ESC\n\
    \\r\n\
    \\ENQ\EOT\RS\STX\STX\EOT\DC2\EOT\222\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\RS\STX\STX\ENQ\DC2\EOT\222\SOH\v\DLE\n\
    \\r\n\
    \\ENQ\EOT\RS\STX\STX\SOH\DC2\EOT\222\SOH\DC1\SYN\n\
    \\r\n\
    \\ENQ\EOT\RS\STX\STX\ETX\DC2\EOT\222\SOH\EM\SUB\n\
    \\f\n\
    \\STX\EOT\US\DC2\ACK\224\SOH\NUL\232\SOH\SOH\n\
    \\v\n\
    \\ETX\EOT\US\SOH\DC2\EOT\224\SOH\b3\n\
    \\f\n\
    \\EOT\EOT\US\STX\NUL\DC2\EOT\225\SOH\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT\US\STX\NUL\EOT\DC2\EOT\225\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\US\STX\NUL\ENQ\DC2\EOT\225\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\US\STX\NUL\SOH\DC2\EOT\225\SOH\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT\US\STX\NUL\ETX\DC2\EOT\225\SOH\CAN\EM\n\
    \\f\n\
    \\EOT\EOT\US\STX\SOH\DC2\EOT\226\SOH\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT\US\STX\SOH\EOT\DC2\EOT\226\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\US\STX\SOH\ENQ\DC2\EOT\226\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\US\STX\SOH\SOH\DC2\EOT\226\SOH\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT\US\STX\SOH\ETX\DC2\EOT\226\SOH\CAN\EM\n\
    \\f\n\
    \\EOT\EOT\US\STX\STX\DC2\EOT\227\SOH\STX\GS\n\
    \\r\n\
    \\ENQ\EOT\US\STX\STX\EOT\DC2\EOT\227\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\US\STX\STX\ENQ\DC2\EOT\227\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\US\STX\STX\SOH\DC2\EOT\227\SOH\DC2\CAN\n\
    \\r\n\
    \\ENQ\EOT\US\STX\STX\ETX\DC2\EOT\227\SOH\ESC\FS\n\
    \\f\n\
    \\EOT\EOT\US\STX\ETX\DC2\EOT\228\SOH\STX\FS\n\
    \\r\n\
    \\ENQ\EOT\US\STX\ETX\EOT\DC2\EOT\228\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\US\STX\ETX\ENQ\DC2\EOT\228\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\US\STX\ETX\SOH\DC2\EOT\228\SOH\DC2\ETB\n\
    \\r\n\
    \\ENQ\EOT\US\STX\ETX\ETX\DC2\EOT\228\SOH\SUB\ESC\n\
    \\f\n\
    \\EOT\EOT\US\STX\EOT\DC2\EOT\229\SOH\STX\GS\n\
    \\r\n\
    \\ENQ\EOT\US\STX\EOT\EOT\DC2\EOT\229\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\US\STX\EOT\ENQ\DC2\EOT\229\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\US\STX\EOT\SOH\DC2\EOT\229\SOH\DC2\CAN\n\
    \\r\n\
    \\ENQ\EOT\US\STX\EOT\ETX\DC2\EOT\229\SOH\ESC\FS\n\
    \\f\n\
    \\EOT\EOT\US\STX\ENQ\DC2\EOT\230\SOH\STX\FS\n\
    \\r\n\
    \\ENQ\EOT\US\STX\ENQ\EOT\DC2\EOT\230\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\US\STX\ENQ\ENQ\DC2\EOT\230\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\US\STX\ENQ\SOH\DC2\EOT\230\SOH\DC2\ETB\n\
    \\r\n\
    \\ENQ\EOT\US\STX\ENQ\ETX\DC2\EOT\230\SOH\SUB\ESC\n\
    \\f\n\
    \\EOT\EOT\US\STX\ACK\DC2\EOT\231\SOH\STX\GS\n\
    \\r\n\
    \\ENQ\EOT\US\STX\ACK\EOT\DC2\EOT\231\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\US\STX\ACK\ENQ\DC2\EOT\231\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\US\STX\ACK\SOH\DC2\EOT\231\SOH\DC2\CAN\n\
    \\r\n\
    \\ENQ\EOT\US\STX\ACK\ETX\DC2\EOT\231\SOH\ESC\FS\n\
    \\f\n\
    \\STX\EOT \DC2\ACK\233\SOH\NUL\244\SOH\SOH\n\
    \\v\n\
    \\ETX\EOT \SOH\DC2\EOT\233\SOH\b6\n\
    \\f\n\
    \\EOT\EOT \STX\NUL\DC2\EOT\234\SOH\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT \STX\NUL\EOT\DC2\EOT\234\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT \STX\NUL\ENQ\DC2\EOT\234\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT \STX\NUL\SOH\DC2\EOT\234\SOH\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT \STX\NUL\ETX\DC2\EOT\234\SOH\CAN\EM\n\
    \\f\n\
    \\EOT\EOT \STX\SOH\DC2\EOT\235\SOH\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT \STX\SOH\EOT\DC2\EOT\235\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT \STX\SOH\ENQ\DC2\EOT\235\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT \STX\SOH\SOH\DC2\EOT\235\SOH\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT \STX\SOH\ETX\DC2\EOT\235\SOH\CAN\EM\n\
    \\f\n\
    \\EOT\EOT \STX\STX\DC2\EOT\236\SOH\STX\GS\n\
    \\r\n\
    \\ENQ\EOT \STX\STX\EOT\DC2\EOT\236\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT \STX\STX\ENQ\DC2\EOT\236\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT \STX\STX\SOH\DC2\EOT\236\SOH\DC2\CAN\n\
    \\r\n\
    \\ENQ\EOT \STX\STX\ETX\DC2\EOT\236\SOH\ESC\FS\n\
    \\f\n\
    \\EOT\EOT \STX\ETX\DC2\EOT\237\SOH\STX\FS\n\
    \\r\n\
    \\ENQ\EOT \STX\ETX\EOT\DC2\EOT\237\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT \STX\ETX\ENQ\DC2\EOT\237\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT \STX\ETX\SOH\DC2\EOT\237\SOH\DC2\ETB\n\
    \\r\n\
    \\ENQ\EOT \STX\ETX\ETX\DC2\EOT\237\SOH\SUB\ESC\n\
    \\f\n\
    \\EOT\EOT \STX\EOT\DC2\EOT\238\SOH\STX\GS\n\
    \\r\n\
    \\ENQ\EOT \STX\EOT\EOT\DC2\EOT\238\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT \STX\EOT\ENQ\DC2\EOT\238\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT \STX\EOT\SOH\DC2\EOT\238\SOH\DC2\CAN\n\
    \\r\n\
    \\ENQ\EOT \STX\EOT\ETX\DC2\EOT\238\SOH\ESC\FS\n\
    \\f\n\
    \\EOT\EOT \STX\ENQ\DC2\EOT\239\SOH\STX\FS\n\
    \\r\n\
    \\ENQ\EOT \STX\ENQ\EOT\DC2\EOT\239\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT \STX\ENQ\ENQ\DC2\EOT\239\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT \STX\ENQ\SOH\DC2\EOT\239\SOH\DC2\ETB\n\
    \\r\n\
    \\ENQ\EOT \STX\ENQ\ETX\DC2\EOT\239\SOH\SUB\ESC\n\
    \\f\n\
    \\EOT\EOT \STX\ACK\DC2\EOT\240\SOH\STX\GS\n\
    \\r\n\
    \\ENQ\EOT \STX\ACK\EOT\DC2\EOT\240\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT \STX\ACK\ENQ\DC2\EOT\240\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT \STX\ACK\SOH\DC2\EOT\240\SOH\DC2\CAN\n\
    \\r\n\
    \\ENQ\EOT \STX\ACK\ETX\DC2\EOT\240\SOH\ESC\FS\n\
    \\f\n\
    \\EOT\EOT \STX\a\DC2\EOT\241\SOH\STX\GS\n\
    \\r\n\
    \\ENQ\EOT \STX\a\EOT\DC2\EOT\241\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT \STX\a\ENQ\DC2\EOT\241\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT \STX\a\SOH\DC2\EOT\241\SOH\DC2\CAN\n\
    \\r\n\
    \\ENQ\EOT \STX\a\ETX\DC2\EOT\241\SOH\ESC\FS\n\
    \\f\n\
    \\EOT\EOT \STX\b\DC2\EOT\242\SOH\STX\FS\n\
    \\r\n\
    \\ENQ\EOT \STX\b\EOT\DC2\EOT\242\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT \STX\b\ENQ\DC2\EOT\242\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT \STX\b\SOH\DC2\EOT\242\SOH\DC2\ETB\n\
    \\r\n\
    \\ENQ\EOT \STX\b\ETX\DC2\EOT\242\SOH\SUB\ESC\n\
    \\f\n\
    \\EOT\EOT \STX\t\DC2\EOT\243\SOH\STX\RS\n\
    \\r\n\
    \\ENQ\EOT \STX\t\EOT\DC2\EOT\243\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT \STX\t\ENQ\DC2\EOT\243\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT \STX\t\SOH\DC2\EOT\243\SOH\DC2\CAN\n\
    \\r\n\
    \\ENQ\EOT \STX\t\ETX\DC2\EOT\243\SOH\ESC\GS\n\
    \\f\n\
    \\STX\EOT!\DC2\ACK\245\SOH\NUL\254\SOH\SOH\n\
    \\v\n\
    \\ETX\EOT!\SOH\DC2\EOT\245\SOH\b0\n\
    \\f\n\
    \\EOT\EOT!\STX\NUL\DC2\EOT\246\SOH\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT!\STX\NUL\EOT\DC2\EOT\246\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT!\STX\NUL\ENQ\DC2\EOT\246\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT!\STX\NUL\SOH\DC2\EOT\246\SOH\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT!\STX\NUL\ETX\DC2\EOT\246\SOH\CAN\EM\n\
    \\f\n\
    \\EOT\EOT!\STX\SOH\DC2\EOT\247\SOH\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT!\STX\SOH\EOT\DC2\EOT\247\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT!\STX\SOH\ENQ\DC2\EOT\247\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT!\STX\SOH\SOH\DC2\EOT\247\SOH\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT!\STX\SOH\ETX\DC2\EOT\247\SOH\CAN\EM\n\
    \\f\n\
    \\EOT\EOT!\STX\STX\DC2\EOT\248\SOH\STX\ESC\n\
    \\r\n\
    \\ENQ\EOT!\STX\STX\EOT\DC2\EOT\248\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT!\STX\STX\ENQ\DC2\EOT\248\SOH\v\DLE\n\
    \\r\n\
    \\ENQ\EOT!\STX\STX\SOH\DC2\EOT\248\SOH\DC1\SYN\n\
    \\r\n\
    \\ENQ\EOT!\STX\STX\ETX\DC2\EOT\248\SOH\EM\SUB\n\
    \\f\n\
    \\EOT\EOT!\STX\ETX\DC2\EOT\249\SOH\STX\ESC\n\
    \\r\n\
    \\ENQ\EOT!\STX\ETX\EOT\DC2\EOT\249\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT!\STX\ETX\ENQ\DC2\EOT\249\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT!\STX\ETX\SOH\DC2\EOT\249\SOH\DC2\SYN\n\
    \\r\n\
    \\ENQ\EOT!\STX\ETX\ETX\DC2\EOT\249\SOH\EM\SUB\n\
    \\f\n\
    \\EOT\EOT!\STX\EOT\DC2\EOT\250\SOH\STX\ESC\n\
    \\r\n\
    \\ENQ\EOT!\STX\EOT\EOT\DC2\EOT\250\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT!\STX\EOT\ENQ\DC2\EOT\250\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT!\STX\EOT\SOH\DC2\EOT\250\SOH\DC2\SYN\n\
    \\r\n\
    \\ENQ\EOT!\STX\EOT\ETX\DC2\EOT\250\SOH\EM\SUB\n\
    \\f\n\
    \\EOT\EOT!\STX\ENQ\DC2\EOT\251\SOH\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT!\STX\ENQ\EOT\DC2\EOT\251\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT!\STX\ENQ\ENQ\DC2\EOT\251\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT!\STX\ENQ\SOH\DC2\EOT\251\SOH\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT!\STX\ENQ\ETX\DC2\EOT\251\SOH\CAN\EM\n\
    \\f\n\
    \\EOT\EOT!\STX\ACK\DC2\EOT\252\SOH\STX \n\
    \\r\n\
    \\ENQ\EOT!\STX\ACK\EOT\DC2\EOT\252\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT!\STX\ACK\ENQ\DC2\EOT\252\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT!\STX\ACK\SOH\DC2\EOT\252\SOH\DC2\ESC\n\
    \\r\n\
    \\ENQ\EOT!\STX\ACK\ETX\DC2\EOT\252\SOH\RS\US\n\
    \\f\n\
    \\EOT\EOT!\STX\a\DC2\EOT\253\SOH\STX\GS\n\
    \\r\n\
    \\ENQ\EOT!\STX\a\EOT\DC2\EOT\253\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT!\STX\a\ENQ\DC2\EOT\253\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT!\STX\a\SOH\DC2\EOT\253\SOH\DC2\CAN\n\
    \\r\n\
    \\ENQ\EOT!\STX\a\ETX\DC2\EOT\253\SOH\ESC\FS\n\
    \\f\n\
    \\STX\EOT\"\DC2\ACK\255\SOH\NUL\132\STX\SOH\n\
    \\v\n\
    \\ETX\EOT\"\SOH\DC2\EOT\255\SOH\b!\n\
    \\f\n\
    \\EOT\EOT\"\STX\NUL\DC2\EOT\128\STX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT\"\STX\NUL\EOT\DC2\EOT\128\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\"\STX\NUL\ENQ\DC2\EOT\128\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\"\STX\NUL\SOH\DC2\EOT\128\STX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT\"\STX\NUL\ETX\DC2\EOT\128\STX\CAN\EM\n\
    \\f\n\
    \\EOT\EOT\"\STX\SOH\DC2\EOT\129\STX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT\"\STX\SOH\EOT\DC2\EOT\129\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\"\STX\SOH\ENQ\DC2\EOT\129\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\"\STX\SOH\SOH\DC2\EOT\129\STX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT\"\STX\SOH\ETX\DC2\EOT\129\STX\CAN\EM\n\
    \\f\n\
    \\EOT\EOT\"\STX\STX\DC2\EOT\130\STX\STX\ESC\n\
    \\r\n\
    \\ENQ\EOT\"\STX\STX\EOT\DC2\EOT\130\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\"\STX\STX\ENQ\DC2\EOT\130\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\"\STX\STX\SOH\DC2\EOT\130\STX\DC2\SYN\n\
    \\r\n\
    \\ENQ\EOT\"\STX\STX\ETX\DC2\EOT\130\STX\EM\SUB\n\
    \\f\n\
    \\EOT\EOT\"\STX\ETX\DC2\EOT\131\STX\STX\EM\n\
    \\r\n\
    \\ENQ\EOT\"\STX\ETX\EOT\DC2\EOT\131\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\"\STX\ETX\ENQ\DC2\EOT\131\STX\v\DLE\n\
    \\r\n\
    \\ENQ\EOT\"\STX\ETX\SOH\DC2\EOT\131\STX\DC1\DC4\n\
    \\r\n\
    \\ENQ\EOT\"\STX\ETX\ETX\DC2\EOT\131\STX\ETB\CAN\n\
    \\f\n\
    \\STX\EOT#\DC2\ACK\133\STX\NUL\138\STX\SOH\n\
    \\v\n\
    \\ETX\EOT#\SOH\DC2\EOT\133\STX\b$\n\
    \\f\n\
    \\EOT\EOT#\STX\NUL\DC2\EOT\134\STX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT#\STX\NUL\EOT\DC2\EOT\134\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT#\STX\NUL\ENQ\DC2\EOT\134\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT#\STX\NUL\SOH\DC2\EOT\134\STX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT#\STX\NUL\ETX\DC2\EOT\134\STX\CAN\EM\n\
    \\f\n\
    \\EOT\EOT#\STX\SOH\DC2\EOT\135\STX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT#\STX\SOH\EOT\DC2\EOT\135\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT#\STX\SOH\ENQ\DC2\EOT\135\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT#\STX\SOH\SOH\DC2\EOT\135\STX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT#\STX\SOH\ETX\DC2\EOT\135\STX\CAN\EM\n\
    \\f\n\
    \\EOT\EOT#\STX\STX\DC2\EOT\136\STX\STX\ESC\n\
    \\r\n\
    \\ENQ\EOT#\STX\STX\EOT\DC2\EOT\136\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT#\STX\STX\ENQ\DC2\EOT\136\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT#\STX\STX\SOH\DC2\EOT\136\STX\DC2\SYN\n\
    \\r\n\
    \\ENQ\EOT#\STX\STX\ETX\DC2\EOT\136\STX\EM\SUB\n\
    \\f\n\
    \\EOT\EOT#\STX\ETX\DC2\EOT\137\STX\STX\ESC\n\
    \\r\n\
    \\ENQ\EOT#\STX\ETX\EOT\DC2\EOT\137\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT#\STX\ETX\ENQ\DC2\EOT\137\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT#\STX\ETX\SOH\DC2\EOT\137\STX\DC2\SYN\n\
    \\r\n\
    \\ENQ\EOT#\STX\ETX\ETX\DC2\EOT\137\STX\EM\SUB\n\
    \\f\n\
    \\STX\EOT$\DC2\ACK\139\STX\NUL\145\STX\SOH\n\
    \\v\n\
    \\ETX\EOT$\SOH\DC2\EOT\139\STX\b(\n\
    \\f\n\
    \\EOT\EOT$\STX\NUL\DC2\EOT\140\STX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT$\STX\NUL\EOT\DC2\EOT\140\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT$\STX\NUL\ENQ\DC2\EOT\140\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT$\STX\NUL\SOH\DC2\EOT\140\STX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT$\STX\NUL\ETX\DC2\EOT\140\STX\CAN\EM\n\
    \\f\n\
    \\EOT\EOT$\STX\SOH\DC2\EOT\141\STX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT$\STX\SOH\EOT\DC2\EOT\141\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT$\STX\SOH\ENQ\DC2\EOT\141\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT$\STX\SOH\SOH\DC2\EOT\141\STX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT$\STX\SOH\ETX\DC2\EOT\141\STX\CAN\EM\n\
    \\f\n\
    \\EOT\EOT$\STX\STX\DC2\EOT\142\STX\STX\ESC\n\
    \\r\n\
    \\ENQ\EOT$\STX\STX\EOT\DC2\EOT\142\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT$\STX\STX\ENQ\DC2\EOT\142\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT$\STX\STX\SOH\DC2\EOT\142\STX\DC2\SYN\n\
    \\r\n\
    \\ENQ\EOT$\STX\STX\ETX\DC2\EOT\142\STX\EM\SUB\n\
    \\f\n\
    \\EOT\EOT$\STX\ETX\DC2\EOT\143\STX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT$\STX\ETX\EOT\DC2\EOT\143\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT$\STX\ETX\ENQ\DC2\EOT\143\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT$\STX\ETX\SOH\DC2\EOT\143\STX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT$\STX\ETX\ETX\DC2\EOT\143\STX\CAN\EM\n\
    \\f\n\
    \\EOT\EOT$\STX\EOT\DC2\EOT\144\STX\STX\FS\n\
    \\r\n\
    \\ENQ\EOT$\STX\EOT\EOT\DC2\EOT\144\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT$\STX\EOT\ENQ\DC2\EOT\144\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT$\STX\EOT\SOH\DC2\EOT\144\STX\DC2\ETB\n\
    \\r\n\
    \\ENQ\EOT$\STX\EOT\ETX\DC2\EOT\144\STX\SUB\ESC\n\
    \\f\n\
    \\STX\EOT%\DC2\ACK\146\STX\NUL\155\STX\SOH\n\
    \\v\n\
    \\ETX\EOT%\SOH\DC2\EOT\146\STX\b'\n\
    \\f\n\
    \\EOT\EOT%\STX\NUL\DC2\EOT\147\STX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT%\STX\NUL\EOT\DC2\EOT\147\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT%\STX\NUL\ENQ\DC2\EOT\147\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT%\STX\NUL\SOH\DC2\EOT\147\STX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT%\STX\NUL\ETX\DC2\EOT\147\STX\CAN\EM\n\
    \\f\n\
    \\EOT\EOT%\STX\SOH\DC2\EOT\148\STX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT%\STX\SOH\EOT\DC2\EOT\148\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT%\STX\SOH\ENQ\DC2\EOT\148\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT%\STX\SOH\SOH\DC2\EOT\148\STX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT%\STX\SOH\ETX\DC2\EOT\148\STX\CAN\EM\n\
    \\f\n\
    \\EOT\EOT%\STX\STX\DC2\EOT\149\STX\STX\FS\n\
    \\r\n\
    \\ENQ\EOT%\STX\STX\EOT\DC2\EOT\149\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT%\STX\STX\ENQ\DC2\EOT\149\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT%\STX\STX\SOH\DC2\EOT\149\STX\DC2\ETB\n\
    \\r\n\
    \\ENQ\EOT%\STX\STX\ETX\DC2\EOT\149\STX\SUB\ESC\n\
    \\f\n\
    \\EOT\EOT%\STX\ETX\DC2\EOT\150\STX\STX\ESC\n\
    \\r\n\
    \\ENQ\EOT%\STX\ETX\EOT\DC2\EOT\150\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT%\STX\ETX\ENQ\DC2\EOT\150\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT%\STX\ETX\SOH\DC2\EOT\150\STX\DC2\SYN\n\
    \\r\n\
    \\ENQ\EOT%\STX\ETX\ETX\DC2\EOT\150\STX\EM\SUB\n\
    \\f\n\
    \\EOT\EOT%\STX\EOT\DC2\EOT\151\STX\STX\ESC\n\
    \\r\n\
    \\ENQ\EOT%\STX\EOT\EOT\DC2\EOT\151\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT%\STX\EOT\ENQ\DC2\EOT\151\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT%\STX\EOT\SOH\DC2\EOT\151\STX\DC2\SYN\n\
    \\r\n\
    \\ENQ\EOT%\STX\EOT\ETX\DC2\EOT\151\STX\EM\SUB\n\
    \\f\n\
    \\EOT\EOT%\STX\ENQ\DC2\EOT\152\STX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT%\STX\ENQ\EOT\DC2\EOT\152\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT%\STX\ENQ\ENQ\DC2\EOT\152\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT%\STX\ENQ\SOH\DC2\EOT\152\STX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT%\STX\ENQ\ETX\DC2\EOT\152\STX\CAN\EM\n\
    \\f\n\
    \\EOT\EOT%\STX\ACK\DC2\EOT\153\STX\STX\GS\n\
    \\r\n\
    \\ENQ\EOT%\STX\ACK\EOT\DC2\EOT\153\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT%\STX\ACK\ENQ\DC2\EOT\153\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT%\STX\ACK\SOH\DC2\EOT\153\STX\DC2\CAN\n\
    \\r\n\
    \\ENQ\EOT%\STX\ACK\ETX\DC2\EOT\153\STX\ESC\FS\n\
    \\f\n\
    \\EOT\EOT%\STX\a\DC2\EOT\154\STX\STX\EM\n\
    \\r\n\
    \\ENQ\EOT%\STX\a\EOT\DC2\EOT\154\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT%\STX\a\ENQ\DC2\EOT\154\STX\v\DLE\n\
    \\r\n\
    \\ENQ\EOT%\STX\a\SOH\DC2\EOT\154\STX\DC1\DC4\n\
    \\r\n\
    \\ENQ\EOT%\STX\a\ETX\DC2\EOT\154\STX\ETB\CAN\n\
    \\f\n\
    \\STX\EOT&\DC2\ACK\156\STX\NUL\162\STX\SOH\n\
    \\v\n\
    \\ETX\EOT&\SOH\DC2\EOT\156\STX\b$\n\
    \\f\n\
    \\EOT\EOT&\STX\NUL\DC2\EOT\157\STX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT&\STX\NUL\EOT\DC2\EOT\157\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT&\STX\NUL\ENQ\DC2\EOT\157\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT&\STX\NUL\SOH\DC2\EOT\157\STX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT&\STX\NUL\ETX\DC2\EOT\157\STX\CAN\EM\n\
    \\f\n\
    \\EOT\EOT&\STX\SOH\DC2\EOT\158\STX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT&\STX\SOH\EOT\DC2\EOT\158\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT&\STX\SOH\ENQ\DC2\EOT\158\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT&\STX\SOH\SOH\DC2\EOT\158\STX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT&\STX\SOH\ETX\DC2\EOT\158\STX\CAN\EM\n\
    \\f\n\
    \\EOT\EOT&\STX\STX\DC2\EOT\159\STX\STX\ESC\n\
    \\r\n\
    \\ENQ\EOT&\STX\STX\EOT\DC2\EOT\159\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT&\STX\STX\ENQ\DC2\EOT\159\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT&\STX\STX\SOH\DC2\EOT\159\STX\DC2\SYN\n\
    \\r\n\
    \\ENQ\EOT&\STX\STX\ETX\DC2\EOT\159\STX\EM\SUB\n\
    \\f\n\
    \\EOT\EOT&\STX\ETX\DC2\EOT\160\STX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT&\STX\ETX\EOT\DC2\EOT\160\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT&\STX\ETX\ENQ\DC2\EOT\160\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT&\STX\ETX\SOH\DC2\EOT\160\STX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT&\STX\ETX\ETX\DC2\EOT\160\STX\CAN\EM\n\
    \\f\n\
    \\EOT\EOT&\STX\EOT\DC2\EOT\161\STX\STX\FS\n\
    \\r\n\
    \\ENQ\EOT&\STX\EOT\EOT\DC2\EOT\161\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT&\STX\EOT\ENQ\DC2\EOT\161\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT&\STX\EOT\SOH\DC2\EOT\161\STX\DC2\ETB\n\
    \\r\n\
    \\ENQ\EOT&\STX\EOT\ETX\DC2\EOT\161\STX\SUB\ESC\n\
    \\f\n\
    \\STX\EOT'\DC2\ACK\163\STX\NUL\169\STX\SOH\n\
    \\v\n\
    \\ETX\EOT'\SOH\DC2\EOT\163\STX\b%\n\
    \\f\n\
    \\EOT\EOT'\STX\NUL\DC2\EOT\164\STX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT'\STX\NUL\EOT\DC2\EOT\164\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT'\STX\NUL\ENQ\DC2\EOT\164\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT'\STX\NUL\SOH\DC2\EOT\164\STX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT'\STX\NUL\ETX\DC2\EOT\164\STX\CAN\EM\n\
    \\f\n\
    \\EOT\EOT'\STX\SOH\DC2\EOT\165\STX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT'\STX\SOH\EOT\DC2\EOT\165\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT'\STX\SOH\ENQ\DC2\EOT\165\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT'\STX\SOH\SOH\DC2\EOT\165\STX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT'\STX\SOH\ETX\DC2\EOT\165\STX\CAN\EM\n\
    \\f\n\
    \\EOT\EOT'\STX\STX\DC2\EOT\166\STX\STX\FS\n\
    \\r\n\
    \\ENQ\EOT'\STX\STX\EOT\DC2\EOT\166\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT'\STX\STX\ENQ\DC2\EOT\166\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT'\STX\STX\SOH\DC2\EOT\166\STX\DC2\ETB\n\
    \\r\n\
    \\ENQ\EOT'\STX\STX\ETX\DC2\EOT\166\STX\SUB\ESC\n\
    \\f\n\
    \\EOT\EOT'\STX\ETX\DC2\EOT\167\STX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT'\STX\ETX\EOT\DC2\EOT\167\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT'\STX\ETX\ENQ\DC2\EOT\167\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT'\STX\ETX\SOH\DC2\EOT\167\STX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT'\STX\ETX\ETX\DC2\EOT\167\STX\CAN\EM\n\
    \\f\n\
    \\EOT\EOT'\STX\EOT\DC2\EOT\168\STX\STX\ESC\n\
    \\r\n\
    \\ENQ\EOT'\STX\EOT\EOT\DC2\EOT\168\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT'\STX\EOT\ENQ\DC2\EOT\168\STX\v\DLE\n\
    \\r\n\
    \\ENQ\EOT'\STX\EOT\SOH\DC2\EOT\168\STX\DC1\SYN\n\
    \\r\n\
    \\ENQ\EOT'\STX\EOT\ETX\DC2\EOT\168\STX\EM\SUB\n\
    \\f\n\
    \\STX\EOT(\DC2\ACK\170\STX\NUL\181\STX\SOH\n\
    \\v\n\
    \\ETX\EOT(\SOH\DC2\EOT\170\STX\b)\n\
    \\f\n\
    \\EOT\EOT(\STX\NUL\DC2\EOT\171\STX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT(\STX\NUL\EOT\DC2\EOT\171\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT(\STX\NUL\ENQ\DC2\EOT\171\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT(\STX\NUL\SOH\DC2\EOT\171\STX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT(\STX\NUL\ETX\DC2\EOT\171\STX\CAN\EM\n\
    \\f\n\
    \\EOT\EOT(\STX\SOH\DC2\EOT\172\STX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT(\STX\SOH\EOT\DC2\EOT\172\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT(\STX\SOH\ENQ\DC2\EOT\172\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT(\STX\SOH\SOH\DC2\EOT\172\STX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT(\STX\SOH\ETX\DC2\EOT\172\STX\CAN\EM\n\
    \\f\n\
    \\EOT\EOT(\STX\STX\DC2\EOT\173\STX\STX\FS\n\
    \\r\n\
    \\ENQ\EOT(\STX\STX\EOT\DC2\EOT\173\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT(\STX\STX\ENQ\DC2\EOT\173\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT(\STX\STX\SOH\DC2\EOT\173\STX\DC2\ETB\n\
    \\r\n\
    \\ENQ\EOT(\STX\STX\ETX\DC2\EOT\173\STX\SUB\ESC\n\
    \\f\n\
    \\EOT\EOT(\STX\ETX\DC2\EOT\174\STX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT(\STX\ETX\EOT\DC2\EOT\174\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT(\STX\ETX\ENQ\DC2\EOT\174\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT(\STX\ETX\SOH\DC2\EOT\174\STX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT(\STX\ETX\ETX\DC2\EOT\174\STX\CAN\EM\n\
    \\f\n\
    \\EOT\EOT(\STX\EOT\DC2\EOT\175\STX\STX\ESC\n\
    \\r\n\
    \\ENQ\EOT(\STX\EOT\EOT\DC2\EOT\175\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT(\STX\EOT\ENQ\DC2\EOT\175\STX\v\DLE\n\
    \\r\n\
    \\ENQ\EOT(\STX\EOT\SOH\DC2\EOT\175\STX\DC1\SYN\n\
    \\r\n\
    \\ENQ\EOT(\STX\EOT\ETX\DC2\EOT\175\STX\EM\SUB\n\
    \\f\n\
    \\EOT\EOT(\STX\ENQ\DC2\EOT\176\STX\STX\GS\n\
    \\r\n\
    \\ENQ\EOT(\STX\ENQ\EOT\DC2\EOT\176\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT(\STX\ENQ\ENQ\DC2\EOT\176\STX\v\DLE\n\
    \\r\n\
    \\ENQ\EOT(\STX\ENQ\SOH\DC2\EOT\176\STX\DC1\CAN\n\
    \\r\n\
    \\ENQ\EOT(\STX\ENQ\ETX\DC2\EOT\176\STX\ESC\FS\n\
    \\f\n\
    \\EOT\EOT(\STX\ACK\DC2\EOT\177\STX\STX!\n\
    \\r\n\
    \\ENQ\EOT(\STX\ACK\EOT\DC2\EOT\177\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT(\STX\ACK\ENQ\DC2\EOT\177\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT(\STX\ACK\SOH\DC2\EOT\177\STX\DC2\FS\n\
    \\r\n\
    \\ENQ\EOT(\STX\ACK\ETX\DC2\EOT\177\STX\US \n\
    \\f\n\
    \\EOT\EOT(\STX\a\DC2\EOT\178\STX\STX\RS\n\
    \\r\n\
    \\ENQ\EOT(\STX\a\EOT\DC2\EOT\178\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT(\STX\a\ENQ\DC2\EOT\178\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT(\STX\a\SOH\DC2\EOT\178\STX\DC2\EM\n\
    \\r\n\
    \\ENQ\EOT(\STX\a\ETX\DC2\EOT\178\STX\FS\GS\n\
    \\f\n\
    \\EOT\EOT(\STX\b\DC2\EOT\179\STX\STX\RS\n\
    \\r\n\
    \\ENQ\EOT(\STX\b\EOT\DC2\EOT\179\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT(\STX\b\ENQ\DC2\EOT\179\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT(\STX\b\SOH\DC2\EOT\179\STX\DC2\EM\n\
    \\r\n\
    \\ENQ\EOT(\STX\b\ETX\DC2\EOT\179\STX\FS\GS\n\
    \\f\n\
    \\EOT\EOT(\STX\t\DC2\EOT\180\STX\STX\US\n\
    \\r\n\
    \\ENQ\EOT(\STX\t\EOT\DC2\EOT\180\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT(\STX\t\ENQ\DC2\EOT\180\STX\v\DLE\n\
    \\r\n\
    \\ENQ\EOT(\STX\t\SOH\DC2\EOT\180\STX\DC1\EM\n\
    \\r\n\
    \\ENQ\EOT(\STX\t\ETX\DC2\EOT\180\STX\FS\RS\n\
    \\f\n\
    \\STX\EOT)\DC2\ACK\182\STX\NUL\186\STX\SOH\n\
    \\v\n\
    \\ETX\EOT)\SOH\DC2\EOT\182\STX\b\US\n\
    \\f\n\
    \\EOT\EOT)\STX\NUL\DC2\EOT\183\STX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT)\STX\NUL\EOT\DC2\EOT\183\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT)\STX\NUL\ENQ\DC2\EOT\183\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT)\STX\NUL\SOH\DC2\EOT\183\STX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT)\STX\NUL\ETX\DC2\EOT\183\STX\CAN\EM\n\
    \\f\n\
    \\EOT\EOT)\STX\SOH\DC2\EOT\184\STX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT)\STX\SOH\EOT\DC2\EOT\184\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT)\STX\SOH\ENQ\DC2\EOT\184\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT)\STX\SOH\SOH\DC2\EOT\184\STX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT)\STX\SOH\ETX\DC2\EOT\184\STX\CAN\EM\n\
    \\f\n\
    \\EOT\EOT)\STX\STX\DC2\EOT\185\STX\STX\ESC\n\
    \\r\n\
    \\ENQ\EOT)\STX\STX\EOT\DC2\EOT\185\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT)\STX\STX\ENQ\DC2\EOT\185\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT)\STX\STX\SOH\DC2\EOT\185\STX\DC2\SYN\n\
    \\r\n\
    \\ENQ\EOT)\STX\STX\ETX\DC2\EOT\185\STX\EM\SUB\n\
    \\f\n\
    \\STX\EOT*\DC2\ACK\187\STX\NUL\198\STX\SOH\n\
    \\v\n\
    \\ETX\EOT*\SOH\DC2\EOT\187\STX\b \n\
    \\f\n\
    \\EOT\EOT*\STX\NUL\DC2\EOT\188\STX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT*\STX\NUL\EOT\DC2\EOT\188\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT*\STX\NUL\ENQ\DC2\EOT\188\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT*\STX\NUL\SOH\DC2\EOT\188\STX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT*\STX\NUL\ETX\DC2\EOT\188\STX\CAN\EM\n\
    \\f\n\
    \\EOT\EOT*\STX\SOH\DC2\EOT\189\STX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT*\STX\SOH\EOT\DC2\EOT\189\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT*\STX\SOH\ENQ\DC2\EOT\189\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT*\STX\SOH\SOH\DC2\EOT\189\STX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT*\STX\SOH\ETX\DC2\EOT\189\STX\CAN\EM\n\
    \\f\n\
    \\EOT\EOT*\STX\STX\DC2\EOT\190\STX\STX\GS\n\
    \\r\n\
    \\ENQ\EOT*\STX\STX\EOT\DC2\EOT\190\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT*\STX\STX\ENQ\DC2\EOT\190\STX\v\DLE\n\
    \\r\n\
    \\ENQ\EOT*\STX\STX\SOH\DC2\EOT\190\STX\DC1\CAN\n\
    \\r\n\
    \\ENQ\EOT*\STX\STX\ETX\DC2\EOT\190\STX\ESC\FS\n\
    \\f\n\
    \\EOT\EOT*\STX\ETX\DC2\EOT\191\STX\STX\FS\n\
    \\r\n\
    \\ENQ\EOT*\STX\ETX\EOT\DC2\EOT\191\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT*\STX\ETX\ENQ\DC2\EOT\191\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT*\STX\ETX\SOH\DC2\EOT\191\STX\DC2\ETB\n\
    \\r\n\
    \\ENQ\EOT*\STX\ETX\ETX\DC2\EOT\191\STX\SUB\ESC\n\
    \\f\n\
    \\EOT\EOT*\STX\EOT\DC2\EOT\192\STX\STX\RS\n\
    \\r\n\
    \\ENQ\EOT*\STX\EOT\EOT\DC2\EOT\192\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT*\STX\EOT\ENQ\DC2\EOT\192\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT*\STX\EOT\SOH\DC2\EOT\192\STX\DC2\EM\n\
    \\r\n\
    \\ENQ\EOT*\STX\EOT\ETX\DC2\EOT\192\STX\FS\GS\n\
    \\f\n\
    \\EOT\EOT*\STX\ENQ\DC2\EOT\193\STX\STX\RS\n\
    \\r\n\
    \\ENQ\EOT*\STX\ENQ\EOT\DC2\EOT\193\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT*\STX\ENQ\ENQ\DC2\EOT\193\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT*\STX\ENQ\SOH\DC2\EOT\193\STX\DC2\EM\n\
    \\r\n\
    \\ENQ\EOT*\STX\ENQ\ETX\DC2\EOT\193\STX\FS\GS\n\
    \\f\n\
    \\EOT\EOT*\STX\ACK\DC2\EOT\194\STX\STX\FS\n\
    \\r\n\
    \\ENQ\EOT*\STX\ACK\EOT\DC2\EOT\194\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT*\STX\ACK\ENQ\DC2\EOT\194\STX\v\DLE\n\
    \\r\n\
    \\ENQ\EOT*\STX\ACK\SOH\DC2\EOT\194\STX\DC1\ETB\n\
    \\r\n\
    \\ENQ\EOT*\STX\ACK\ETX\DC2\EOT\194\STX\SUB\ESC\n\
    \\f\n\
    \\EOT\EOT*\STX\a\DC2\EOT\195\STX\STX\RS\n\
    \\r\n\
    \\ENQ\EOT*\STX\a\EOT\DC2\EOT\195\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT*\STX\a\ENQ\DC2\EOT\195\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT*\STX\a\SOH\DC2\EOT\195\STX\DC2\EM\n\
    \\r\n\
    \\ENQ\EOT*\STX\a\ETX\DC2\EOT\195\STX\FS\GS\n\
    \\f\n\
    \\EOT\EOT*\STX\b\DC2\EOT\196\STX\STX\RS\n\
    \\r\n\
    \\ENQ\EOT*\STX\b\EOT\DC2\EOT\196\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT*\STX\b\ENQ\DC2\EOT\196\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT*\STX\b\SOH\DC2\EOT\196\STX\DC2\EM\n\
    \\r\n\
    \\ENQ\EOT*\STX\b\ETX\DC2\EOT\196\STX\FS\GS\n\
    \\f\n\
    \\EOT\EOT*\STX\t\DC2\EOT\197\STX\STX\US\n\
    \\r\n\
    \\ENQ\EOT*\STX\t\EOT\DC2\EOT\197\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT*\STX\t\ENQ\DC2\EOT\197\STX\v\DLE\n\
    \\r\n\
    \\ENQ\EOT*\STX\t\SOH\DC2\EOT\197\STX\DC1\EM\n\
    \\r\n\
    \\ENQ\EOT*\STX\t\ETX\DC2\EOT\197\STX\FS\RS\n\
    \\f\n\
    \\STX\EOT+\DC2\ACK\199\STX\NUL\205\STX\SOH\n\
    \\v\n\
    \\ETX\EOT+\SOH\DC2\EOT\199\STX\b$\n\
    \\f\n\
    \\EOT\EOT+\STX\NUL\DC2\EOT\200\STX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT+\STX\NUL\EOT\DC2\EOT\200\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT+\STX\NUL\ENQ\DC2\EOT\200\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT+\STX\NUL\SOH\DC2\EOT\200\STX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT+\STX\NUL\ETX\DC2\EOT\200\STX\CAN\EM\n\
    \\f\n\
    \\EOT\EOT+\STX\SOH\DC2\EOT\201\STX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT+\STX\SOH\EOT\DC2\EOT\201\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT+\STX\SOH\ENQ\DC2\EOT\201\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT+\STX\SOH\SOH\DC2\EOT\201\STX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT+\STX\SOH\ETX\DC2\EOT\201\STX\CAN\EM\n\
    \\f\n\
    \\EOT\EOT+\STX\STX\DC2\EOT\202\STX\STX\ESC\n\
    \\r\n\
    \\ENQ\EOT+\STX\STX\EOT\DC2\EOT\202\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT+\STX\STX\ENQ\DC2\EOT\202\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT+\STX\STX\SOH\DC2\EOT\202\STX\DC2\SYN\n\
    \\r\n\
    \\ENQ\EOT+\STX\STX\ETX\DC2\EOT\202\STX\EM\SUB\n\
    \\f\n\
    \\EOT\EOT+\STX\ETX\DC2\EOT\203\STX\STX\ESC\n\
    \\r\n\
    \\ENQ\EOT+\STX\ETX\EOT\DC2\EOT\203\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT+\STX\ETX\ENQ\DC2\EOT\203\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT+\STX\ETX\SOH\DC2\EOT\203\STX\DC2\SYN\n\
    \\r\n\
    \\ENQ\EOT+\STX\ETX\ETX\DC2\EOT\203\STX\EM\SUB\n\
    \\f\n\
    \\EOT\EOT+\STX\EOT\DC2\EOT\204\STX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT+\STX\EOT\EOT\DC2\EOT\204\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT+\STX\EOT\ENQ\DC2\EOT\204\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT+\STX\EOT\SOH\DC2\EOT\204\STX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT+\STX\EOT\ETX\DC2\EOT\204\STX\CAN\EM\n\
    \\f\n\
    \\STX\EOT,\DC2\ACK\206\STX\NUL\213\STX\SOH\n\
    \\v\n\
    \\ETX\EOT,\SOH\DC2\EOT\206\STX\b%\n\
    \\f\n\
    \\EOT\EOT,\STX\NUL\DC2\EOT\207\STX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT,\STX\NUL\EOT\DC2\EOT\207\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT,\STX\NUL\ENQ\DC2\EOT\207\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT,\STX\NUL\SOH\DC2\EOT\207\STX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT,\STX\NUL\ETX\DC2\EOT\207\STX\CAN\EM\n\
    \\f\n\
    \\EOT\EOT,\STX\SOH\DC2\EOT\208\STX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT,\STX\SOH\EOT\DC2\EOT\208\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT,\STX\SOH\ENQ\DC2\EOT\208\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT,\STX\SOH\SOH\DC2\EOT\208\STX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT,\STX\SOH\ETX\DC2\EOT\208\STX\CAN\EM\n\
    \\f\n\
    \\EOT\EOT,\STX\STX\DC2\EOT\209\STX\STX\FS\n\
    \\r\n\
    \\ENQ\EOT,\STX\STX\EOT\DC2\EOT\209\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT,\STX\STX\ENQ\DC2\EOT\209\STX\v\DLE\n\
    \\r\n\
    \\ENQ\EOT,\STX\STX\SOH\DC2\EOT\209\STX\DC1\ETB\n\
    \\r\n\
    \\ENQ\EOT,\STX\STX\ETX\DC2\EOT\209\STX\SUB\ESC\n\
    \\f\n\
    \\EOT\EOT,\STX\ETX\DC2\EOT\210\STX\STX\EM\n\
    \\r\n\
    \\ENQ\EOT,\STX\ETX\EOT\DC2\EOT\210\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT,\STX\ETX\ENQ\DC2\EOT\210\STX\v\DLE\n\
    \\r\n\
    \\ENQ\EOT,\STX\ETX\SOH\DC2\EOT\210\STX\DC1\DC4\n\
    \\r\n\
    \\ENQ\EOT,\STX\ETX\ETX\DC2\EOT\210\STX\ETB\CAN\n\
    \\f\n\
    \\EOT\EOT,\STX\EOT\DC2\EOT\211\STX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT,\STX\EOT\EOT\DC2\EOT\211\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT,\STX\EOT\ENQ\DC2\EOT\211\STX\v\DLE\n\
    \\r\n\
    \\ENQ\EOT,\STX\EOT\SOH\DC2\EOT\211\STX\DC1\NAK\n\
    \\r\n\
    \\ENQ\EOT,\STX\EOT\ETX\DC2\EOT\211\STX\CAN\EM\n\
    \\f\n\
    \\EOT\EOT,\STX\ENQ\DC2\EOT\212\STX\STX\EM\n\
    \\r\n\
    \\ENQ\EOT,\STX\ENQ\EOT\DC2\EOT\212\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT,\STX\ENQ\ENQ\DC2\EOT\212\STX\v\DLE\n\
    \\r\n\
    \\ENQ\EOT,\STX\ENQ\SOH\DC2\EOT\212\STX\DC1\DC4\n\
    \\r\n\
    \\ENQ\EOT,\STX\ENQ\ETX\DC2\EOT\212\STX\ETB\CAN\n\
    \\f\n\
    \\STX\EOT-\DC2\ACK\214\STX\NUL\220\STX\SOH\n\
    \\v\n\
    \\ETX\EOT-\SOH\DC2\EOT\214\STX\b$\n\
    \\f\n\
    \\EOT\EOT-\STX\NUL\DC2\EOT\215\STX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT-\STX\NUL\EOT\DC2\EOT\215\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT-\STX\NUL\ENQ\DC2\EOT\215\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT-\STX\NUL\SOH\DC2\EOT\215\STX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT-\STX\NUL\ETX\DC2\EOT\215\STX\CAN\EM\n\
    \\f\n\
    \\EOT\EOT-\STX\SOH\DC2\EOT\216\STX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT-\STX\SOH\EOT\DC2\EOT\216\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT-\STX\SOH\ENQ\DC2\EOT\216\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT-\STX\SOH\SOH\DC2\EOT\216\STX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT-\STX\SOH\ETX\DC2\EOT\216\STX\CAN\EM\n\
    \\f\n\
    \\EOT\EOT-\STX\STX\DC2\EOT\217\STX\STX\EM\n\
    \\r\n\
    \\ENQ\EOT-\STX\STX\EOT\DC2\EOT\217\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT-\STX\STX\ENQ\DC2\EOT\217\STX\v\DLE\n\
    \\r\n\
    \\ENQ\EOT-\STX\STX\SOH\DC2\EOT\217\STX\DC1\DC4\n\
    \\r\n\
    \\ENQ\EOT-\STX\STX\ETX\DC2\EOT\217\STX\ETB\CAN\n\
    \\f\n\
    \\EOT\EOT-\STX\ETX\DC2\EOT\218\STX\STX\GS\n\
    \\r\n\
    \\ENQ\EOT-\STX\ETX\EOT\DC2\EOT\218\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT-\STX\ETX\ENQ\DC2\EOT\218\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT-\STX\ETX\SOH\DC2\EOT\218\STX\DC2\CAN\n\
    \\r\n\
    \\ENQ\EOT-\STX\ETX\ETX\DC2\EOT\218\STX\ESC\FS\n\
    \\f\n\
    \\EOT\EOT-\STX\EOT\DC2\EOT\219\STX\STX\EM\n\
    \\r\n\
    \\ENQ\EOT-\STX\EOT\EOT\DC2\EOT\219\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT-\STX\EOT\ENQ\DC2\EOT\219\STX\v\DLE\n\
    \\r\n\
    \\ENQ\EOT-\STX\EOT\SOH\DC2\EOT\219\STX\DC1\DC4\n\
    \\r\n\
    \\ENQ\EOT-\STX\EOT\ETX\DC2\EOT\219\STX\ETB\CAN\n\
    \\f\n\
    \\STX\EOT.\DC2\ACK\221\STX\NUL\229\STX\SOH\n\
    \\v\n\
    \\ETX\EOT.\SOH\DC2\EOT\221\STX\b(\n\
    \\f\n\
    \\EOT\EOT.\STX\NUL\DC2\EOT\222\STX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT.\STX\NUL\EOT\DC2\EOT\222\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT.\STX\NUL\ENQ\DC2\EOT\222\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT.\STX\NUL\SOH\DC2\EOT\222\STX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT.\STX\NUL\ETX\DC2\EOT\222\STX\CAN\EM\n\
    \\f\n\
    \\EOT\EOT.\STX\SOH\DC2\EOT\223\STX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT.\STX\SOH\EOT\DC2\EOT\223\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT.\STX\SOH\ENQ\DC2\EOT\223\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT.\STX\SOH\SOH\DC2\EOT\223\STX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT.\STX\SOH\ETX\DC2\EOT\223\STX\CAN\EM\n\
    \\f\n\
    \\EOT\EOT.\STX\STX\DC2\EOT\224\STX\STX\ESC\n\
    \\r\n\
    \\ENQ\EOT.\STX\STX\EOT\DC2\EOT\224\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT.\STX\STX\ENQ\DC2\EOT\224\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT.\STX\STX\SOH\DC2\EOT\224\STX\DC2\SYN\n\
    \\r\n\
    \\ENQ\EOT.\STX\STX\ETX\DC2\EOT\224\STX\EM\SUB\n\
    \\f\n\
    \\EOT\EOT.\STX\ETX\DC2\EOT\225\STX\STX\EM\n\
    \\r\n\
    \\ENQ\EOT.\STX\ETX\EOT\DC2\EOT\225\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT.\STX\ETX\ENQ\DC2\EOT\225\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT.\STX\ETX\SOH\DC2\EOT\225\STX\DC2\DC4\n\
    \\r\n\
    \\ENQ\EOT.\STX\ETX\ETX\DC2\EOT\225\STX\ETB\CAN\n\
    \\f\n\
    \\EOT\EOT.\STX\EOT\DC2\EOT\226\STX\STX\GS\n\
    \\r\n\
    \\ENQ\EOT.\STX\EOT\EOT\DC2\EOT\226\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT.\STX\EOT\ENQ\DC2\EOT\226\STX\v\DLE\n\
    \\r\n\
    \\ENQ\EOT.\STX\EOT\SOH\DC2\EOT\226\STX\DC1\CAN\n\
    \\r\n\
    \\ENQ\EOT.\STX\EOT\ETX\DC2\EOT\226\STX\ESC\FS\n\
    \\f\n\
    \\EOT\EOT.\STX\ENQ\DC2\EOT\227\STX\STX\ESC\n\
    \\r\n\
    \\ENQ\EOT.\STX\ENQ\EOT\DC2\EOT\227\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT.\STX\ENQ\ENQ\DC2\EOT\227\STX\v\DLE\n\
    \\r\n\
    \\ENQ\EOT.\STX\ENQ\SOH\DC2\EOT\227\STX\DC1\SYN\n\
    \\r\n\
    \\ENQ\EOT.\STX\ENQ\ETX\DC2\EOT\227\STX\EM\SUB\n\
    \\f\n\
    \\EOT\EOT.\STX\ACK\DC2\EOT\228\STX\STX \n\
    \\r\n\
    \\ENQ\EOT.\STX\ACK\EOT\DC2\EOT\228\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT.\STX\ACK\ENQ\DC2\EOT\228\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT.\STX\ACK\SOH\DC2\EOT\228\STX\DC2\ESC\n\
    \\r\n\
    \\ENQ\EOT.\STX\ACK\ETX\DC2\EOT\228\STX\RS\US\n\
    \\f\n\
    \\STX\EOT/\DC2\ACK\230\STX\NUL\236\STX\SOH\n\
    \\v\n\
    \\ETX\EOT/\SOH\DC2\EOT\230\STX\b\GS\n\
    \\f\n\
    \\EOT\EOT/\STX\NUL\DC2\EOT\231\STX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT/\STX\NUL\EOT\DC2\EOT\231\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT/\STX\NUL\ENQ\DC2\EOT\231\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT/\STX\NUL\SOH\DC2\EOT\231\STX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT/\STX\NUL\ETX\DC2\EOT\231\STX\CAN\EM\n\
    \\f\n\
    \\EOT\EOT/\STX\SOH\DC2\EOT\232\STX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT/\STX\SOH\EOT\DC2\EOT\232\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT/\STX\SOH\ENQ\DC2\EOT\232\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT/\STX\SOH\SOH\DC2\EOT\232\STX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT/\STX\SOH\ETX\DC2\EOT\232\STX\CAN\EM\n\
    \\f\n\
    \\EOT\EOT/\STX\STX\DC2\EOT\233\STX\STX\FS\n\
    \\r\n\
    \\ENQ\EOT/\STX\STX\EOT\DC2\EOT\233\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT/\STX\STX\ENQ\DC2\EOT\233\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT/\STX\STX\SOH\DC2\EOT\233\STX\DC2\ETB\n\
    \\r\n\
    \\ENQ\EOT/\STX\STX\ETX\DC2\EOT\233\STX\SUB\ESC\n\
    \\f\n\
    \\EOT\EOT/\STX\ETX\DC2\EOT\234\STX\STX!\n\
    \\r\n\
    \\ENQ\EOT/\STX\ETX\EOT\DC2\EOT\234\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT/\STX\ETX\ENQ\DC2\EOT\234\STX\v\DLE\n\
    \\r\n\
    \\ENQ\EOT/\STX\ETX\SOH\DC2\EOT\234\STX\DC1\FS\n\
    \\r\n\
    \\ENQ\EOT/\STX\ETX\ETX\DC2\EOT\234\STX\US \n\
    \\f\n\
    \\EOT\EOT/\STX\EOT\DC2\EOT\235\STX\STX\ESC\n\
    \\r\n\
    \\ENQ\EOT/\STX\EOT\EOT\DC2\EOT\235\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT/\STX\EOT\ENQ\DC2\EOT\235\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT/\STX\EOT\SOH\DC2\EOT\235\STX\DC2\SYN\n\
    \\r\n\
    \\ENQ\EOT/\STX\EOT\ETX\DC2\EOT\235\STX\EM\SUB\n\
    \\f\n\
    \\STX\EOT0\DC2\ACK\237\STX\NUL\244\STX\SOH\n\
    \\v\n\
    \\ETX\EOT0\SOH\DC2\EOT\237\STX\b!\n\
    \\f\n\
    \\EOT\EOT0\STX\NUL\DC2\EOT\238\STX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT0\STX\NUL\EOT\DC2\EOT\238\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT0\STX\NUL\ENQ\DC2\EOT\238\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT0\STX\NUL\SOH\DC2\EOT\238\STX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT0\STX\NUL\ETX\DC2\EOT\238\STX\CAN\EM\n\
    \\f\n\
    \\EOT\EOT0\STX\SOH\DC2\EOT\239\STX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT0\STX\SOH\EOT\DC2\EOT\239\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT0\STX\SOH\ENQ\DC2\EOT\239\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT0\STX\SOH\SOH\DC2\EOT\239\STX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT0\STX\SOH\ETX\DC2\EOT\239\STX\CAN\EM\n\
    \\f\n\
    \\EOT\EOT0\STX\STX\DC2\EOT\240\STX\STX\FS\n\
    \\r\n\
    \\ENQ\EOT0\STX\STX\EOT\DC2\EOT\240\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT0\STX\STX\ENQ\DC2\EOT\240\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT0\STX\STX\SOH\DC2\EOT\240\STX\DC2\ETB\n\
    \\r\n\
    \\ENQ\EOT0\STX\STX\ETX\DC2\EOT\240\STX\SUB\ESC\n\
    \\f\n\
    \\EOT\EOT0\STX\ETX\DC2\EOT\241\STX\STX\FS\n\
    \\r\n\
    \\ENQ\EOT0\STX\ETX\EOT\DC2\EOT\241\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT0\STX\ETX\ENQ\DC2\EOT\241\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT0\STX\ETX\SOH\DC2\EOT\241\STX\DC2\ETB\n\
    \\r\n\
    \\ENQ\EOT0\STX\ETX\ETX\DC2\EOT\241\STX\SUB\ESC\n\
    \\f\n\
    \\EOT\EOT0\STX\EOT\DC2\EOT\242\STX\STX\ESC\n\
    \\r\n\
    \\ENQ\EOT0\STX\EOT\EOT\DC2\EOT\242\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT0\STX\EOT\ENQ\DC2\EOT\242\STX\v\DLE\n\
    \\r\n\
    \\ENQ\EOT0\STX\EOT\SOH\DC2\EOT\242\STX\DC1\SYN\n\
    \\r\n\
    \\ENQ\EOT0\STX\EOT\ETX\DC2\EOT\242\STX\EM\SUB\n\
    \\f\n\
    \\EOT\EOT0\STX\ENQ\DC2\EOT\243\STX\STX\ESC\n\
    \\r\n\
    \\ENQ\EOT0\STX\ENQ\EOT\DC2\EOT\243\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT0\STX\ENQ\ENQ\DC2\EOT\243\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT0\STX\ENQ\SOH\DC2\EOT\243\STX\DC2\SYN\n\
    \\r\n\
    \\ENQ\EOT0\STX\ENQ\ETX\DC2\EOT\243\STX\EM\SUB\n\
    \\f\n\
    \\STX\EOT1\DC2\ACK\245\STX\NUL\252\STX\SOH\n\
    \\v\n\
    \\ETX\EOT1\SOH\DC2\EOT\245\STX\b \n\
    \\f\n\
    \\EOT\EOT1\STX\NUL\DC2\EOT\246\STX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT1\STX\NUL\EOT\DC2\EOT\246\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT1\STX\NUL\ENQ\DC2\EOT\246\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT1\STX\NUL\SOH\DC2\EOT\246\STX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT1\STX\NUL\ETX\DC2\EOT\246\STX\CAN\EM\n\
    \\f\n\
    \\EOT\EOT1\STX\SOH\DC2\EOT\247\STX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT1\STX\SOH\EOT\DC2\EOT\247\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT1\STX\SOH\ENQ\DC2\EOT\247\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT1\STX\SOH\SOH\DC2\EOT\247\STX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT1\STX\SOH\ETX\DC2\EOT\247\STX\CAN\EM\n\
    \\f\n\
    \\EOT\EOT1\STX\STX\DC2\EOT\248\STX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT1\STX\STX\EOT\DC2\EOT\248\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT1\STX\STX\ENQ\DC2\EOT\248\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT1\STX\STX\SOH\DC2\EOT\248\STX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT1\STX\STX\ETX\DC2\EOT\248\STX\CAN\EM\n\
    \\f\n\
    \\EOT\EOT1\STX\ETX\DC2\EOT\249\STX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT1\STX\ETX\EOT\DC2\EOT\249\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT1\STX\ETX\ENQ\DC2\EOT\249\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT1\STX\ETX\SOH\DC2\EOT\249\STX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT1\STX\ETX\ETX\DC2\EOT\249\STX\CAN\EM\n\
    \\f\n\
    \\EOT\EOT1\STX\EOT\DC2\EOT\250\STX\STX\GS\n\
    \\r\n\
    \\ENQ\EOT1\STX\EOT\EOT\DC2\EOT\250\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT1\STX\EOT\ENQ\DC2\EOT\250\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT1\STX\EOT\SOH\DC2\EOT\250\STX\DC2\CAN\n\
    \\r\n\
    \\ENQ\EOT1\STX\EOT\ETX\DC2\EOT\250\STX\ESC\FS\n\
    \\f\n\
    \\EOT\EOT1\STX\ENQ\DC2\EOT\251\STX\STX\ESC\n\
    \\r\n\
    \\ENQ\EOT1\STX\ENQ\EOT\DC2\EOT\251\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT1\STX\ENQ\ENQ\DC2\EOT\251\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT1\STX\ENQ\SOH\DC2\EOT\251\STX\DC2\SYN\n\
    \\r\n\
    \\ENQ\EOT1\STX\ENQ\ETX\DC2\EOT\251\STX\EM\SUB\n\
    \\f\n\
    \\STX\EOT2\DC2\ACK\253\STX\NUL\132\ETX\SOH\n\
    \\v\n\
    \\ETX\EOT2\SOH\DC2\EOT\253\STX\b1\n\
    \\f\n\
    \\EOT\EOT2\STX\NUL\DC2\EOT\254\STX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT2\STX\NUL\EOT\DC2\EOT\254\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT2\STX\NUL\ENQ\DC2\EOT\254\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT2\STX\NUL\SOH\DC2\EOT\254\STX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT2\STX\NUL\ETX\DC2\EOT\254\STX\CAN\EM\n\
    \\f\n\
    \\EOT\EOT2\STX\SOH\DC2\EOT\255\STX\STX\FS\n\
    \\r\n\
    \\ENQ\EOT2\STX\SOH\EOT\DC2\EOT\255\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT2\STX\SOH\ENQ\DC2\EOT\255\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT2\STX\SOH\SOH\DC2\EOT\255\STX\DC2\ETB\n\
    \\r\n\
    \\ENQ\EOT2\STX\SOH\ETX\DC2\EOT\255\STX\SUB\ESC\n\
    \\f\n\
    \\EOT\EOT2\STX\STX\DC2\EOT\128\ETX\STX\ESC\n\
    \\r\n\
    \\ENQ\EOT2\STX\STX\EOT\DC2\EOT\128\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT2\STX\STX\ENQ\DC2\EOT\128\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT2\STX\STX\SOH\DC2\EOT\128\ETX\DC2\SYN\n\
    \\r\n\
    \\ENQ\EOT2\STX\STX\ETX\DC2\EOT\128\ETX\EM\SUB\n\
    \\f\n\
    \\EOT\EOT2\STX\ETX\DC2\EOT\129\ETX\STX\ESC\n\
    \\r\n\
    \\ENQ\EOT2\STX\ETX\EOT\DC2\EOT\129\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT2\STX\ETX\ENQ\DC2\EOT\129\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT2\STX\ETX\SOH\DC2\EOT\129\ETX\DC2\SYN\n\
    \\r\n\
    \\ENQ\EOT2\STX\ETX\ETX\DC2\EOT\129\ETX\EM\SUB\n\
    \\f\n\
    \\EOT\EOT2\STX\EOT\DC2\EOT\130\ETX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT2\STX\EOT\EOT\DC2\EOT\130\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT2\STX\EOT\ENQ\DC2\EOT\130\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT2\STX\EOT\SOH\DC2\EOT\130\ETX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT2\STX\EOT\ETX\DC2\EOT\130\ETX\CAN\EM\n\
    \\f\n\
    \\EOT\EOT2\STX\ENQ\DC2\EOT\131\ETX\STX\EM\n\
    \\r\n\
    \\ENQ\EOT2\STX\ENQ\EOT\DC2\EOT\131\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT2\STX\ENQ\ENQ\DC2\EOT\131\ETX\v\DLE\n\
    \\r\n\
    \\ENQ\EOT2\STX\ENQ\SOH\DC2\EOT\131\ETX\DC1\DC4\n\
    \\r\n\
    \\ENQ\EOT2\STX\ENQ\ETX\DC2\EOT\131\ETX\ETB\CAN\n\
    \\f\n\
    \\STX\EOT3\DC2\ACK\133\ETX\NUL\138\ETX\SOH\n\
    \\v\n\
    \\ETX\EOT3\SOH\DC2\EOT\133\ETX\b.\n\
    \\f\n\
    \\EOT\EOT3\STX\NUL\DC2\EOT\134\ETX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT3\STX\NUL\EOT\DC2\EOT\134\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT3\STX\NUL\ENQ\DC2\EOT\134\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT3\STX\NUL\SOH\DC2\EOT\134\ETX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT3\STX\NUL\ETX\DC2\EOT\134\ETX\CAN\EM\n\
    \\f\n\
    \\EOT\EOT3\STX\SOH\DC2\EOT\135\ETX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT3\STX\SOH\EOT\DC2\EOT\135\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT3\STX\SOH\ENQ\DC2\EOT\135\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT3\STX\SOH\SOH\DC2\EOT\135\ETX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT3\STX\SOH\ETX\DC2\EOT\135\ETX\CAN\EM\n\
    \\f\n\
    \\EOT\EOT3\STX\STX\DC2\EOT\136\ETX\STX\ESC\n\
    \\r\n\
    \\ENQ\EOT3\STX\STX\EOT\DC2\EOT\136\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT3\STX\STX\ENQ\DC2\EOT\136\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT3\STX\STX\SOH\DC2\EOT\136\ETX\DC2\SYN\n\
    \\r\n\
    \\ENQ\EOT3\STX\STX\ETX\DC2\EOT\136\ETX\EM\SUB\n\
    \\f\n\
    \\EOT\EOT3\STX\ETX\DC2\EOT\137\ETX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT3\STX\ETX\EOT\DC2\EOT\137\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT3\STX\ETX\ENQ\DC2\EOT\137\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT3\STX\ETX\SOH\DC2\EOT\137\ETX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT3\STX\ETX\ETX\DC2\EOT\137\ETX\CAN\EM\n\
    \\f\n\
    \\STX\EOT4\DC2\ACK\139\ETX\NUL\145\ETX\SOH\n\
    \\v\n\
    \\ETX\EOT4\SOH\DC2\EOT\139\ETX\b(\n\
    \\f\n\
    \\EOT\EOT4\STX\NUL\DC2\EOT\140\ETX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT4\STX\NUL\EOT\DC2\EOT\140\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT4\STX\NUL\ENQ\DC2\EOT\140\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT4\STX\NUL\SOH\DC2\EOT\140\ETX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT4\STX\NUL\ETX\DC2\EOT\140\ETX\CAN\EM\n\
    \\f\n\
    \\EOT\EOT4\STX\SOH\DC2\EOT\141\ETX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT4\STX\SOH\EOT\DC2\EOT\141\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT4\STX\SOH\ENQ\DC2\EOT\141\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT4\STX\SOH\SOH\DC2\EOT\141\ETX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT4\STX\SOH\ETX\DC2\EOT\141\ETX\CAN\EM\n\
    \\f\n\
    \\EOT\EOT4\STX\STX\DC2\EOT\142\ETX\STX\ESC\n\
    \\r\n\
    \\ENQ\EOT4\STX\STX\EOT\DC2\EOT\142\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT4\STX\STX\ENQ\DC2\EOT\142\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT4\STX\STX\SOH\DC2\EOT\142\ETX\DC2\SYN\n\
    \\r\n\
    \\ENQ\EOT4\STX\STX\ETX\DC2\EOT\142\ETX\EM\SUB\n\
    \\f\n\
    \\EOT\EOT4\STX\ETX\DC2\EOT\143\ETX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT4\STX\ETX\EOT\DC2\EOT\143\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT4\STX\ETX\ENQ\DC2\EOT\143\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT4\STX\ETX\SOH\DC2\EOT\143\ETX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT4\STX\ETX\ETX\DC2\EOT\143\ETX\CAN\EM\n\
    \\f\n\
    \\EOT\EOT4\STX\EOT\DC2\EOT\144\ETX\STX\FS\n\
    \\r\n\
    \\ENQ\EOT4\STX\EOT\EOT\DC2\EOT\144\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT4\STX\EOT\ENQ\DC2\EOT\144\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT4\STX\EOT\SOH\DC2\EOT\144\ETX\DC2\ETB\n\
    \\r\n\
    \\ENQ\EOT4\STX\EOT\ETX\DC2\EOT\144\ETX\SUB\ESC\n\
    \\f\n\
    \\STX\EOT5\DC2\ACK\146\ETX\NUL\155\ETX\SOH\n\
    \\v\n\
    \\ETX\EOT5\SOH\DC2\EOT\146\ETX\b'\n\
    \\f\n\
    \\EOT\EOT5\STX\NUL\DC2\EOT\147\ETX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT5\STX\NUL\EOT\DC2\EOT\147\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT5\STX\NUL\ENQ\DC2\EOT\147\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT5\STX\NUL\SOH\DC2\EOT\147\ETX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT5\STX\NUL\ETX\DC2\EOT\147\ETX\CAN\EM\n\
    \\f\n\
    \\EOT\EOT5\STX\SOH\DC2\EOT\148\ETX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT5\STX\SOH\EOT\DC2\EOT\148\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT5\STX\SOH\ENQ\DC2\EOT\148\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT5\STX\SOH\SOH\DC2\EOT\148\ETX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT5\STX\SOH\ETX\DC2\EOT\148\ETX\CAN\EM\n\
    \\f\n\
    \\EOT\EOT5\STX\STX\DC2\EOT\149\ETX\STX\FS\n\
    \\r\n\
    \\ENQ\EOT5\STX\STX\EOT\DC2\EOT\149\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT5\STX\STX\ENQ\DC2\EOT\149\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT5\STX\STX\SOH\DC2\EOT\149\ETX\DC2\ETB\n\
    \\r\n\
    \\ENQ\EOT5\STX\STX\ETX\DC2\EOT\149\ETX\SUB\ESC\n\
    \\f\n\
    \\EOT\EOT5\STX\ETX\DC2\EOT\150\ETX\STX\ESC\n\
    \\r\n\
    \\ENQ\EOT5\STX\ETX\EOT\DC2\EOT\150\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT5\STX\ETX\ENQ\DC2\EOT\150\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT5\STX\ETX\SOH\DC2\EOT\150\ETX\DC2\SYN\n\
    \\r\n\
    \\ENQ\EOT5\STX\ETX\ETX\DC2\EOT\150\ETX\EM\SUB\n\
    \\f\n\
    \\EOT\EOT5\STX\EOT\DC2\EOT\151\ETX\STX\ESC\n\
    \\r\n\
    \\ENQ\EOT5\STX\EOT\EOT\DC2\EOT\151\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT5\STX\EOT\ENQ\DC2\EOT\151\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT5\STX\EOT\SOH\DC2\EOT\151\ETX\DC2\SYN\n\
    \\r\n\
    \\ENQ\EOT5\STX\EOT\ETX\DC2\EOT\151\ETX\EM\SUB\n\
    \\f\n\
    \\EOT\EOT5\STX\ENQ\DC2\EOT\152\ETX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT5\STX\ENQ\EOT\DC2\EOT\152\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT5\STX\ENQ\ENQ\DC2\EOT\152\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT5\STX\ENQ\SOH\DC2\EOT\152\ETX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT5\STX\ENQ\ETX\DC2\EOT\152\ETX\CAN\EM\n\
    \\f\n\
    \\EOT\EOT5\STX\ACK\DC2\EOT\153\ETX\STX\GS\n\
    \\r\n\
    \\ENQ\EOT5\STX\ACK\EOT\DC2\EOT\153\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT5\STX\ACK\ENQ\DC2\EOT\153\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT5\STX\ACK\SOH\DC2\EOT\153\ETX\DC2\CAN\n\
    \\r\n\
    \\ENQ\EOT5\STX\ACK\ETX\DC2\EOT\153\ETX\ESC\FS\n\
    \\f\n\
    \\EOT\EOT5\STX\a\DC2\EOT\154\ETX\STX\EM\n\
    \\r\n\
    \\ENQ\EOT5\STX\a\EOT\DC2\EOT\154\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT5\STX\a\ENQ\DC2\EOT\154\ETX\v\DLE\n\
    \\r\n\
    \\ENQ\EOT5\STX\a\SOH\DC2\EOT\154\ETX\DC1\DC4\n\
    \\r\n\
    \\ENQ\EOT5\STX\a\ETX\DC2\EOT\154\ETX\ETB\CAN\n\
    \\f\n\
    \\STX\EOT6\DC2\ACK\156\ETX\NUL\161\ETX\SOH\n\
    \\v\n\
    \\ETX\EOT6\SOH\DC2\EOT\156\ETX\b\"\n\
    \\f\n\
    \\EOT\EOT6\STX\NUL\DC2\EOT\157\ETX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT6\STX\NUL\EOT\DC2\EOT\157\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT6\STX\NUL\ENQ\DC2\EOT\157\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT6\STX\NUL\SOH\DC2\EOT\157\ETX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT6\STX\NUL\ETX\DC2\EOT\157\ETX\CAN\EM\n\
    \\f\n\
    \\EOT\EOT6\STX\SOH\DC2\EOT\158\ETX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT6\STX\SOH\EOT\DC2\EOT\158\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT6\STX\SOH\ENQ\DC2\EOT\158\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT6\STX\SOH\SOH\DC2\EOT\158\ETX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT6\STX\SOH\ETX\DC2\EOT\158\ETX\CAN\EM\n\
    \\f\n\
    \\EOT\EOT6\STX\STX\DC2\EOT\159\ETX\STX\FS\n\
    \\r\n\
    \\ENQ\EOT6\STX\STX\EOT\DC2\EOT\159\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT6\STX\STX\ENQ\DC2\EOT\159\ETX\v\DLE\n\
    \\r\n\
    \\ENQ\EOT6\STX\STX\SOH\DC2\EOT\159\ETX\DC1\ETB\n\
    \\r\n\
    \\ENQ\EOT6\STX\STX\ETX\DC2\EOT\159\ETX\SUB\ESC\n\
    \\f\n\
    \\EOT\EOT6\STX\ETX\DC2\EOT\160\ETX\STX\EM\n\
    \\r\n\
    \\ENQ\EOT6\STX\ETX\EOT\DC2\EOT\160\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT6\STX\ETX\ENQ\DC2\EOT\160\ETX\v\DLE\n\
    \\r\n\
    \\ENQ\EOT6\STX\ETX\SOH\DC2\EOT\160\ETX\DC1\DC4\n\
    \\r\n\
    \\ENQ\EOT6\STX\ETX\ETX\DC2\EOT\160\ETX\ETB\CAN\n\
    \\f\n\
    \\STX\EOT7\DC2\ACK\162\ETX\NUL\168\ETX\SOH\n\
    \\v\n\
    \\ETX\EOT7\SOH\DC2\EOT\162\ETX\b%\n\
    \\f\n\
    \\EOT\EOT7\STX\NUL\DC2\EOT\163\ETX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT7\STX\NUL\EOT\DC2\EOT\163\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT7\STX\NUL\ENQ\DC2\EOT\163\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT7\STX\NUL\SOH\DC2\EOT\163\ETX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT7\STX\NUL\ETX\DC2\EOT\163\ETX\CAN\EM\n\
    \\f\n\
    \\EOT\EOT7\STX\SOH\DC2\EOT\164\ETX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT7\STX\SOH\EOT\DC2\EOT\164\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT7\STX\SOH\ENQ\DC2\EOT\164\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT7\STX\SOH\SOH\DC2\EOT\164\ETX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT7\STX\SOH\ETX\DC2\EOT\164\ETX\CAN\EM\n\
    \\f\n\
    \\EOT\EOT7\STX\STX\DC2\EOT\165\ETX\STX\FS\n\
    \\r\n\
    \\ENQ\EOT7\STX\STX\EOT\DC2\EOT\165\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT7\STX\STX\ENQ\DC2\EOT\165\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT7\STX\STX\SOH\DC2\EOT\165\ETX\DC2\ETB\n\
    \\r\n\
    \\ENQ\EOT7\STX\STX\ETX\DC2\EOT\165\ETX\SUB\ESC\n\
    \\f\n\
    \\EOT\EOT7\STX\ETX\DC2\EOT\166\ETX\STX\GS\n\
    \\r\n\
    \\ENQ\EOT7\STX\ETX\EOT\DC2\EOT\166\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT7\STX\ETX\ENQ\DC2\EOT\166\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT7\STX\ETX\SOH\DC2\EOT\166\ETX\DC2\CAN\n\
    \\r\n\
    \\ENQ\EOT7\STX\ETX\ETX\DC2\EOT\166\ETX\ESC\FS\n\
    \\f\n\
    \\EOT\EOT7\STX\EOT\DC2\EOT\167\ETX\STX\GS\n\
    \\r\n\
    \\ENQ\EOT7\STX\EOT\EOT\DC2\EOT\167\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT7\STX\EOT\ENQ\DC2\EOT\167\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT7\STX\EOT\SOH\DC2\EOT\167\ETX\DC2\CAN\n\
    \\r\n\
    \\ENQ\EOT7\STX\EOT\ETX\DC2\EOT\167\ETX\ESC\FS\n\
    \\f\n\
    \\STX\EOT8\DC2\ACK\169\ETX\NUL\176\ETX\SOH\n\
    \\v\n\
    \\ETX\EOT8\SOH\DC2\EOT\169\ETX\b#\n\
    \\f\n\
    \\EOT\EOT8\STX\NUL\DC2\EOT\170\ETX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT8\STX\NUL\EOT\DC2\EOT\170\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT8\STX\NUL\ENQ\DC2\EOT\170\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT8\STX\NUL\SOH\DC2\EOT\170\ETX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT8\STX\NUL\ETX\DC2\EOT\170\ETX\CAN\EM\n\
    \\f\n\
    \\EOT\EOT8\STX\SOH\DC2\EOT\171\ETX\STX\EM\n\
    \\r\n\
    \\ENQ\EOT8\STX\SOH\EOT\DC2\EOT\171\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT8\STX\SOH\ENQ\DC2\EOT\171\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT8\STX\SOH\SOH\DC2\EOT\171\ETX\DC2\DC4\n\
    \\r\n\
    \\ENQ\EOT8\STX\SOH\ETX\DC2\EOT\171\ETX\ETB\CAN\n\
    \\f\n\
    \\EOT\EOT8\STX\STX\DC2\EOT\172\ETX\STX\FS\n\
    \\r\n\
    \\ENQ\EOT8\STX\STX\EOT\DC2\EOT\172\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT8\STX\STX\ENQ\DC2\EOT\172\ETX\v\DLE\n\
    \\r\n\
    \\ENQ\EOT8\STX\STX\SOH\DC2\EOT\172\ETX\DC1\ETB\n\
    \\r\n\
    \\ENQ\EOT8\STX\STX\ETX\DC2\EOT\172\ETX\SUB\ESC\n\
    \\f\n\
    \\EOT\EOT8\STX\ETX\DC2\EOT\173\ETX\STX \n\
    \\r\n\
    \\ENQ\EOT8\STX\ETX\EOT\DC2\EOT\173\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT8\STX\ETX\ENQ\DC2\EOT\173\ETX\v\DLE\n\
    \\r\n\
    \\ENQ\EOT8\STX\ETX\SOH\DC2\EOT\173\ETX\DC1\ESC\n\
    \\r\n\
    \\ENQ\EOT8\STX\ETX\ETX\DC2\EOT\173\ETX\RS\US\n\
    \\f\n\
    \\EOT\EOT8\STX\EOT\DC2\EOT\174\ETX\STX\GS\n\
    \\r\n\
    \\ENQ\EOT8\STX\EOT\EOT\DC2\EOT\174\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT8\STX\EOT\ENQ\DC2\EOT\174\ETX\v\DLE\n\
    \\r\n\
    \\ENQ\EOT8\STX\EOT\SOH\DC2\EOT\174\ETX\DC1\CAN\n\
    \\r\n\
    \\ENQ\EOT8\STX\EOT\ETX\DC2\EOT\174\ETX\ESC\FS\n\
    \\f\n\
    \\EOT\EOT8\STX\ENQ\DC2\EOT\175\ETX\STX\"\n\
    \\r\n\
    \\ENQ\EOT8\STX\ENQ\EOT\DC2\EOT\175\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT8\STX\ENQ\ENQ\DC2\EOT\175\ETX\v\DLE\n\
    \\r\n\
    \\ENQ\EOT8\STX\ENQ\SOH\DC2\EOT\175\ETX\DC1\GS\n\
    \\r\n\
    \\ENQ\EOT8\STX\ENQ\ETX\DC2\EOT\175\ETX !\n\
    \\f\n\
    \\STX\EOT9\DC2\ACK\177\ETX\NUL\181\ETX\SOH\n\
    \\v\n\
    \\ETX\EOT9\SOH\DC2\EOT\177\ETX\b+\n\
    \\f\n\
    \\EOT\EOT9\STX\NUL\DC2\EOT\178\ETX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT9\STX\NUL\EOT\DC2\EOT\178\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT9\STX\NUL\ENQ\DC2\EOT\178\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT9\STX\NUL\SOH\DC2\EOT\178\ETX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT9\STX\NUL\ETX\DC2\EOT\178\ETX\CAN\EM\n\
    \\f\n\
    \\EOT\EOT9\STX\SOH\DC2\EOT\179\ETX\STX\EM\n\
    \\r\n\
    \\ENQ\EOT9\STX\SOH\EOT\DC2\EOT\179\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT9\STX\SOH\ENQ\DC2\EOT\179\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT9\STX\SOH\SOH\DC2\EOT\179\ETX\DC2\DC4\n\
    \\r\n\
    \\ENQ\EOT9\STX\SOH\ETX\DC2\EOT\179\ETX\ETB\CAN\n\
    \\f\n\
    \\EOT\EOT9\STX\STX\DC2\EOT\180\ETX\STX\FS\n\
    \\r\n\
    \\ENQ\EOT9\STX\STX\EOT\DC2\EOT\180\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT9\STX\STX\ENQ\DC2\EOT\180\ETX\v\DLE\n\
    \\r\n\
    \\ENQ\EOT9\STX\STX\SOH\DC2\EOT\180\ETX\DC1\ETB\n\
    \\r\n\
    \\ENQ\EOT9\STX\STX\ETX\DC2\EOT\180\ETX\SUB\ESC\n\
    \\f\n\
    \\STX\EOT:\DC2\ACK\182\ETX\NUL\188\ETX\SOH\n\
    \\v\n\
    \\ETX\EOT:\SOH\DC2\EOT\182\ETX\b/\n\
    \\f\n\
    \\EOT\EOT:\STX\NUL\DC2\EOT\183\ETX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT:\STX\NUL\EOT\DC2\EOT\183\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT:\STX\NUL\ENQ\DC2\EOT\183\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT:\STX\NUL\SOH\DC2\EOT\183\ETX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT:\STX\NUL\ETX\DC2\EOT\183\ETX\CAN\EM\n\
    \\f\n\
    \\EOT\EOT:\STX\SOH\DC2\EOT\184\ETX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT:\STX\SOH\EOT\DC2\EOT\184\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT:\STX\SOH\ENQ\DC2\EOT\184\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT:\STX\SOH\SOH\DC2\EOT\184\ETX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT:\STX\SOH\ETX\DC2\EOT\184\ETX\CAN\EM\n\
    \\f\n\
    \\EOT\EOT:\STX\STX\DC2\EOT\185\ETX\STX\FS\n\
    \\r\n\
    \\ENQ\EOT:\STX\STX\EOT\DC2\EOT\185\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT:\STX\STX\ENQ\DC2\EOT\185\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT:\STX\STX\SOH\DC2\EOT\185\ETX\DC2\ETB\n\
    \\r\n\
    \\ENQ\EOT:\STX\STX\ETX\DC2\EOT\185\ETX\SUB\ESC\n\
    \\f\n\
    \\EOT\EOT:\STX\ETX\DC2\EOT\186\ETX\STX\GS\n\
    \\r\n\
    \\ENQ\EOT:\STX\ETX\EOT\DC2\EOT\186\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT:\STX\ETX\ENQ\DC2\EOT\186\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT:\STX\ETX\SOH\DC2\EOT\186\ETX\DC2\CAN\n\
    \\r\n\
    \\ENQ\EOT:\STX\ETX\ETX\DC2\EOT\186\ETX\ESC\FS\n\
    \\f\n\
    \\EOT\EOT:\STX\EOT\DC2\EOT\187\ETX\STX\GS\n\
    \\r\n\
    \\ENQ\EOT:\STX\EOT\EOT\DC2\EOT\187\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT:\STX\EOT\ENQ\DC2\EOT\187\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT:\STX\EOT\SOH\DC2\EOT\187\ETX\DC2\CAN\n\
    \\r\n\
    \\ENQ\EOT:\STX\EOT\ETX\DC2\EOT\187\ETX\ESC\FS\n\
    \\f\n\
    \\STX\EOT;\DC2\ACK\189\ETX\NUL\195\ETX\SOH\n\
    \\v\n\
    \\ETX\EOT;\SOH\DC2\EOT\189\ETX\b)\n\
    \\f\n\
    \\EOT\EOT;\STX\NUL\DC2\EOT\190\ETX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT;\STX\NUL\EOT\DC2\EOT\190\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT;\STX\NUL\ENQ\DC2\EOT\190\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT;\STX\NUL\SOH\DC2\EOT\190\ETX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT;\STX\NUL\ETX\DC2\EOT\190\ETX\CAN\EM\n\
    \\f\n\
    \\EOT\EOT;\STX\SOH\DC2\EOT\191\ETX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT;\STX\SOH\EOT\DC2\EOT\191\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT;\STX\SOH\ENQ\DC2\EOT\191\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT;\STX\SOH\SOH\DC2\EOT\191\ETX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT;\STX\SOH\ETX\DC2\EOT\191\ETX\CAN\EM\n\
    \\f\n\
    \\EOT\EOT;\STX\STX\DC2\EOT\192\ETX\STX\EM\n\
    \\r\n\
    \\ENQ\EOT;\STX\STX\EOT\DC2\EOT\192\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT;\STX\STX\ENQ\DC2\EOT\192\ETX\v\DLE\n\
    \\r\n\
    \\ENQ\EOT;\STX\STX\SOH\DC2\EOT\192\ETX\DC1\DC4\n\
    \\r\n\
    \\ENQ\EOT;\STX\STX\ETX\DC2\EOT\192\ETX\ETB\CAN\n\
    \\f\n\
    \\EOT\EOT;\STX\ETX\DC2\EOT\193\ETX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT;\STX\ETX\EOT\DC2\EOT\193\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT;\STX\ETX\ENQ\DC2\EOT\193\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT;\STX\ETX\SOH\DC2\EOT\193\ETX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT;\STX\ETX\ETX\DC2\EOT\193\ETX\CAN\EM\n\
    \\f\n\
    \\EOT\EOT;\STX\EOT\DC2\EOT\194\ETX\STX\GS\n\
    \\r\n\
    \\ENQ\EOT;\STX\EOT\EOT\DC2\EOT\194\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT;\STX\EOT\ENQ\DC2\EOT\194\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT;\STX\EOT\SOH\DC2\EOT\194\ETX\DC2\CAN\n\
    \\r\n\
    \\ENQ\EOT;\STX\EOT\ETX\DC2\EOT\194\ETX\ESC\FS\n\
    \\f\n\
    \\STX\EOT<\DC2\ACK\196\ETX\NUL\199\ETX\SOH\n\
    \\v\n\
    \\ETX\EOT<\SOH\DC2\EOT\196\ETX\b \n\
    \\f\n\
    \\EOT\EOT<\STX\NUL\DC2\EOT\197\ETX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT<\STX\NUL\EOT\DC2\EOT\197\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT<\STX\NUL\ENQ\DC2\EOT\197\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT<\STX\NUL\SOH\DC2\EOT\197\ETX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT<\STX\NUL\ETX\DC2\EOT\197\ETX\CAN\EM\n\
    \\f\n\
    \\EOT\EOT<\STX\SOH\DC2\EOT\198\ETX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT<\STX\SOH\EOT\DC2\EOT\198\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT<\STX\SOH\ENQ\DC2\EOT\198\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT<\STX\SOH\SOH\DC2\EOT\198\ETX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT<\STX\SOH\ETX\DC2\EOT\198\ETX\CAN\EM\n\
    \\f\n\
    \\STX\EOT=\DC2\ACK\200\ETX\NUL\203\ETX\SOH\n\
    \\v\n\
    \\ETX\EOT=\SOH\DC2\EOT\200\ETX\b&\n\
    \\f\n\
    \\EOT\EOT=\STX\NUL\DC2\EOT\201\ETX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT=\STX\NUL\EOT\DC2\EOT\201\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT=\STX\NUL\ENQ\DC2\EOT\201\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT=\STX\NUL\SOH\DC2\EOT\201\ETX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT=\STX\NUL\ETX\DC2\EOT\201\ETX\CAN\EM\n\
    \\f\n\
    \\EOT\EOT=\STX\SOH\DC2\EOT\202\ETX\STX\FS\n\
    \\r\n\
    \\ENQ\EOT=\STX\SOH\EOT\DC2\EOT\202\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT=\STX\SOH\ENQ\DC2\EOT\202\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT=\STX\SOH\SOH\DC2\EOT\202\ETX\DC2\ETB\n\
    \\r\n\
    \\ENQ\EOT=\STX\SOH\ETX\DC2\EOT\202\ETX\SUB\ESC\n\
    \\f\n\
    \\STX\EOT>\DC2\ACK\204\ETX\NUL\208\ETX\SOH\n\
    \\v\n\
    \\ETX\EOT>\SOH\DC2\EOT\204\ETX\b%\n\
    \\f\n\
    \\EOT\EOT>\STX\NUL\DC2\EOT\205\ETX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT>\STX\NUL\EOT\DC2\EOT\205\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT>\STX\NUL\ENQ\DC2\EOT\205\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT>\STX\NUL\SOH\DC2\EOT\205\ETX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT>\STX\NUL\ETX\DC2\EOT\205\ETX\CAN\EM\n\
    \\f\n\
    \\EOT\EOT>\STX\SOH\DC2\EOT\206\ETX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT>\STX\SOH\EOT\DC2\EOT\206\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT>\STX\SOH\ENQ\DC2\EOT\206\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT>\STX\SOH\SOH\DC2\EOT\206\ETX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT>\STX\SOH\ETX\DC2\EOT\206\ETX\CAN\EM\n\
    \\f\n\
    \\EOT\EOT>\STX\STX\DC2\EOT\207\ETX\STX\EM\n\
    \\r\n\
    \\ENQ\EOT>\STX\STX\EOT\DC2\EOT\207\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT>\STX\STX\ENQ\DC2\EOT\207\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT>\STX\STX\SOH\DC2\EOT\207\ETX\DC2\DC4\n\
    \\r\n\
    \\ENQ\EOT>\STX\STX\ETX\DC2\EOT\207\ETX\ETB\CAN\n\
    \\f\n\
    \\STX\EOT?\DC2\ACK\209\ETX\NUL\212\ETX\SOH\n\
    \\v\n\
    \\ETX\EOT?\SOH\DC2\EOT\209\ETX\b#\n\
    \\f\n\
    \\EOT\EOT?\STX\NUL\DC2\EOT\210\ETX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT?\STX\NUL\EOT\DC2\EOT\210\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT?\STX\NUL\ENQ\DC2\EOT\210\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT?\STX\NUL\SOH\DC2\EOT\210\ETX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT?\STX\NUL\ETX\DC2\EOT\210\ETX\CAN\EM\n\
    \\f\n\
    \\EOT\EOT?\STX\SOH\DC2\EOT\211\ETX\STX\FS\n\
    \\r\n\
    \\ENQ\EOT?\STX\SOH\EOT\DC2\EOT\211\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT?\STX\SOH\ENQ\DC2\EOT\211\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT?\STX\SOH\SOH\DC2\EOT\211\ETX\DC2\ETB\n\
    \\r\n\
    \\ENQ\EOT?\STX\SOH\ETX\DC2\EOT\211\ETX\SUB\ESC\n\
    \\f\n\
    \\STX\EOT@\DC2\ACK\213\ETX\NUL\216\ETX\SOH\n\
    \\v\n\
    \\ETX\EOT@\SOH\DC2\EOT\213\ETX\b(\n\
    \\f\n\
    \\EOT\EOT@\STX\NUL\DC2\EOT\214\ETX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT@\STX\NUL\EOT\DC2\EOT\214\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT@\STX\NUL\ENQ\DC2\EOT\214\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT@\STX\NUL\SOH\DC2\EOT\214\ETX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT@\STX\NUL\ETX\DC2\EOT\214\ETX\CAN\EM\n\
    \\f\n\
    \\EOT\EOT@\STX\SOH\DC2\EOT\215\ETX\STX\FS\n\
    \\r\n\
    \\ENQ\EOT@\STX\SOH\EOT\DC2\EOT\215\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT@\STX\SOH\ENQ\DC2\EOT\215\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT@\STX\SOH\SOH\DC2\EOT\215\ETX\DC2\ETB\n\
    \\r\n\
    \\ENQ\EOT@\STX\SOH\ETX\DC2\EOT\215\ETX\SUB\ESC\n\
    \\f\n\
    \\STX\EOTA\DC2\ACK\217\ETX\NUL\220\ETX\SOH\n\
    \\v\n\
    \\ETX\EOTA\SOH\DC2\EOT\217\ETX\b.\n\
    \\f\n\
    \\EOT\EOTA\STX\NUL\DC2\EOT\218\ETX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOTA\STX\NUL\EOT\DC2\EOT\218\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTA\STX\NUL\ENQ\DC2\EOT\218\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOTA\STX\NUL\SOH\DC2\EOT\218\ETX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOTA\STX\NUL\ETX\DC2\EOT\218\ETX\CAN\EM\n\
    \\f\n\
    \\EOT\EOTA\STX\SOH\DC2\EOT\219\ETX\STX\FS\n\
    \\r\n\
    \\ENQ\EOTA\STX\SOH\EOT\DC2\EOT\219\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTA\STX\SOH\ENQ\DC2\EOT\219\ETX\v\DLE\n\
    \\r\n\
    \\ENQ\EOTA\STX\SOH\SOH\DC2\EOT\219\ETX\DC1\ETB\n\
    \\r\n\
    \\ENQ\EOTA\STX\SOH\ETX\DC2\EOT\219\ETX\SUB\ESC\n\
    \\f\n\
    \\STX\EOTB\DC2\ACK\221\ETX\NUL\227\ETX\SOH\n\
    \\v\n\
    \\ETX\EOTB\SOH\DC2\EOT\221\ETX\b#\n\
    \\f\n\
    \\EOT\EOTB\STX\NUL\DC2\EOT\222\ETX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOTB\STX\NUL\EOT\DC2\EOT\222\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTB\STX\NUL\ENQ\DC2\EOT\222\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOTB\STX\NUL\SOH\DC2\EOT\222\ETX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOTB\STX\NUL\ETX\DC2\EOT\222\ETX\CAN\EM\n\
    \\f\n\
    \\EOT\EOTB\STX\SOH\DC2\EOT\223\ETX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOTB\STX\SOH\EOT\DC2\EOT\223\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTB\STX\SOH\ENQ\DC2\EOT\223\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOTB\STX\SOH\SOH\DC2\EOT\223\ETX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOTB\STX\SOH\ETX\DC2\EOT\223\ETX\CAN\EM\n\
    \\f\n\
    \\EOT\EOTB\STX\STX\DC2\EOT\224\ETX\STX \n\
    \\r\n\
    \\ENQ\EOTB\STX\STX\EOT\DC2\EOT\224\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTB\STX\STX\ENQ\DC2\EOT\224\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOTB\STX\STX\SOH\DC2\EOT\224\ETX\DC2\ESC\n\
    \\r\n\
    \\ENQ\EOTB\STX\STX\ETX\DC2\EOT\224\ETX\RS\US\n\
    \\f\n\
    \\EOT\EOTB\STX\ETX\DC2\EOT\225\ETX\STX \n\
    \\r\n\
    \\ENQ\EOTB\STX\ETX\EOT\DC2\EOT\225\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTB\STX\ETX\ENQ\DC2\EOT\225\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOTB\STX\ETX\SOH\DC2\EOT\225\ETX\DC2\ESC\n\
    \\r\n\
    \\ENQ\EOTB\STX\ETX\ETX\DC2\EOT\225\ETX\RS\US\n\
    \\f\n\
    \\EOT\EOTB\STX\EOT\DC2\EOT\226\ETX\STX\GS\n\
    \\r\n\
    \\ENQ\EOTB\STX\EOT\EOT\DC2\EOT\226\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTB\STX\EOT\ENQ\DC2\EOT\226\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOTB\STX\EOT\SOH\DC2\EOT\226\ETX\DC2\CAN\n\
    \\r\n\
    \\ENQ\EOTB\STX\EOT\ETX\DC2\EOT\226\ETX\ESC\FS\n\
    \\f\n\
    \\STX\EOTC\DC2\ACK\228\ETX\NUL\234\ETX\SOH\n\
    \\v\n\
    \\ETX\EOTC\SOH\DC2\EOT\228\ETX\b#\n\
    \\f\n\
    \\EOT\EOTC\STX\NUL\DC2\EOT\229\ETX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOTC\STX\NUL\EOT\DC2\EOT\229\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTC\STX\NUL\ENQ\DC2\EOT\229\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOTC\STX\NUL\SOH\DC2\EOT\229\ETX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOTC\STX\NUL\ETX\DC2\EOT\229\ETX\CAN\EM\n\
    \\f\n\
    \\EOT\EOTC\STX\SOH\DC2\EOT\230\ETX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOTC\STX\SOH\EOT\DC2\EOT\230\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTC\STX\SOH\ENQ\DC2\EOT\230\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOTC\STX\SOH\SOH\DC2\EOT\230\ETX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOTC\STX\SOH\ETX\DC2\EOT\230\ETX\CAN\EM\n\
    \\f\n\
    \\EOT\EOTC\STX\STX\DC2\EOT\231\ETX\STX \n\
    \\r\n\
    \\ENQ\EOTC\STX\STX\EOT\DC2\EOT\231\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTC\STX\STX\ENQ\DC2\EOT\231\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOTC\STX\STX\SOH\DC2\EOT\231\ETX\DC2\ESC\n\
    \\r\n\
    \\ENQ\EOTC\STX\STX\ETX\DC2\EOT\231\ETX\RS\US\n\
    \\f\n\
    \\EOT\EOTC\STX\ETX\DC2\EOT\232\ETX\STX \n\
    \\r\n\
    \\ENQ\EOTC\STX\ETX\EOT\DC2\EOT\232\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTC\STX\ETX\ENQ\DC2\EOT\232\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOTC\STX\ETX\SOH\DC2\EOT\232\ETX\DC2\ESC\n\
    \\r\n\
    \\ENQ\EOTC\STX\ETX\ETX\DC2\EOT\232\ETX\RS\US\n\
    \\f\n\
    \\EOT\EOTC\STX\EOT\DC2\EOT\233\ETX\STX\GS\n\
    \\r\n\
    \\ENQ\EOTC\STX\EOT\EOT\DC2\EOT\233\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTC\STX\EOT\ENQ\DC2\EOT\233\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOTC\STX\EOT\SOH\DC2\EOT\233\ETX\DC2\CAN\n\
    \\r\n\
    \\ENQ\EOTC\STX\EOT\ETX\DC2\EOT\233\ETX\ESC\FS\n\
    \\f\n\
    \\STX\EOTD\DC2\ACK\235\ETX\NUL\239\ETX\SOH\n\
    \\v\n\
    \\ETX\EOTD\SOH\DC2\EOT\235\ETX\b'\n\
    \\f\n\
    \\EOT\EOTD\STX\NUL\DC2\EOT\236\ETX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOTD\STX\NUL\EOT\DC2\EOT\236\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTD\STX\NUL\ENQ\DC2\EOT\236\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOTD\STX\NUL\SOH\DC2\EOT\236\ETX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOTD\STX\NUL\ETX\DC2\EOT\236\ETX\CAN\EM\n\
    \\f\n\
    \\EOT\EOTD\STX\SOH\DC2\EOT\237\ETX\STX \n\
    \\r\n\
    \\ENQ\EOTD\STX\SOH\EOT\DC2\EOT\237\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTD\STX\SOH\ENQ\DC2\EOT\237\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOTD\STX\SOH\SOH\DC2\EOT\237\ETX\DC2\ESC\n\
    \\r\n\
    \\ENQ\EOTD\STX\SOH\ETX\DC2\EOT\237\ETX\RS\US\n\
    \\f\n\
    \\EOT\EOTD\STX\STX\DC2\EOT\238\ETX\STX\GS\n\
    \\r\n\
    \\ENQ\EOTD\STX\STX\EOT\DC2\EOT\238\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTD\STX\STX\ENQ\DC2\EOT\238\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOTD\STX\STX\SOH\DC2\EOT\238\ETX\DC2\CAN\n\
    \\r\n\
    \\ENQ\EOTD\STX\STX\ETX\DC2\EOT\238\ETX\ESC\FS\n\
    \\f\n\
    \\STX\EOTE\DC2\ACK\240\ETX\NUL\245\ETX\SOH\n\
    \\v\n\
    \\ETX\EOTE\SOH\DC2\EOT\240\ETX\b'\n\
    \\f\n\
    \\EOT\EOTE\STX\NUL\DC2\EOT\241\ETX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOTE\STX\NUL\EOT\DC2\EOT\241\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTE\STX\NUL\ENQ\DC2\EOT\241\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOTE\STX\NUL\SOH\DC2\EOT\241\ETX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOTE\STX\NUL\ETX\DC2\EOT\241\ETX\CAN\EM\n\
    \\f\n\
    \\EOT\EOTE\STX\SOH\DC2\EOT\242\ETX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOTE\STX\SOH\EOT\DC2\EOT\242\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTE\STX\SOH\ENQ\DC2\EOT\242\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOTE\STX\SOH\SOH\DC2\EOT\242\ETX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOTE\STX\SOH\ETX\DC2\EOT\242\ETX\CAN\EM\n\
    \\f\n\
    \\EOT\EOTE\STX\STX\DC2\EOT\243\ETX\STX\FS\n\
    \\r\n\
    \\ENQ\EOTE\STX\STX\EOT\DC2\EOT\243\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTE\STX\STX\ENQ\DC2\EOT\243\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOTE\STX\STX\SOH\DC2\EOT\243\ETX\DC2\ETB\n\
    \\r\n\
    \\ENQ\EOTE\STX\STX\ETX\DC2\EOT\243\ETX\SUB\ESC\n\
    \\f\n\
    \\EOT\EOTE\STX\ETX\DC2\EOT\244\ETX\STX\FS\n\
    \\r\n\
    \\ENQ\EOTE\STX\ETX\EOT\DC2\EOT\244\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTE\STX\ETX\ENQ\DC2\EOT\244\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOTE\STX\ETX\SOH\DC2\EOT\244\ETX\DC2\ETB\n\
    \\r\n\
    \\ENQ\EOTE\STX\ETX\ETX\DC2\EOT\244\ETX\SUB\ESC\n\
    \\f\n\
    \\STX\EOTF\DC2\ACK\246\ETX\NUL\139\EOT\SOH\n\
    \\v\n\
    \\ETX\EOTF\SOH\DC2\EOT\246\ETX\b#\n\
    \\f\n\
    \\EOT\EOTF\STX\NUL\DC2\EOT\247\ETX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOTF\STX\NUL\EOT\DC2\EOT\247\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTF\STX\NUL\ENQ\DC2\EOT\247\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOTF\STX\NUL\SOH\DC2\EOT\247\ETX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOTF\STX\NUL\ETX\DC2\EOT\247\ETX\CAN\EM\n\
    \\f\n\
    \\EOT\EOTF\STX\SOH\DC2\EOT\248\ETX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOTF\STX\SOH\EOT\DC2\EOT\248\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTF\STX\SOH\ENQ\DC2\EOT\248\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOTF\STX\SOH\SOH\DC2\EOT\248\ETX\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOTF\STX\SOH\ETX\DC2\EOT\248\ETX\CAN\EM\n\
    \\f\n\
    \\EOT\EOTF\STX\STX\DC2\EOT\249\ETX\STX#\n\
    \\r\n\
    \\ENQ\EOTF\STX\STX\EOT\DC2\EOT\249\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTF\STX\STX\ENQ\DC2\EOT\249\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOTF\STX\STX\SOH\DC2\EOT\249\ETX\DC2\RS\n\
    \\r\n\
    \\ENQ\EOTF\STX\STX\ETX\DC2\EOT\249\ETX!\"\n\
    \\f\n\
    \\EOT\EOTF\STX\ETX\DC2\EOT\250\ETX\STX \n\
    \\r\n\
    \\ENQ\EOTF\STX\ETX\EOT\DC2\EOT\250\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTF\STX\ETX\ENQ\DC2\EOT\250\ETX\v\DLE\n\
    \\r\n\
    \\ENQ\EOTF\STX\ETX\SOH\DC2\EOT\250\ETX\DC1\ESC\n\
    \\r\n\
    \\ENQ\EOTF\STX\ETX\ETX\DC2\EOT\250\ETX\RS\US\n\
    \\f\n\
    \\EOT\EOTF\STX\EOT\DC2\EOT\251\ETX\STX!\n\
    \\r\n\
    \\ENQ\EOTF\STX\EOT\EOT\DC2\EOT\251\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTF\STX\EOT\ENQ\DC2\EOT\251\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOTF\STX\EOT\SOH\DC2\EOT\251\ETX\DC2\FS\n\
    \\r\n\
    \\ENQ\EOTF\STX\EOT\ETX\DC2\EOT\251\ETX\US \n\
    \\f\n\
    \\EOT\EOTF\STX\ENQ\DC2\EOT\252\ETX\STX\RS\n\
    \\r\n\
    \\ENQ\EOTF\STX\ENQ\EOT\DC2\EOT\252\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTF\STX\ENQ\ENQ\DC2\EOT\252\ETX\v\DLE\n\
    \\r\n\
    \\ENQ\EOTF\STX\ENQ\SOH\DC2\EOT\252\ETX\DC1\EM\n\
    \\r\n\
    \\ENQ\EOTF\STX\ENQ\ETX\DC2\EOT\252\ETX\FS\GS\n\
    \\f\n\
    \\EOT\EOTF\STX\ACK\DC2\EOT\253\ETX\STX#\n\
    \\r\n\
    \\ENQ\EOTF\STX\ACK\EOT\DC2\EOT\253\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTF\STX\ACK\ENQ\DC2\EOT\253\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOTF\STX\ACK\SOH\DC2\EOT\253\ETX\DC2\RS\n\
    \\r\n\
    \\ENQ\EOTF\STX\ACK\ETX\DC2\EOT\253\ETX!\"\n\
    \\f\n\
    \\EOT\EOTF\STX\a\DC2\EOT\254\ETX\STX \n\
    \\r\n\
    \\ENQ\EOTF\STX\a\EOT\DC2\EOT\254\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTF\STX\a\ENQ\DC2\EOT\254\ETX\v\DLE\n\
    \\r\n\
    \\ENQ\EOTF\STX\a\SOH\DC2\EOT\254\ETX\DC1\ESC\n\
    \\r\n\
    \\ENQ\EOTF\STX\a\ETX\DC2\EOT\254\ETX\RS\US\n\
    \\f\n\
    \\EOT\EOTF\STX\b\DC2\EOT\255\ETX\STX!\n\
    \\r\n\
    \\ENQ\EOTF\STX\b\EOT\DC2\EOT\255\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTF\STX\b\ENQ\DC2\EOT\255\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOTF\STX\b\SOH\DC2\EOT\255\ETX\DC2\FS\n\
    \\r\n\
    \\ENQ\EOTF\STX\b\ETX\DC2\EOT\255\ETX\US \n\
    \\f\n\
    \\EOT\EOTF\STX\t\DC2\EOT\128\EOT\STX\US\n\
    \\r\n\
    \\ENQ\EOTF\STX\t\EOT\DC2\EOT\128\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTF\STX\t\ENQ\DC2\EOT\128\EOT\v\DLE\n\
    \\r\n\
    \\ENQ\EOTF\STX\t\SOH\DC2\EOT\128\EOT\DC1\EM\n\
    \\r\n\
    \\ENQ\EOTF\STX\t\ETX\DC2\EOT\128\EOT\FS\RS\n\
    \\f\n\
    \\EOT\EOTF\STX\n\
    \\DC2\EOT\129\EOT\STX&\n\
    \\r\n\
    \\ENQ\EOTF\STX\n\
    \\EOT\DC2\EOT\129\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTF\STX\n\
    \\ENQ\DC2\EOT\129\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOTF\STX\n\
    \\SOH\DC2\EOT\129\EOT\DC2 \n\
    \\r\n\
    \\ENQ\EOTF\STX\n\
    \\ETX\DC2\EOT\129\EOT#%\n\
    \\f\n\
    \\EOT\EOTF\STX\v\DC2\EOT\130\EOT\STX#\n\
    \\r\n\
    \\ENQ\EOTF\STX\v\EOT\DC2\EOT\130\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTF\STX\v\ENQ\DC2\EOT\130\EOT\v\DLE\n\
    \\r\n\
    \\ENQ\EOTF\STX\v\SOH\DC2\EOT\130\EOT\DC1\GS\n\
    \\r\n\
    \\ENQ\EOTF\STX\v\ETX\DC2\EOT\130\EOT \"\n\
    \\f\n\
    \\EOT\EOTF\STX\f\DC2\EOT\131\EOT\STX$\n\
    \\r\n\
    \\ENQ\EOTF\STX\f\EOT\DC2\EOT\131\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTF\STX\f\ENQ\DC2\EOT\131\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOTF\STX\f\SOH\DC2\EOT\131\EOT\DC2\RS\n\
    \\r\n\
    \\ENQ\EOTF\STX\f\ETX\DC2\EOT\131\EOT!#\n\
    \\f\n\
    \\EOT\EOTF\STX\r\DC2\EOT\132\EOT\STX!\n\
    \\r\n\
    \\ENQ\EOTF\STX\r\EOT\DC2\EOT\132\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTF\STX\r\ENQ\DC2\EOT\132\EOT\v\DLE\n\
    \\r\n\
    \\ENQ\EOTF\STX\r\SOH\DC2\EOT\132\EOT\DC1\ESC\n\
    \\r\n\
    \\ENQ\EOTF\STX\r\ETX\DC2\EOT\132\EOT\RS \n\
    \\f\n\
    \\EOT\EOTF\STX\SO\DC2\EOT\133\EOT\STX\GS\n\
    \\r\n\
    \\ENQ\EOTF\STX\SO\EOT\DC2\EOT\133\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTF\STX\SO\ENQ\DC2\EOT\133\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOTF\STX\SO\SOH\DC2\EOT\133\EOT\DC2\ETB\n\
    \\r\n\
    \\ENQ\EOTF\STX\SO\ETX\DC2\EOT\133\EOT\SUB\FS\n\
    \\f\n\
    \\EOT\EOTF\STX\SI\DC2\EOT\134\EOT\STX\RS\n\
    \\r\n\
    \\ENQ\EOTF\STX\SI\EOT\DC2\EOT\134\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTF\STX\SI\ENQ\DC2\EOT\134\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOTF\STX\SI\SOH\DC2\EOT\134\EOT\DC2\CAN\n\
    \\r\n\
    \\ENQ\EOTF\STX\SI\ETX\DC2\EOT\134\EOT\ESC\GS\n\
    \\f\n\
    \\EOT\EOTF\STX\DLE\DC2\EOT\135\EOT\STX\GS\n\
    \\r\n\
    \\ENQ\EOTF\STX\DLE\EOT\DC2\EOT\135\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTF\STX\DLE\ENQ\DC2\EOT\135\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOTF\STX\DLE\SOH\DC2\EOT\135\EOT\DC2\ETB\n\
    \\r\n\
    \\ENQ\EOTF\STX\DLE\ETX\DC2\EOT\135\EOT\SUB\FS\n\
    \\f\n\
    \\EOT\EOTF\STX\DC1\DC2\EOT\136\EOT\STX\GS\n\
    \\r\n\
    \\ENQ\EOTF\STX\DC1\EOT\DC2\EOT\136\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTF\STX\DC1\ENQ\DC2\EOT\136\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOTF\STX\DC1\SOH\DC2\EOT\136\EOT\DC2\ETB\n\
    \\r\n\
    \\ENQ\EOTF\STX\DC1\ETX\DC2\EOT\136\EOT\SUB\FS\n\
    \\f\n\
    \\EOT\EOTF\STX\DC2\DC2\EOT\137\EOT\STX\FS\n\
    \\r\n\
    \\ENQ\EOTF\STX\DC2\EOT\DC2\EOT\137\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTF\STX\DC2\ENQ\DC2\EOT\137\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOTF\STX\DC2\SOH\DC2\EOT\137\EOT\DC2\SYN\n\
    \\r\n\
    \\ENQ\EOTF\STX\DC2\ETX\DC2\EOT\137\EOT\EM\ESC\n\
    \\f\n\
    \\EOT\EOTF\STX\DC3\DC2\EOT\138\EOT\STX\SUB\n\
    \\r\n\
    \\ENQ\EOTF\STX\DC3\EOT\DC2\EOT\138\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTF\STX\DC3\ENQ\DC2\EOT\138\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOTF\STX\DC3\SOH\DC2\EOT\138\EOT\DC2\DC4\n\
    \\r\n\
    \\ENQ\EOTF\STX\DC3\ETX\DC2\EOT\138\EOT\ETB\EM\n\
    \\f\n\
    \\STX\EOTG\DC2\ACK\140\EOT\NUL\146\EOT\SOH\n\
    \\v\n\
    \\ETX\EOTG\SOH\DC2\EOT\140\EOT\b%\n\
    \\f\n\
    \\EOT\EOTG\STX\NUL\DC2\EOT\141\EOT\STX\SUB\n\
    \\r\n\
    \\ENQ\EOTG\STX\NUL\EOT\DC2\EOT\141\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTG\STX\NUL\ENQ\DC2\EOT\141\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOTG\STX\NUL\SOH\DC2\EOT\141\EOT\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOTG\STX\NUL\ETX\DC2\EOT\141\EOT\CAN\EM\n\
    \\f\n\
    \\EOT\EOTG\STX\SOH\DC2\EOT\142\EOT\STX\SUB\n\
    \\r\n\
    \\ENQ\EOTG\STX\SOH\EOT\DC2\EOT\142\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTG\STX\SOH\ENQ\DC2\EOT\142\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOTG\STX\SOH\SOH\DC2\EOT\142\EOT\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOTG\STX\SOH\ETX\DC2\EOT\142\EOT\CAN\EM\n\
    \\f\n\
    \\EOT\EOTG\STX\STX\DC2\EOT\143\EOT\STX\"\n\
    \\r\n\
    \\ENQ\EOTG\STX\STX\EOT\DC2\EOT\143\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTG\STX\STX\ENQ\DC2\EOT\143\EOT\v\DLE\n\
    \\r\n\
    \\ENQ\EOTG\STX\STX\SOH\DC2\EOT\143\EOT\DC1\GS\n\
    \\r\n\
    \\ENQ\EOTG\STX\STX\ETX\DC2\EOT\143\EOT !\n\
    \\f\n\
    \\EOT\EOTG\STX\ETX\DC2\EOT\144\EOT\STX#\n\
    \\r\n\
    \\ENQ\EOTG\STX\ETX\EOT\DC2\EOT\144\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTG\STX\ETX\ENQ\DC2\EOT\144\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOTG\STX\ETX\SOH\DC2\EOT\144\EOT\DC2\RS\n\
    \\r\n\
    \\ENQ\EOTG\STX\ETX\ETX\DC2\EOT\144\EOT!\"\n\
    \\f\n\
    \\EOT\EOTG\STX\EOT\DC2\EOT\145\EOT\STX \n\
    \\r\n\
    \\ENQ\EOTG\STX\EOT\EOT\DC2\EOT\145\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTG\STX\EOT\ENQ\DC2\EOT\145\EOT\v\DLE\n\
    \\r\n\
    \\ENQ\EOTG\STX\EOT\SOH\DC2\EOT\145\EOT\DC1\ESC\n\
    \\r\n\
    \\ENQ\EOTG\STX\EOT\ETX\DC2\EOT\145\EOT\RS\US\n\
    \\f\n\
    \\STX\EOTH\DC2\ACK\147\EOT\NUL\153\EOT\SOH\n\
    \\v\n\
    \\ETX\EOTH\SOH\DC2\EOT\147\EOT\b\"\n\
    \\f\n\
    \\EOT\EOTH\STX\NUL\DC2\EOT\148\EOT\STX\SUB\n\
    \\r\n\
    \\ENQ\EOTH\STX\NUL\EOT\DC2\EOT\148\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTH\STX\NUL\ENQ\DC2\EOT\148\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOTH\STX\NUL\SOH\DC2\EOT\148\EOT\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOTH\STX\NUL\ETX\DC2\EOT\148\EOT\CAN\EM\n\
    \\f\n\
    \\EOT\EOTH\STX\SOH\DC2\EOT\149\EOT\STX\SUB\n\
    \\r\n\
    \\ENQ\EOTH\STX\SOH\EOT\DC2\EOT\149\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTH\STX\SOH\ENQ\DC2\EOT\149\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOTH\STX\SOH\SOH\DC2\EOT\149\EOT\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOTH\STX\SOH\ETX\DC2\EOT\149\EOT\CAN\EM\n\
    \\f\n\
    \\EOT\EOTH\STX\STX\DC2\EOT\150\EOT\STX\"\n\
    \\r\n\
    \\ENQ\EOTH\STX\STX\EOT\DC2\EOT\150\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTH\STX\STX\ENQ\DC2\EOT\150\EOT\v\DLE\n\
    \\r\n\
    \\ENQ\EOTH\STX\STX\SOH\DC2\EOT\150\EOT\DC1\GS\n\
    \\r\n\
    \\ENQ\EOTH\STX\STX\ETX\DC2\EOT\150\EOT !\n\
    \\f\n\
    \\EOT\EOTH\STX\ETX\DC2\EOT\151\EOT\STX#\n\
    \\r\n\
    \\ENQ\EOTH\STX\ETX\EOT\DC2\EOT\151\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTH\STX\ETX\ENQ\DC2\EOT\151\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOTH\STX\ETX\SOH\DC2\EOT\151\EOT\DC2\RS\n\
    \\r\n\
    \\ENQ\EOTH\STX\ETX\ETX\DC2\EOT\151\EOT!\"\n\
    \\f\n\
    \\EOT\EOTH\STX\EOT\DC2\EOT\152\EOT\STX \n\
    \\r\n\
    \\ENQ\EOTH\STX\EOT\EOT\DC2\EOT\152\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTH\STX\EOT\ENQ\DC2\EOT\152\EOT\v\DLE\n\
    \\r\n\
    \\ENQ\EOTH\STX\EOT\SOH\DC2\EOT\152\EOT\DC1\ESC\n\
    \\r\n\
    \\ENQ\EOTH\STX\EOT\ETX\DC2\EOT\152\EOT\RS\US\n\
    \\f\n\
    \\STX\EOTI\DC2\ACK\154\EOT\NUL\165\EOT\SOH\n\
    \\v\n\
    \\ETX\EOTI\SOH\DC2\EOT\154\EOT\b&\n\
    \\f\n\
    \\EOT\EOTI\STX\NUL\DC2\EOT\155\EOT\STX\SUB\n\
    \\r\n\
    \\ENQ\EOTI\STX\NUL\EOT\DC2\EOT\155\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTI\STX\NUL\ENQ\DC2\EOT\155\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOTI\STX\NUL\SOH\DC2\EOT\155\EOT\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOTI\STX\NUL\ETX\DC2\EOT\155\EOT\CAN\EM\n\
    \\f\n\
    \\EOT\EOTI\STX\SOH\DC2\EOT\156\EOT\STX\SUB\n\
    \\r\n\
    \\ENQ\EOTI\STX\SOH\EOT\DC2\EOT\156\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTI\STX\SOH\ENQ\DC2\EOT\156\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOTI\STX\SOH\SOH\DC2\EOT\156\EOT\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOTI\STX\SOH\ETX\DC2\EOT\156\EOT\CAN\EM\n\
    \\f\n\
    \\EOT\EOTI\STX\STX\DC2\EOT\157\EOT\STX#\n\
    \\r\n\
    \\ENQ\EOTI\STX\STX\EOT\DC2\EOT\157\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTI\STX\STX\ENQ\DC2\EOT\157\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOTI\STX\STX\SOH\DC2\EOT\157\EOT\DC2\RS\n\
    \\r\n\
    \\ENQ\EOTI\STX\STX\ETX\DC2\EOT\157\EOT!\"\n\
    \\f\n\
    \\EOT\EOTI\STX\ETX\DC2\EOT\158\EOT\STX \n\
    \\r\n\
    \\ENQ\EOTI\STX\ETX\EOT\DC2\EOT\158\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTI\STX\ETX\ENQ\DC2\EOT\158\EOT\v\DLE\n\
    \\r\n\
    \\ENQ\EOTI\STX\ETX\SOH\DC2\EOT\158\EOT\DC1\ESC\n\
    \\r\n\
    \\ENQ\EOTI\STX\ETX\ETX\DC2\EOT\158\EOT\RS\US\n\
    \\f\n\
    \\EOT\EOTI\STX\EOT\DC2\EOT\159\EOT\STX!\n\
    \\r\n\
    \\ENQ\EOTI\STX\EOT\EOT\DC2\EOT\159\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTI\STX\EOT\ENQ\DC2\EOT\159\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOTI\STX\EOT\SOH\DC2\EOT\159\EOT\DC2\FS\n\
    \\r\n\
    \\ENQ\EOTI\STX\EOT\ETX\DC2\EOT\159\EOT\US \n\
    \\f\n\
    \\EOT\EOTI\STX\ENQ\DC2\EOT\160\EOT\STX\RS\n\
    \\r\n\
    \\ENQ\EOTI\STX\ENQ\EOT\DC2\EOT\160\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTI\STX\ENQ\ENQ\DC2\EOT\160\EOT\v\DLE\n\
    \\r\n\
    \\ENQ\EOTI\STX\ENQ\SOH\DC2\EOT\160\EOT\DC1\EM\n\
    \\r\n\
    \\ENQ\EOTI\STX\ENQ\ETX\DC2\EOT\160\EOT\FS\GS\n\
    \\f\n\
    \\EOT\EOTI\STX\ACK\DC2\EOT\161\EOT\STX%\n\
    \\r\n\
    \\ENQ\EOTI\STX\ACK\EOT\DC2\EOT\161\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTI\STX\ACK\ENQ\DC2\EOT\161\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOTI\STX\ACK\SOH\DC2\EOT\161\EOT\DC2 \n\
    \\r\n\
    \\ENQ\EOTI\STX\ACK\ETX\DC2\EOT\161\EOT#$\n\
    \\f\n\
    \\EOT\EOTI\STX\a\DC2\EOT\162\EOT\STX\"\n\
    \\r\n\
    \\ENQ\EOTI\STX\a\EOT\DC2\EOT\162\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTI\STX\a\ENQ\DC2\EOT\162\EOT\v\DLE\n\
    \\r\n\
    \\ENQ\EOTI\STX\a\SOH\DC2\EOT\162\EOT\DC1\GS\n\
    \\r\n\
    \\ENQ\EOTI\STX\a\ETX\DC2\EOT\162\EOT !\n\
    \\f\n\
    \\EOT\EOTI\STX\b\DC2\EOT\163\EOT\STX#\n\
    \\r\n\
    \\ENQ\EOTI\STX\b\EOT\DC2\EOT\163\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTI\STX\b\ENQ\DC2\EOT\163\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOTI\STX\b\SOH\DC2\EOT\163\EOT\DC2\RS\n\
    \\r\n\
    \\ENQ\EOTI\STX\b\ETX\DC2\EOT\163\EOT!\"\n\
    \\f\n\
    \\EOT\EOTI\STX\t\DC2\EOT\164\EOT\STX!\n\
    \\r\n\
    \\ENQ\EOTI\STX\t\EOT\DC2\EOT\164\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTI\STX\t\ENQ\DC2\EOT\164\EOT\v\DLE\n\
    \\r\n\
    \\ENQ\EOTI\STX\t\SOH\DC2\EOT\164\EOT\DC1\ESC\n\
    \\r\n\
    \\ENQ\EOTI\STX\t\ETX\DC2\EOT\164\EOT\RS \n\
    \\f\n\
    \\STX\EOTJ\DC2\ACK\166\EOT\NUL\173\EOT\SOH\n\
    \\v\n\
    \\ETX\EOTJ\SOH\DC2\EOT\166\EOT\b+\n\
    \\f\n\
    \\EOT\EOTJ\STX\NUL\DC2\EOT\167\EOT\STX\SUB\n\
    \\r\n\
    \\ENQ\EOTJ\STX\NUL\EOT\DC2\EOT\167\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTJ\STX\NUL\ENQ\DC2\EOT\167\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOTJ\STX\NUL\SOH\DC2\EOT\167\EOT\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOTJ\STX\NUL\ETX\DC2\EOT\167\EOT\CAN\EM\n\
    \\f\n\
    \\EOT\EOTJ\STX\SOH\DC2\EOT\168\EOT\STX\SUB\n\
    \\r\n\
    \\ENQ\EOTJ\STX\SOH\EOT\DC2\EOT\168\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTJ\STX\SOH\ENQ\DC2\EOT\168\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOTJ\STX\SOH\SOH\DC2\EOT\168\EOT\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOTJ\STX\SOH\ETX\DC2\EOT\168\EOT\CAN\EM\n\
    \\f\n\
    \\EOT\EOTJ\STX\STX\DC2\EOT\169\EOT\STX\US\n\
    \\r\n\
    \\ENQ\EOTJ\STX\STX\EOT\DC2\EOT\169\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTJ\STX\STX\ENQ\DC2\EOT\169\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOTJ\STX\STX\SOH\DC2\EOT\169\EOT\DC2\SUB\n\
    \\r\n\
    \\ENQ\EOTJ\STX\STX\ETX\DC2\EOT\169\EOT\GS\RS\n\
    \\f\n\
    \\EOT\EOTJ\STX\ETX\DC2\EOT\170\EOT\STX\SUB\n\
    \\r\n\
    \\ENQ\EOTJ\STX\ETX\EOT\DC2\EOT\170\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTJ\STX\ETX\ENQ\DC2\EOT\170\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOTJ\STX\ETX\SOH\DC2\EOT\170\EOT\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOTJ\STX\ETX\ETX\DC2\EOT\170\EOT\CAN\EM\n\
    \\f\n\
    \\EOT\EOTJ\STX\EOT\DC2\EOT\171\EOT\STX\SUB\n\
    \\r\n\
    \\ENQ\EOTJ\STX\EOT\EOT\DC2\EOT\171\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTJ\STX\EOT\ENQ\DC2\EOT\171\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOTJ\STX\EOT\SOH\DC2\EOT\171\EOT\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOTJ\STX\EOT\ETX\DC2\EOT\171\EOT\CAN\EM\n\
    \\f\n\
    \\EOT\EOTJ\STX\ENQ\DC2\EOT\172\EOT\STX\ESC\n\
    \\r\n\
    \\ENQ\EOTJ\STX\ENQ\EOT\DC2\EOT\172\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTJ\STX\ENQ\ENQ\DC2\EOT\172\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOTJ\STX\ENQ\SOH\DC2\EOT\172\EOT\DC2\SYN\n\
    \\r\n\
    \\ENQ\EOTJ\STX\ENQ\ETX\DC2\EOT\172\EOT\EM\SUB\n\
    \\f\n\
    \\STX\EOTK\DC2\ACK\174\EOT\NUL\180\EOT\SOH\n\
    \\v\n\
    \\ETX\EOTK\SOH\DC2\EOT\174\EOT\b \n\
    \\f\n\
    \\EOT\EOTK\STX\NUL\DC2\EOT\175\EOT\STX\SUB\n\
    \\r\n\
    \\ENQ\EOTK\STX\NUL\EOT\DC2\EOT\175\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTK\STX\NUL\ENQ\DC2\EOT\175\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOTK\STX\NUL\SOH\DC2\EOT\175\EOT\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOTK\STX\NUL\ETX\DC2\EOT\175\EOT\CAN\EM\n\
    \\f\n\
    \\EOT\EOTK\STX\SOH\DC2\EOT\176\EOT\STX\SUB\n\
    \\r\n\
    \\ENQ\EOTK\STX\SOH\EOT\DC2\EOT\176\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTK\STX\SOH\ENQ\DC2\EOT\176\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOTK\STX\SOH\SOH\DC2\EOT\176\EOT\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOTK\STX\SOH\ETX\DC2\EOT\176\EOT\CAN\EM\n\
    \\f\n\
    \\EOT\EOTK\STX\STX\DC2\EOT\177\EOT\STX\FS\n\
    \\r\n\
    \\ENQ\EOTK\STX\STX\EOT\DC2\EOT\177\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTK\STX\STX\ENQ\DC2\EOT\177\EOT\v\DLE\n\
    \\r\n\
    \\ENQ\EOTK\STX\STX\SOH\DC2\EOT\177\EOT\DC1\ETB\n\
    \\r\n\
    \\ENQ\EOTK\STX\STX\ETX\DC2\EOT\177\EOT\SUB\ESC\n\
    \\f\n\
    \\EOT\EOTK\STX\ETX\DC2\EOT\178\EOT\STX\EM\n\
    \\r\n\
    \\ENQ\EOTK\STX\ETX\EOT\DC2\EOT\178\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTK\STX\ETX\ENQ\DC2\EOT\178\EOT\v\DLE\n\
    \\r\n\
    \\ENQ\EOTK\STX\ETX\SOH\DC2\EOT\178\EOT\DC1\DC4\n\
    \\r\n\
    \\ENQ\EOTK\STX\ETX\ETX\DC2\EOT\178\EOT\ETB\CAN\n\
    \\f\n\
    \\EOT\EOTK\STX\EOT\DC2\EOT\179\EOT\STX\SUB\n\
    \\r\n\
    \\ENQ\EOTK\STX\EOT\EOT\DC2\EOT\179\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTK\STX\EOT\ENQ\DC2\EOT\179\EOT\v\DLE\n\
    \\r\n\
    \\ENQ\EOTK\STX\EOT\SOH\DC2\EOT\179\EOT\DC1\NAK\n\
    \\r\n\
    \\ENQ\EOTK\STX\EOT\ETX\DC2\EOT\179\EOT\CAN\EM\n\
    \\f\n\
    \\STX\EOTL\DC2\ACK\181\EOT\NUL\185\EOT\SOH\n\
    \\v\n\
    \\ETX\EOTL\SOH\DC2\EOT\181\EOT\b*\n\
    \\f\n\
    \\EOT\EOTL\STX\NUL\DC2\EOT\182\EOT\STX\SUB\n\
    \\r\n\
    \\ENQ\EOTL\STX\NUL\EOT\DC2\EOT\182\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTL\STX\NUL\ENQ\DC2\EOT\182\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOTL\STX\NUL\SOH\DC2\EOT\182\EOT\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOTL\STX\NUL\ETX\DC2\EOT\182\EOT\CAN\EM\n\
    \\f\n\
    \\EOT\EOTL\STX\SOH\DC2\EOT\183\EOT\STX\FS\n\
    \\r\n\
    \\ENQ\EOTL\STX\SOH\EOT\DC2\EOT\183\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTL\STX\SOH\ENQ\DC2\EOT\183\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOTL\STX\SOH\SOH\DC2\EOT\183\EOT\DC2\ETB\n\
    \\r\n\
    \\ENQ\EOTL\STX\SOH\ETX\DC2\EOT\183\EOT\SUB\ESC\n\
    \\f\n\
    \\EOT\EOTL\STX\STX\DC2\EOT\184\EOT\STX\US\n\
    \\r\n\
    \\ENQ\EOTL\STX\STX\EOT\DC2\EOT\184\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTL\STX\STX\ENQ\DC2\EOT\184\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOTL\STX\STX\SOH\DC2\EOT\184\EOT\DC2\SUB\n\
    \\r\n\
    \\ENQ\EOTL\STX\STX\ETX\DC2\EOT\184\EOT\GS\RS\n\
    \\f\n\
    \\STX\EOTM\DC2\ACK\186\EOT\NUL\190\EOT\SOH\n\
    \\v\n\
    \\ETX\EOTM\SOH\DC2\EOT\186\EOT\b\US\n\
    \\f\n\
    \\EOT\EOTM\STX\NUL\DC2\EOT\187\EOT\STX\SUB\n\
    \\r\n\
    \\ENQ\EOTM\STX\NUL\EOT\DC2\EOT\187\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTM\STX\NUL\ENQ\DC2\EOT\187\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOTM\STX\NUL\SOH\DC2\EOT\187\EOT\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOTM\STX\NUL\ETX\DC2\EOT\187\EOT\CAN\EM\n\
    \\f\n\
    \\EOT\EOTM\STX\SOH\DC2\EOT\188\EOT\STX\SUB\n\
    \\r\n\
    \\ENQ\EOTM\STX\SOH\EOT\DC2\EOT\188\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTM\STX\SOH\ENQ\DC2\EOT\188\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOTM\STX\SOH\SOH\DC2\EOT\188\EOT\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOTM\STX\SOH\ETX\DC2\EOT\188\EOT\CAN\EM\n\
    \\f\n\
    \\EOT\EOTM\STX\STX\DC2\EOT\189\EOT\STX\FS\n\
    \\r\n\
    \\ENQ\EOTM\STX\STX\EOT\DC2\EOT\189\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTM\STX\STX\ENQ\DC2\EOT\189\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOTM\STX\STX\SOH\DC2\EOT\189\EOT\DC2\ETB\n\
    \\r\n\
    \\ENQ\EOTM\STX\STX\ETX\DC2\EOT\189\EOT\SUB\ESC\n\
    \\f\n\
    \\STX\EOTN\DC2\ACK\191\EOT\NUL\195\EOT\SOH\n\
    \\v\n\
    \\ETX\EOTN\SOH\DC2\EOT\191\EOT\b\"\n\
    \\f\n\
    \\EOT\EOTN\STX\NUL\DC2\EOT\192\EOT\STX\SUB\n\
    \\r\n\
    \\ENQ\EOTN\STX\NUL\EOT\DC2\EOT\192\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTN\STX\NUL\ENQ\DC2\EOT\192\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOTN\STX\NUL\SOH\DC2\EOT\192\EOT\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOTN\STX\NUL\ETX\DC2\EOT\192\EOT\CAN\EM\n\
    \\f\n\
    \\EOT\EOTN\STX\SOH\DC2\EOT\193\EOT\STX\SUB\n\
    \\r\n\
    \\ENQ\EOTN\STX\SOH\EOT\DC2\EOT\193\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTN\STX\SOH\ENQ\DC2\EOT\193\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOTN\STX\SOH\SOH\DC2\EOT\193\EOT\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOTN\STX\SOH\ETX\DC2\EOT\193\EOT\CAN\EM\n\
    \\f\n\
    \\EOT\EOTN\STX\STX\DC2\EOT\194\EOT\STX\FS\n\
    \\r\n\
    \\ENQ\EOTN\STX\STX\EOT\DC2\EOT\194\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTN\STX\STX\ENQ\DC2\EOT\194\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOTN\STX\STX\SOH\DC2\EOT\194\EOT\DC2\ETB\n\
    \\r\n\
    \\ENQ\EOTN\STX\STX\ETX\DC2\EOT\194\EOT\SUB\ESC\n\
    \\f\n\
    \\STX\EOTO\DC2\ACK\196\EOT\NUL\208\EOT\SOH\n\
    \\v\n\
    \\ETX\EOTO\SOH\DC2\EOT\196\EOT\b#\n\
    \\f\n\
    \\EOT\EOTO\STX\NUL\DC2\EOT\197\EOT\STX\SUB\n\
    \\r\n\
    \\ENQ\EOTO\STX\NUL\EOT\DC2\EOT\197\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTO\STX\NUL\ENQ\DC2\EOT\197\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOTO\STX\NUL\SOH\DC2\EOT\197\EOT\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOTO\STX\NUL\ETX\DC2\EOT\197\EOT\CAN\EM\n\
    \\f\n\
    \\EOT\EOTO\STX\SOH\DC2\EOT\198\EOT\STX\SUB\n\
    \\r\n\
    \\ENQ\EOTO\STX\SOH\EOT\DC2\EOT\198\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTO\STX\SOH\ENQ\DC2\EOT\198\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOTO\STX\SOH\SOH\DC2\EOT\198\EOT\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOTO\STX\SOH\ETX\DC2\EOT\198\EOT\CAN\EM\n\
    \\f\n\
    \\EOT\EOTO\STX\STX\DC2\EOT\199\EOT\STX\ESC\n\
    \\r\n\
    \\ENQ\EOTO\STX\STX\EOT\DC2\EOT\199\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTO\STX\STX\ENQ\DC2\EOT\199\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOTO\STX\STX\SOH\DC2\EOT\199\EOT\DC2\SYN\n\
    \\r\n\
    \\ENQ\EOTO\STX\STX\ETX\DC2\EOT\199\EOT\EM\SUB\n\
    \\f\n\
    \\EOT\EOTO\STX\ETX\DC2\EOT\200\EOT\STX\EM\n\
    \\r\n\
    \\ENQ\EOTO\STX\ETX\EOT\DC2\EOT\200\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTO\STX\ETX\ENQ\DC2\EOT\200\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOTO\STX\ETX\SOH\DC2\EOT\200\EOT\DC2\DC4\n\
    \\r\n\
    \\ENQ\EOTO\STX\ETX\ETX\DC2\EOT\200\EOT\ETB\CAN\n\
    \\f\n\
    \\EOT\EOTO\STX\EOT\DC2\EOT\201\EOT\STX\GS\n\
    \\r\n\
    \\ENQ\EOTO\STX\EOT\EOT\DC2\EOT\201\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTO\STX\EOT\ENQ\DC2\EOT\201\EOT\v\DLE\n\
    \\r\n\
    \\ENQ\EOTO\STX\EOT\SOH\DC2\EOT\201\EOT\DC1\CAN\n\
    \\r\n\
    \\ENQ\EOTO\STX\EOT\ETX\DC2\EOT\201\EOT\ESC\FS\n\
    \\f\n\
    \\EOT\EOTO\STX\ENQ\DC2\EOT\202\EOT\STX\RS\n\
    \\r\n\
    \\ENQ\EOTO\STX\ENQ\EOT\DC2\EOT\202\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTO\STX\ENQ\ENQ\DC2\EOT\202\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOTO\STX\ENQ\SOH\DC2\EOT\202\EOT\DC2\EM\n\
    \\r\n\
    \\ENQ\EOTO\STX\ENQ\ETX\DC2\EOT\202\EOT\FS\GS\n\
    \\f\n\
    \\EOT\EOTO\STX\ACK\DC2\EOT\203\EOT\STX\RS\n\
    \\r\n\
    \\ENQ\EOTO\STX\ACK\EOT\DC2\EOT\203\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTO\STX\ACK\ENQ\DC2\EOT\203\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOTO\STX\ACK\SOH\DC2\EOT\203\EOT\DC2\EM\n\
    \\r\n\
    \\ENQ\EOTO\STX\ACK\ETX\DC2\EOT\203\EOT\FS\GS\n\
    \\f\n\
    \\EOT\EOTO\STX\a\DC2\EOT\204\EOT\STX\GS\n\
    \\r\n\
    \\ENQ\EOTO\STX\a\EOT\DC2\EOT\204\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTO\STX\a\ENQ\DC2\EOT\204\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOTO\STX\a\SOH\DC2\EOT\204\EOT\DC2\CAN\n\
    \\r\n\
    \\ENQ\EOTO\STX\a\ETX\DC2\EOT\204\EOT\ESC\FS\n\
    \\f\n\
    \\EOT\EOTO\STX\b\DC2\EOT\205\EOT\STX\RS\n\
    \\r\n\
    \\ENQ\EOTO\STX\b\EOT\DC2\EOT\205\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTO\STX\b\ENQ\DC2\EOT\205\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOTO\STX\b\SOH\DC2\EOT\205\EOT\DC2\EM\n\
    \\r\n\
    \\ENQ\EOTO\STX\b\ETX\DC2\EOT\205\EOT\FS\GS\n\
    \\f\n\
    \\EOT\EOTO\STX\t\DC2\EOT\206\EOT\STX\US\n\
    \\r\n\
    \\ENQ\EOTO\STX\t\EOT\DC2\EOT\206\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTO\STX\t\ENQ\DC2\EOT\206\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOTO\STX\t\SOH\DC2\EOT\206\EOT\DC2\EM\n\
    \\r\n\
    \\ENQ\EOTO\STX\t\ETX\DC2\EOT\206\EOT\FS\RS\n\
    \\f\n\
    \\EOT\EOTO\STX\n\
    \\DC2\EOT\207\EOT\STX\US\n\
    \\r\n\
    \\ENQ\EOTO\STX\n\
    \\EOT\DC2\EOT\207\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTO\STX\n\
    \\ENQ\DC2\EOT\207\EOT\v\DLE\n\
    \\r\n\
    \\ENQ\EOTO\STX\n\
    \\SOH\DC2\EOT\207\EOT\DC1\EM\n\
    \\r\n\
    \\ENQ\EOTO\STX\n\
    \\ETX\DC2\EOT\207\EOT\FS\RS\n\
    \\f\n\
    \\STX\EOTP\DC2\ACK\209\EOT\NUL\220\EOT\SOH\n\
    \\v\n\
    \\ETX\EOTP\SOH\DC2\EOT\209\EOT\b$\n\
    \\f\n\
    \\EOT\EOTP\STX\NUL\DC2\EOT\210\EOT\STX\SUB\n\
    \\r\n\
    \\ENQ\EOTP\STX\NUL\EOT\DC2\EOT\210\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTP\STX\NUL\ENQ\DC2\EOT\210\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOTP\STX\NUL\SOH\DC2\EOT\210\EOT\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOTP\STX\NUL\ETX\DC2\EOT\210\EOT\CAN\EM\n\
    \\f\n\
    \\EOT\EOTP\STX\SOH\DC2\EOT\211\EOT\STX\SUB\n\
    \\r\n\
    \\ENQ\EOTP\STX\SOH\EOT\DC2\EOT\211\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTP\STX\SOH\ENQ\DC2\EOT\211\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOTP\STX\SOH\SOH\DC2\EOT\211\EOT\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOTP\STX\SOH\ETX\DC2\EOT\211\EOT\CAN\EM\n\
    \\f\n\
    \\EOT\EOTP\STX\STX\DC2\EOT\212\EOT\STX\SUB\n\
    \\r\n\
    \\ENQ\EOTP\STX\STX\EOT\DC2\EOT\212\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTP\STX\STX\ENQ\DC2\EOT\212\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOTP\STX\STX\SOH\DC2\EOT\212\EOT\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOTP\STX\STX\ETX\DC2\EOT\212\EOT\CAN\EM\n\
    \\f\n\
    \\EOT\EOTP\STX\ETX\DC2\EOT\213\EOT\STX\RS\n\
    \\r\n\
    \\ENQ\EOTP\STX\ETX\EOT\DC2\EOT\213\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTP\STX\ETX\ENQ\DC2\EOT\213\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOTP\STX\ETX\SOH\DC2\EOT\213\EOT\DC2\EM\n\
    \\r\n\
    \\ENQ\EOTP\STX\ETX\ETX\DC2\EOT\213\EOT\FS\GS\n\
    \\f\n\
    \\EOT\EOTP\STX\EOT\DC2\EOT\214\EOT\STX\FS\n\
    \\r\n\
    \\ENQ\EOTP\STX\EOT\EOT\DC2\EOT\214\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTP\STX\EOT\ENQ\DC2\EOT\214\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOTP\STX\EOT\SOH\DC2\EOT\214\EOT\DC2\ETB\n\
    \\r\n\
    \\ENQ\EOTP\STX\EOT\ETX\DC2\EOT\214\EOT\SUB\ESC\n\
    \\f\n\
    \\EOT\EOTP\STX\ENQ\DC2\EOT\215\EOT\STX\GS\n\
    \\r\n\
    \\ENQ\EOTP\STX\ENQ\EOT\DC2\EOT\215\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTP\STX\ENQ\ENQ\DC2\EOT\215\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOTP\STX\ENQ\SOH\DC2\EOT\215\EOT\DC2\CAN\n\
    \\r\n\
    \\ENQ\EOTP\STX\ENQ\ETX\DC2\EOT\215\EOT\ESC\FS\n\
    \\f\n\
    \\EOT\EOTP\STX\ACK\DC2\EOT\216\EOT\STX\ESC\n\
    \\r\n\
    \\ENQ\EOTP\STX\ACK\EOT\DC2\EOT\216\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTP\STX\ACK\ENQ\DC2\EOT\216\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOTP\STX\ACK\SOH\DC2\EOT\216\EOT\DC2\SYN\n\
    \\r\n\
    \\ENQ\EOTP\STX\ACK\ETX\DC2\EOT\216\EOT\EM\SUB\n\
    \\f\n\
    \\EOT\EOTP\STX\a\DC2\EOT\217\EOT\STX\FS\n\
    \\r\n\
    \\ENQ\EOTP\STX\a\EOT\DC2\EOT\217\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTP\STX\a\ENQ\DC2\EOT\217\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOTP\STX\a\SOH\DC2\EOT\217\EOT\DC2\ETB\n\
    \\r\n\
    \\ENQ\EOTP\STX\a\ETX\DC2\EOT\217\EOT\SUB\ESC\n\
    \\f\n\
    \\EOT\EOTP\STX\b\DC2\EOT\218\EOT\STX\GS\n\
    \\r\n\
    \\ENQ\EOTP\STX\b\EOT\DC2\EOT\218\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTP\STX\b\ENQ\DC2\EOT\218\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOTP\STX\b\SOH\DC2\EOT\218\EOT\DC2\CAN\n\
    \\r\n\
    \\ENQ\EOTP\STX\b\ETX\DC2\EOT\218\EOT\ESC\FS\n\
    \\f\n\
    \\EOT\EOTP\STX\t\DC2\EOT\219\EOT\STX\GS\n\
    \\r\n\
    \\ENQ\EOTP\STX\t\EOT\DC2\EOT\219\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTP\STX\t\ENQ\DC2\EOT\219\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOTP\STX\t\SOH\DC2\EOT\219\EOT\DC2\ETB\n\
    \\r\n\
    \\ENQ\EOTP\STX\t\ETX\DC2\EOT\219\EOT\SUB\FS\n\
    \\f\n\
    \\STX\EOTQ\DC2\ACK\221\EOT\NUL\225\EOT\SOH\n\
    \\v\n\
    \\ETX\EOTQ\SOH\DC2\EOT\221\EOT\b#\n\
    \\f\n\
    \\EOT\EOTQ\STX\NUL\DC2\EOT\222\EOT\STX\SUB\n\
    \\r\n\
    \\ENQ\EOTQ\STX\NUL\EOT\DC2\EOT\222\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTQ\STX\NUL\ENQ\DC2\EOT\222\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOTQ\STX\NUL\SOH\DC2\EOT\222\EOT\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOTQ\STX\NUL\ETX\DC2\EOT\222\EOT\CAN\EM\n\
    \\f\n\
    \\EOT\EOTQ\STX\SOH\DC2\EOT\223\EOT\STX\SUB\n\
    \\r\n\
    \\ENQ\EOTQ\STX\SOH\EOT\DC2\EOT\223\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTQ\STX\SOH\ENQ\DC2\EOT\223\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOTQ\STX\SOH\SOH\DC2\EOT\223\EOT\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOTQ\STX\SOH\ETX\DC2\EOT\223\EOT\CAN\EM\n\
    \\f\n\
    \\EOT\EOTQ\STX\STX\DC2\EOT\224\EOT\STX\ESC\n\
    \\r\n\
    \\ENQ\EOTQ\STX\STX\EOT\DC2\EOT\224\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTQ\STX\STX\ENQ\DC2\EOT\224\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOTQ\STX\STX\SOH\DC2\EOT\224\EOT\DC2\SYN\n\
    \\r\n\
    \\ENQ\EOTQ\STX\STX\ETX\DC2\EOT\224\EOT\EM\SUB\n\
    \\f\n\
    \\STX\EOTR\DC2\ACK\226\EOT\NUL\229\EOT\SOH\n\
    \\v\n\
    \\ETX\EOTR\SOH\DC2\EOT\226\EOT\b\GS\n\
    \\f\n\
    \\EOT\EOTR\STX\NUL\DC2\EOT\227\EOT\STX\SUB\n\
    \\r\n\
    \\ENQ\EOTR\STX\NUL\EOT\DC2\EOT\227\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTR\STX\NUL\ENQ\DC2\EOT\227\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOTR\STX\NUL\SOH\DC2\EOT\227\EOT\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOTR\STX\NUL\ETX\DC2\EOT\227\EOT\CAN\EM\n\
    \\f\n\
    \\EOT\EOTR\STX\SOH\DC2\EOT\228\EOT\STX\SUB\n\
    \\r\n\
    \\ENQ\EOTR\STX\SOH\EOT\DC2\EOT\228\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTR\STX\SOH\ENQ\DC2\EOT\228\EOT\v\DLE\n\
    \\r\n\
    \\ENQ\EOTR\STX\SOH\SOH\DC2\EOT\228\EOT\DC1\NAK\n\
    \\r\n\
    \\ENQ\EOTR\STX\SOH\ETX\DC2\EOT\228\EOT\CAN\EM\n\
    \\f\n\
    \\STX\EOTS\DC2\ACK\230\EOT\NUL\236\EOT\SOH\n\
    \\v\n\
    \\ETX\EOTS\SOH\DC2\EOT\230\EOT\b\"\n\
    \\f\n\
    \\EOT\EOTS\STX\NUL\DC2\EOT\231\EOT\STX\US\n\
    \\r\n\
    \\ENQ\EOTS\STX\NUL\EOT\DC2\EOT\231\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTS\STX\NUL\ENQ\DC2\EOT\231\EOT\v\DLE\n\
    \\r\n\
    \\ENQ\EOTS\STX\NUL\SOH\DC2\EOT\231\EOT\DC1\SUB\n\
    \\r\n\
    \\ENQ\EOTS\STX\NUL\ETX\DC2\EOT\231\EOT\GS\RS\n\
    \\f\n\
    \\EOT\EOTS\STX\SOH\DC2\EOT\232\EOT\STX\US\n\
    \\r\n\
    \\ENQ\EOTS\STX\SOH\EOT\DC2\EOT\232\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTS\STX\SOH\ENQ\DC2\EOT\232\EOT\v\DLE\n\
    \\r\n\
    \\ENQ\EOTS\STX\SOH\SOH\DC2\EOT\232\EOT\DC1\SUB\n\
    \\r\n\
    \\ENQ\EOTS\STX\SOH\ETX\DC2\EOT\232\EOT\GS\RS\n\
    \\f\n\
    \\EOT\EOTS\STX\STX\DC2\EOT\233\EOT\STX\FS\n\
    \\r\n\
    \\ENQ\EOTS\STX\STX\EOT\DC2\EOT\233\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTS\STX\STX\ENQ\DC2\EOT\233\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOTS\STX\STX\SOH\DC2\EOT\233\EOT\DC2\ETB\n\
    \\r\n\
    \\ENQ\EOTS\STX\STX\ETX\DC2\EOT\233\EOT\SUB\ESC\n\
    \\f\n\
    \\EOT\EOTS\STX\ETX\DC2\EOT\234\EOT\STX\ESC\n\
    \\r\n\
    \\ENQ\EOTS\STX\ETX\EOT\DC2\EOT\234\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTS\STX\ETX\ENQ\DC2\EOT\234\EOT\v\DLE\n\
    \\r\n\
    \\ENQ\EOTS\STX\ETX\SOH\DC2\EOT\234\EOT\DC1\SYN\n\
    \\r\n\
    \\ENQ\EOTS\STX\ETX\ETX\DC2\EOT\234\EOT\EM\SUB\n\
    \\f\n\
    \\EOT\EOTS\STX\EOT\DC2\EOT\235\EOT\STX\EM\n\
    \\r\n\
    \\ENQ\EOTS\STX\EOT\EOT\DC2\EOT\235\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTS\STX\EOT\ENQ\DC2\EOT\235\EOT\v\DLE\n\
    \\r\n\
    \\ENQ\EOTS\STX\EOT\SOH\DC2\EOT\235\EOT\DC1\DC4\n\
    \\r\n\
    \\ENQ\EOTS\STX\EOT\ETX\DC2\EOT\235\EOT\ETB\CAN\n\
    \\f\n\
    \\STX\EOTT\DC2\ACK\237\EOT\NUL\243\EOT\SOH\n\
    \\v\n\
    \\ETX\EOTT\SOH\DC2\EOT\237\EOT\b!\n\
    \\f\n\
    \\EOT\EOTT\STX\NUL\DC2\EOT\238\EOT\STX\US\n\
    \\r\n\
    \\ENQ\EOTT\STX\NUL\EOT\DC2\EOT\238\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTT\STX\NUL\ENQ\DC2\EOT\238\EOT\v\DLE\n\
    \\r\n\
    \\ENQ\EOTT\STX\NUL\SOH\DC2\EOT\238\EOT\DC1\SUB\n\
    \\r\n\
    \\ENQ\EOTT\STX\NUL\ETX\DC2\EOT\238\EOT\GS\RS\n\
    \\f\n\
    \\EOT\EOTT\STX\SOH\DC2\EOT\239\EOT\STX\US\n\
    \\r\n\
    \\ENQ\EOTT\STX\SOH\EOT\DC2\EOT\239\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTT\STX\SOH\ENQ\DC2\EOT\239\EOT\v\DLE\n\
    \\r\n\
    \\ENQ\EOTT\STX\SOH\SOH\DC2\EOT\239\EOT\DC1\SUB\n\
    \\r\n\
    \\ENQ\EOTT\STX\SOH\ETX\DC2\EOT\239\EOT\GS\RS\n\
    \\f\n\
    \\EOT\EOTT\STX\STX\DC2\EOT\240\EOT\STX\FS\n\
    \\r\n\
    \\ENQ\EOTT\STX\STX\EOT\DC2\EOT\240\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTT\STX\STX\ENQ\DC2\EOT\240\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOTT\STX\STX\SOH\DC2\EOT\240\EOT\DC2\ETB\n\
    \\r\n\
    \\ENQ\EOTT\STX\STX\ETX\DC2\EOT\240\EOT\SUB\ESC\n\
    \\f\n\
    \\EOT\EOTT\STX\ETX\DC2\EOT\241\EOT\STX\ESC\n\
    \\r\n\
    \\ENQ\EOTT\STX\ETX\EOT\DC2\EOT\241\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTT\STX\ETX\ENQ\DC2\EOT\241\EOT\v\DLE\n\
    \\r\n\
    \\ENQ\EOTT\STX\ETX\SOH\DC2\EOT\241\EOT\DC1\SYN\n\
    \\r\n\
    \\ENQ\EOTT\STX\ETX\ETX\DC2\EOT\241\EOT\EM\SUB\n\
    \\f\n\
    \\EOT\EOTT\STX\EOT\DC2\EOT\242\EOT\STX\EM\n\
    \\r\n\
    \\ENQ\EOTT\STX\EOT\EOT\DC2\EOT\242\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTT\STX\EOT\ENQ\DC2\EOT\242\EOT\v\DLE\n\
    \\r\n\
    \\ENQ\EOTT\STX\EOT\SOH\DC2\EOT\242\EOT\DC1\DC4\n\
    \\r\n\
    \\ENQ\EOTT\STX\EOT\ETX\DC2\EOT\242\EOT\ETB\CAN\n\
    \\f\n\
    \\STX\EOTU\DC2\ACK\244\EOT\NUL\248\EOT\SOH\n\
    \\v\n\
    \\ETX\EOTU\SOH\DC2\EOT\244\EOT\b$\n\
    \\f\n\
    \\EOT\EOTU\STX\NUL\DC2\EOT\245\EOT\STX\SUB\n\
    \\r\n\
    \\ENQ\EOTU\STX\NUL\EOT\DC2\EOT\245\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTU\STX\NUL\ENQ\DC2\EOT\245\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOTU\STX\NUL\SOH\DC2\EOT\245\EOT\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOTU\STX\NUL\ETX\DC2\EOT\245\EOT\CAN\EM\n\
    \\f\n\
    \\EOT\EOTU\STX\SOH\DC2\EOT\246\EOT\STX\SUB\n\
    \\r\n\
    \\ENQ\EOTU\STX\SOH\EOT\DC2\EOT\246\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTU\STX\SOH\ENQ\DC2\EOT\246\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOTU\STX\SOH\SOH\DC2\EOT\246\EOT\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOTU\STX\SOH\ETX\DC2\EOT\246\EOT\CAN\EM\n\
    \\f\n\
    \\EOT\EOTU\STX\STX\DC2\EOT\247\EOT\STX\GS\n\
    \\r\n\
    \\ENQ\EOTU\STX\STX\EOT\DC2\EOT\247\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTU\STX\STX\ENQ\DC2\EOT\247\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOTU\STX\STX\SOH\DC2\EOT\247\EOT\DC2\CAN\n\
    \\r\n\
    \\ENQ\EOTU\STX\STX\ETX\DC2\EOT\247\EOT\ESC\FS\n\
    \\f\n\
    \\STX\EOTV\DC2\ACK\249\EOT\NUL\253\EOT\SOH\n\
    \\v\n\
    \\ETX\EOTV\SOH\DC2\EOT\249\EOT\b#\n\
    \\f\n\
    \\EOT\EOTV\STX\NUL\DC2\EOT\250\EOT\STX\SUB\n\
    \\r\n\
    \\ENQ\EOTV\STX\NUL\EOT\DC2\EOT\250\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTV\STX\NUL\ENQ\DC2\EOT\250\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOTV\STX\NUL\SOH\DC2\EOT\250\EOT\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOTV\STX\NUL\ETX\DC2\EOT\250\EOT\CAN\EM\n\
    \\f\n\
    \\EOT\EOTV\STX\SOH\DC2\EOT\251\EOT\STX\SUB\n\
    \\r\n\
    \\ENQ\EOTV\STX\SOH\EOT\DC2\EOT\251\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTV\STX\SOH\ENQ\DC2\EOT\251\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOTV\STX\SOH\SOH\DC2\EOT\251\EOT\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOTV\STX\SOH\ETX\DC2\EOT\251\EOT\CAN\EM\n\
    \\f\n\
    \\EOT\EOTV\STX\STX\DC2\EOT\252\EOT\STX\GS\n\
    \\r\n\
    \\ENQ\EOTV\STX\STX\EOT\DC2\EOT\252\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTV\STX\STX\ENQ\DC2\EOT\252\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOTV\STX\STX\SOH\DC2\EOT\252\EOT\DC2\CAN\n\
    \\r\n\
    \\ENQ\EOTV\STX\STX\ETX\DC2\EOT\252\EOT\ESC\FS\n\
    \\f\n\
    \\STX\EOTW\DC2\ACK\254\EOT\NUL\131\ENQ\SOH\n\
    \\v\n\
    \\ETX\EOTW\SOH\DC2\EOT\254\EOT\b\"\n\
    \\f\n\
    \\EOT\EOTW\STX\NUL\DC2\EOT\255\EOT\STX\SUB\n\
    \\r\n\
    \\ENQ\EOTW\STX\NUL\EOT\DC2\EOT\255\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTW\STX\NUL\ENQ\DC2\EOT\255\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOTW\STX\NUL\SOH\DC2\EOT\255\EOT\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOTW\STX\NUL\ETX\DC2\EOT\255\EOT\CAN\EM\n\
    \\f\n\
    \\EOT\EOTW\STX\SOH\DC2\EOT\128\ENQ\STX\SUB\n\
    \\r\n\
    \\ENQ\EOTW\STX\SOH\EOT\DC2\EOT\128\ENQ\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTW\STX\SOH\ENQ\DC2\EOT\128\ENQ\v\DC1\n\
    \\r\n\
    \\ENQ\EOTW\STX\SOH\SOH\DC2\EOT\128\ENQ\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOTW\STX\SOH\ETX\DC2\EOT\128\ENQ\CAN\EM\n\
    \\f\n\
    \\EOT\EOTW\STX\STX\DC2\EOT\129\ENQ\STX\GS\n\
    \\r\n\
    \\ENQ\EOTW\STX\STX\EOT\DC2\EOT\129\ENQ\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTW\STX\STX\ENQ\DC2\EOT\129\ENQ\v\DC1\n\
    \\r\n\
    \\ENQ\EOTW\STX\STX\SOH\DC2\EOT\129\ENQ\DC2\CAN\n\
    \\r\n\
    \\ENQ\EOTW\STX\STX\ETX\DC2\EOT\129\ENQ\ESC\FS\n\
    \\f\n\
    \\EOT\EOTW\STX\ETX\DC2\EOT\130\ENQ\STX\SUB\n\
    \\r\n\
    \\ENQ\EOTW\STX\ETX\EOT\DC2\EOT\130\ENQ\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTW\STX\ETX\ENQ\DC2\EOT\130\ENQ\v\DLE\n\
    \\r\n\
    \\ENQ\EOTW\STX\ETX\SOH\DC2\EOT\130\ENQ\DC1\NAK\n\
    \\r\n\
    \\ENQ\EOTW\STX\ETX\ETX\DC2\EOT\130\ENQ\CAN\EM\n\
    \\f\n\
    \\STX\EOTX\DC2\ACK\132\ENQ\NUL\136\ENQ\SOH\n\
    \\v\n\
    \\ETX\EOTX\SOH\DC2\EOT\132\ENQ\b!\n\
    \\f\n\
    \\EOT\EOTX\STX\NUL\DC2\EOT\133\ENQ\STX\SUB\n\
    \\r\n\
    \\ENQ\EOTX\STX\NUL\EOT\DC2\EOT\133\ENQ\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTX\STX\NUL\ENQ\DC2\EOT\133\ENQ\v\DC1\n\
    \\r\n\
    \\ENQ\EOTX\STX\NUL\SOH\DC2\EOT\133\ENQ\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOTX\STX\NUL\ETX\DC2\EOT\133\ENQ\CAN\EM\n\
    \\f\n\
    \\EOT\EOTX\STX\SOH\DC2\EOT\134\ENQ\STX\SUB\n\
    \\r\n\
    \\ENQ\EOTX\STX\SOH\EOT\DC2\EOT\134\ENQ\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTX\STX\SOH\ENQ\DC2\EOT\134\ENQ\v\DC1\n\
    \\r\n\
    \\ENQ\EOTX\STX\SOH\SOH\DC2\EOT\134\ENQ\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOTX\STX\SOH\ETX\DC2\EOT\134\ENQ\CAN\EM\n\
    \\f\n\
    \\EOT\EOTX\STX\STX\DC2\EOT\135\ENQ\STX\EM\n\
    \\r\n\
    \\ENQ\EOTX\STX\STX\EOT\DC2\EOT\135\ENQ\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTX\STX\STX\ENQ\DC2\EOT\135\ENQ\v\DLE\n\
    \\r\n\
    \\ENQ\EOTX\STX\STX\SOH\DC2\EOT\135\ENQ\DC1\DC4\n\
    \\r\n\
    \\ENQ\EOTX\STX\STX\ETX\DC2\EOT\135\ENQ\ETB\CAN\n\
    \\f\n\
    \\STX\EOTY\DC2\ACK\137\ENQ\NUL\143\ENQ\SOH\n\
    \\v\n\
    \\ETX\EOTY\SOH\DC2\EOT\137\ENQ\b!\n\
    \\f\n\
    \\EOT\EOTY\STX\NUL\DC2\EOT\138\ENQ\STX\SUB\n\
    \\r\n\
    \\ENQ\EOTY\STX\NUL\EOT\DC2\EOT\138\ENQ\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTY\STX\NUL\ENQ\DC2\EOT\138\ENQ\v\DC1\n\
    \\r\n\
    \\ENQ\EOTY\STX\NUL\SOH\DC2\EOT\138\ENQ\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOTY\STX\NUL\ETX\DC2\EOT\138\ENQ\CAN\EM\n\
    \\f\n\
    \\EOT\EOTY\STX\SOH\DC2\EOT\139\ENQ\STX\SUB\n\
    \\r\n\
    \\ENQ\EOTY\STX\SOH\EOT\DC2\EOT\139\ENQ\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTY\STX\SOH\ENQ\DC2\EOT\139\ENQ\v\DC1\n\
    \\r\n\
    \\ENQ\EOTY\STX\SOH\SOH\DC2\EOT\139\ENQ\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOTY\STX\SOH\ETX\DC2\EOT\139\ENQ\CAN\EM\n\
    \\f\n\
    \\EOT\EOTY\STX\STX\DC2\EOT\140\ENQ\STX\EM\n\
    \\r\n\
    \\ENQ\EOTY\STX\STX\EOT\DC2\EOT\140\ENQ\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTY\STX\STX\ENQ\DC2\EOT\140\ENQ\v\DLE\n\
    \\r\n\
    \\ENQ\EOTY\STX\STX\SOH\DC2\EOT\140\ENQ\DC1\DC4\n\
    \\r\n\
    \\ENQ\EOTY\STX\STX\ETX\DC2\EOT\140\ENQ\ETB\CAN\n\
    \\f\n\
    \\EOT\EOTY\STX\ETX\DC2\EOT\141\ENQ\STX\SUB\n\
    \\r\n\
    \\ENQ\EOTY\STX\ETX\EOT\DC2\EOT\141\ENQ\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTY\STX\ETX\ENQ\DC2\EOT\141\ENQ\v\DC1\n\
    \\r\n\
    \\ENQ\EOTY\STX\ETX\SOH\DC2\EOT\141\ENQ\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOTY\STX\ETX\ETX\DC2\EOT\141\ENQ\CAN\EM\n\
    \\f\n\
    \\EOT\EOTY\STX\EOT\DC2\EOT\142\ENQ\STX\FS\n\
    \\r\n\
    \\ENQ\EOTY\STX\EOT\EOT\DC2\EOT\142\ENQ\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTY\STX\EOT\ENQ\DC2\EOT\142\ENQ\v\DC1\n\
    \\r\n\
    \\ENQ\EOTY\STX\EOT\SOH\DC2\EOT\142\ENQ\DC2\ETB\n\
    \\r\n\
    \\ENQ\EOTY\STX\EOT\ETX\DC2\EOT\142\ENQ\SUB\ESC\n\
    \\f\n\
    \\STX\EOTZ\DC2\ACK\144\ENQ\NUL\150\ENQ\SOH\n\
    \\v\n\
    \\ETX\EOTZ\SOH\DC2\EOT\144\ENQ\b\US\n\
    \\f\n\
    \\EOT\EOTZ\STX\NUL\DC2\EOT\145\ENQ\STX\SUB\n\
    \\r\n\
    \\ENQ\EOTZ\STX\NUL\EOT\DC2\EOT\145\ENQ\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTZ\STX\NUL\ENQ\DC2\EOT\145\ENQ\v\DC1\n\
    \\r\n\
    \\ENQ\EOTZ\STX\NUL\SOH\DC2\EOT\145\ENQ\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOTZ\STX\NUL\ETX\DC2\EOT\145\ENQ\CAN\EM\n\
    \\f\n\
    \\EOT\EOTZ\STX\SOH\DC2\EOT\146\ENQ\STX\SUB\n\
    \\r\n\
    \\ENQ\EOTZ\STX\SOH\EOT\DC2\EOT\146\ENQ\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTZ\STX\SOH\ENQ\DC2\EOT\146\ENQ\v\DC1\n\
    \\r\n\
    \\ENQ\EOTZ\STX\SOH\SOH\DC2\EOT\146\ENQ\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOTZ\STX\SOH\ETX\DC2\EOT\146\ENQ\CAN\EM\n\
    \\f\n\
    \\EOT\EOTZ\STX\STX\DC2\EOT\147\ENQ\STX\EM\n\
    \\r\n\
    \\ENQ\EOTZ\STX\STX\EOT\DC2\EOT\147\ENQ\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTZ\STX\STX\ENQ\DC2\EOT\147\ENQ\v\DLE\n\
    \\r\n\
    \\ENQ\EOTZ\STX\STX\SOH\DC2\EOT\147\ENQ\DC1\DC4\n\
    \\r\n\
    \\ENQ\EOTZ\STX\STX\ETX\DC2\EOT\147\ENQ\ETB\CAN\n\
    \\f\n\
    \\EOT\EOTZ\STX\ETX\DC2\EOT\148\ENQ\STX\SUB\n\
    \\r\n\
    \\ENQ\EOTZ\STX\ETX\EOT\DC2\EOT\148\ENQ\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTZ\STX\ETX\ENQ\DC2\EOT\148\ENQ\v\DC1\n\
    \\r\n\
    \\ENQ\EOTZ\STX\ETX\SOH\DC2\EOT\148\ENQ\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOTZ\STX\ETX\ETX\DC2\EOT\148\ENQ\CAN\EM\n\
    \\f\n\
    \\EOT\EOTZ\STX\EOT\DC2\EOT\149\ENQ\STX\GS\n\
    \\r\n\
    \\ENQ\EOTZ\STX\EOT\EOT\DC2\EOT\149\ENQ\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTZ\STX\EOT\ENQ\DC2\EOT\149\ENQ\v\DC1\n\
    \\r\n\
    \\ENQ\EOTZ\STX\EOT\SOH\DC2\EOT\149\ENQ\DC2\CAN\n\
    \\r\n\
    \\ENQ\EOTZ\STX\EOT\ETX\DC2\EOT\149\ENQ\ESC\FS\n\
    \\f\n\
    \\STX\EOT[\DC2\ACK\151\ENQ\NUL\155\ENQ\SOH\n\
    \\v\n\
    \\ETX\EOT[\SOH\DC2\EOT\151\ENQ\b \n\
    \\f\n\
    \\EOT\EOT[\STX\NUL\DC2\EOT\152\ENQ\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT[\STX\NUL\EOT\DC2\EOT\152\ENQ\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT[\STX\NUL\ENQ\DC2\EOT\152\ENQ\v\DC1\n\
    \\r\n\
    \\ENQ\EOT[\STX\NUL\SOH\DC2\EOT\152\ENQ\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT[\STX\NUL\ETX\DC2\EOT\152\ENQ\CAN\EM\n\
    \\f\n\
    \\EOT\EOT[\STX\SOH\DC2\EOT\153\ENQ\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT[\STX\SOH\EOT\DC2\EOT\153\ENQ\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT[\STX\SOH\ENQ\DC2\EOT\153\ENQ\v\DC1\n\
    \\r\n\
    \\ENQ\EOT[\STX\SOH\SOH\DC2\EOT\153\ENQ\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT[\STX\SOH\ETX\DC2\EOT\153\ENQ\CAN\EM\n\
    \\f\n\
    \\EOT\EOT[\STX\STX\DC2\EOT\154\ENQ\STX\FS\n\
    \\r\n\
    \\ENQ\EOT[\STX\STX\EOT\DC2\EOT\154\ENQ\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT[\STX\STX\ENQ\DC2\EOT\154\ENQ\v\DC1\n\
    \\r\n\
    \\ENQ\EOT[\STX\STX\SOH\DC2\EOT\154\ENQ\DC2\ETB\n\
    \\r\n\
    \\ENQ\EOT[\STX\STX\ETX\DC2\EOT\154\ENQ\SUB\ESC\n\
    \\f\n\
    \\STX\EOT\\\DC2\ACK\156\ENQ\NUL\167\ENQ\SOH\n\
    \\v\n\
    \\ETX\EOT\\\SOH\DC2\EOT\156\ENQ\b!\n\
    \\f\n\
    \\EOT\EOT\\\STX\NUL\DC2\EOT\157\ENQ\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT\\\STX\NUL\EOT\DC2\EOT\157\ENQ\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\\\STX\NUL\ENQ\DC2\EOT\157\ENQ\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\\\STX\NUL\SOH\DC2\EOT\157\ENQ\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT\\\STX\NUL\ETX\DC2\EOT\157\ENQ\CAN\EM\n\
    \\f\n\
    \\EOT\EOT\\\STX\SOH\DC2\EOT\158\ENQ\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT\\\STX\SOH\EOT\DC2\EOT\158\ENQ\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\\\STX\SOH\ENQ\DC2\EOT\158\ENQ\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\\\STX\SOH\SOH\DC2\EOT\158\ENQ\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT\\\STX\SOH\ETX\DC2\EOT\158\ENQ\CAN\EM\n\
    \\f\n\
    \\EOT\EOT\\\STX\STX\DC2\EOT\159\ENQ\STX!\n\
    \\r\n\
    \\ENQ\EOT\\\STX\STX\EOT\DC2\EOT\159\ENQ\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\\\STX\STX\ENQ\DC2\EOT\159\ENQ\v\DLE\n\
    \\r\n\
    \\ENQ\EOT\\\STX\STX\SOH\DC2\EOT\159\ENQ\DC1\FS\n\
    \\r\n\
    \\ENQ\EOT\\\STX\STX\ETX\DC2\EOT\159\ENQ\US \n\
    \\f\n\
    \\EOT\EOT\\\STX\ETX\DC2\EOT\160\ENQ\STX#\n\
    \\r\n\
    \\ENQ\EOT\\\STX\ETX\EOT\DC2\EOT\160\ENQ\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\\\STX\ETX\ENQ\DC2\EOT\160\ENQ\v\DLE\n\
    \\r\n\
    \\ENQ\EOT\\\STX\ETX\SOH\DC2\EOT\160\ENQ\DC1\RS\n\
    \\r\n\
    \\ENQ\EOT\\\STX\ETX\ETX\DC2\EOT\160\ENQ!\"\n\
    \\f\n\
    \\EOT\EOT\\\STX\EOT\DC2\EOT\161\ENQ\STX!\n\
    \\r\n\
    \\ENQ\EOT\\\STX\EOT\EOT\DC2\EOT\161\ENQ\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\\\STX\EOT\ENQ\DC2\EOT\161\ENQ\v\DLE\n\
    \\r\n\
    \\ENQ\EOT\\\STX\EOT\SOH\DC2\EOT\161\ENQ\DC1\FS\n\
    \\r\n\
    \\ENQ\EOT\\\STX\EOT\ETX\DC2\EOT\161\ENQ\US \n\
    \\f\n\
    \\EOT\EOT\\\STX\ENQ\DC2\EOT\162\ENQ\STX\US\n\
    \\r\n\
    \\ENQ\EOT\\\STX\ENQ\EOT\DC2\EOT\162\ENQ\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\\\STX\ENQ\ENQ\DC2\EOT\162\ENQ\v\DLE\n\
    \\r\n\
    \\ENQ\EOT\\\STX\ENQ\SOH\DC2\EOT\162\ENQ\DC1\SUB\n\
    \\r\n\
    \\ENQ\EOT\\\STX\ENQ\ETX\DC2\EOT\162\ENQ\GS\RS\n\
    \\f\n\
    \\EOT\EOT\\\STX\ACK\DC2\EOT\163\ENQ\STX&\n\
    \\r\n\
    \\ENQ\EOT\\\STX\ACK\EOT\DC2\EOT\163\ENQ\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\\\STX\ACK\ENQ\DC2\EOT\163\ENQ\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\\\STX\ACK\SOH\DC2\EOT\163\ENQ\DC2!\n\
    \\r\n\
    \\ENQ\EOT\\\STX\ACK\ETX\DC2\EOT\163\ENQ$%\n\
    \\f\n\
    \\EOT\EOT\\\STX\a\DC2\EOT\164\ENQ\STX\US\n\
    \\r\n\
    \\ENQ\EOT\\\STX\a\EOT\DC2\EOT\164\ENQ\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\\\STX\a\ENQ\DC2\EOT\164\ENQ\v\DLE\n\
    \\r\n\
    \\ENQ\EOT\\\STX\a\SOH\DC2\EOT\164\ENQ\DC1\SUB\n\
    \\r\n\
    \\ENQ\EOT\\\STX\a\ETX\DC2\EOT\164\ENQ\GS\RS\n\
    \\f\n\
    \\EOT\EOT\\\STX\b\DC2\EOT\165\ENQ\STX\"\n\
    \\r\n\
    \\ENQ\EOT\\\STX\b\EOT\DC2\EOT\165\ENQ\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\\\STX\b\ENQ\DC2\EOT\165\ENQ\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\\\STX\b\SOH\DC2\EOT\165\ENQ\DC2\GS\n\
    \\r\n\
    \\ENQ\EOT\\\STX\b\ETX\DC2\EOT\165\ENQ !\n\
    \\f\n\
    \\EOT\EOT\\\STX\t\DC2\EOT\166\ENQ\STX$\n\
    \\r\n\
    \\ENQ\EOT\\\STX\t\EOT\DC2\EOT\166\ENQ\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\\\STX\t\ENQ\DC2\EOT\166\ENQ\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\\\STX\t\SOH\DC2\EOT\166\ENQ\DC2\RS\n\
    \\r\n\
    \\ENQ\EOT\\\STX\t\ETX\DC2\EOT\166\ENQ!#\n\
    \\f\n\
    \\STX\EOT]\DC2\ACK\168\ENQ\NUL\176\ENQ\SOH\n\
    \\v\n\
    \\ETX\EOT]\SOH\DC2\EOT\168\ENQ\b'\n\
    \\f\n\
    \\EOT\EOT]\STX\NUL\DC2\EOT\169\ENQ\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT]\STX\NUL\EOT\DC2\EOT\169\ENQ\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT]\STX\NUL\ENQ\DC2\EOT\169\ENQ\v\DC1\n\
    \\r\n\
    \\ENQ\EOT]\STX\NUL\SOH\DC2\EOT\169\ENQ\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT]\STX\NUL\ETX\DC2\EOT\169\ENQ\CAN\EM\n\
    \\f\n\
    \\EOT\EOT]\STX\SOH\DC2\EOT\170\ENQ\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT]\STX\SOH\EOT\DC2\EOT\170\ENQ\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT]\STX\SOH\ENQ\DC2\EOT\170\ENQ\v\DC1\n\
    \\r\n\
    \\ENQ\EOT]\STX\SOH\SOH\DC2\EOT\170\ENQ\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT]\STX\SOH\ETX\DC2\EOT\170\ENQ\CAN\EM\n\
    \\f\n\
    \\EOT\EOT]\STX\STX\DC2\EOT\171\ENQ\STX\EM\n\
    \\r\n\
    \\ENQ\EOT]\STX\STX\EOT\DC2\EOT\171\ENQ\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT]\STX\STX\ENQ\DC2\EOT\171\ENQ\v\DLE\n\
    \\r\n\
    \\ENQ\EOT]\STX\STX\SOH\DC2\EOT\171\ENQ\DC1\DC4\n\
    \\r\n\
    \\ENQ\EOT]\STX\STX\ETX\DC2\EOT\171\ENQ\ETB\CAN\n\
    \\f\n\
    \\EOT\EOT]\STX\ETX\DC2\EOT\172\ENQ\STX#\n\
    \\r\n\
    \\ENQ\EOT]\STX\ETX\EOT\DC2\EOT\172\ENQ\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT]\STX\ETX\ENQ\DC2\EOT\172\ENQ\v\DLE\n\
    \\r\n\
    \\ENQ\EOT]\STX\ETX\SOH\DC2\EOT\172\ENQ\DC1\RS\n\
    \\r\n\
    \\ENQ\EOT]\STX\ETX\ETX\DC2\EOT\172\ENQ!\"\n\
    \\f\n\
    \\EOT\EOT]\STX\EOT\DC2\EOT\173\ENQ\STX#\n\
    \\r\n\
    \\ENQ\EOT]\STX\EOT\EOT\DC2\EOT\173\ENQ\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT]\STX\EOT\ENQ\DC2\EOT\173\ENQ\v\DLE\n\
    \\r\n\
    \\ENQ\EOT]\STX\EOT\SOH\DC2\EOT\173\ENQ\DC1\RS\n\
    \\r\n\
    \\ENQ\EOT]\STX\EOT\ETX\DC2\EOT\173\ENQ!\"\n\
    \\f\n\
    \\EOT\EOT]\STX\ENQ\DC2\EOT\174\ENQ\STX&\n\
    \\r\n\
    \\ENQ\EOT]\STX\ENQ\EOT\DC2\EOT\174\ENQ\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT]\STX\ENQ\ENQ\DC2\EOT\174\ENQ\v\DC1\n\
    \\r\n\
    \\ENQ\EOT]\STX\ENQ\SOH\DC2\EOT\174\ENQ\DC2!\n\
    \\r\n\
    \\ENQ\EOT]\STX\ENQ\ETX\DC2\EOT\174\ENQ$%\n\
    \\f\n\
    \\EOT\EOT]\STX\ACK\DC2\EOT\175\ENQ\STX\US\n\
    \\r\n\
    \\ENQ\EOT]\STX\ACK\EOT\DC2\EOT\175\ENQ\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT]\STX\ACK\ENQ\DC2\EOT\175\ENQ\v\DLE\n\
    \\r\n\
    \\ENQ\EOT]\STX\ACK\SOH\DC2\EOT\175\ENQ\DC1\SUB\n\
    \\r\n\
    \\ENQ\EOT]\STX\ACK\ETX\DC2\EOT\175\ENQ\GS\RS\n\
    \\f\n\
    \\STX\EOT^\DC2\ACK\177\ENQ\NUL\183\ENQ\SOH\n\
    \\v\n\
    \\ETX\EOT^\SOH\DC2\EOT\177\ENQ\b \n\
    \\f\n\
    \\EOT\EOT^\STX\NUL\DC2\EOT\178\ENQ\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT^\STX\NUL\EOT\DC2\EOT\178\ENQ\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT^\STX\NUL\ENQ\DC2\EOT\178\ENQ\v\DC1\n\
    \\r\n\
    \\ENQ\EOT^\STX\NUL\SOH\DC2\EOT\178\ENQ\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT^\STX\NUL\ETX\DC2\EOT\178\ENQ\CAN\EM\n\
    \\f\n\
    \\EOT\EOT^\STX\SOH\DC2\EOT\179\ENQ\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT^\STX\SOH\EOT\DC2\EOT\179\ENQ\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT^\STX\SOH\ENQ\DC2\EOT\179\ENQ\v\DC1\n\
    \\r\n\
    \\ENQ\EOT^\STX\SOH\SOH\DC2\EOT\179\ENQ\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOT^\STX\SOH\ETX\DC2\EOT\179\ENQ\CAN\EM\n\
    \\f\n\
    \\EOT\EOT^\STX\STX\DC2\EOT\180\ENQ\STX\FS\n\
    \\r\n\
    \\ENQ\EOT^\STX\STX\EOT\DC2\EOT\180\ENQ\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT^\STX\STX\ENQ\DC2\EOT\180\ENQ\v\DLE\n\
    \\r\n\
    \\ENQ\EOT^\STX\STX\SOH\DC2\EOT\180\ENQ\DC1\ETB\n\
    \\r\n\
    \\ENQ\EOT^\STX\STX\ETX\DC2\EOT\180\ENQ\SUB\ESC\n\
    \\f\n\
    \\EOT\EOT^\STX\ETX\DC2\EOT\181\ENQ\STX\EM\n\
    \\r\n\
    \\ENQ\EOT^\STX\ETX\EOT\DC2\EOT\181\ENQ\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT^\STX\ETX\ENQ\DC2\EOT\181\ENQ\v\DLE\n\
    \\r\n\
    \\ENQ\EOT^\STX\ETX\SOH\DC2\EOT\181\ENQ\DC1\DC4\n\
    \\r\n\
    \\ENQ\EOT^\STX\ETX\ETX\DC2\EOT\181\ENQ\ETB\CAN\n\
    \\f\n\
    \\EOT\EOT^\STX\EOT\DC2\EOT\182\ENQ\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT^\STX\EOT\EOT\DC2\EOT\182\ENQ\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT^\STX\EOT\ENQ\DC2\EOT\182\ENQ\v\DLE\n\
    \\r\n\
    \\ENQ\EOT^\STX\EOT\SOH\DC2\EOT\182\ENQ\DC1\NAK\n\
    \\r\n\
    \\ENQ\EOT^\STX\EOT\ETX\DC2\EOT\182\ENQ\CAN\EM"