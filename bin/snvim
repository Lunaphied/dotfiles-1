#!/usr/bin/python
# switch nvim
from pathlib import Path
import os
import sys
import json
import argparse
import subprocess
from typing import Optional

SWAPDIR = Path("~/.local/state/nvim/swap").expanduser()


def swapfile_path(p: Path) -> Path:
    p = p.resolve(strict=True)
    def make_path(ext):
        return SWAPDIR / str(p.with_name(p.name + ext)).replace("/", "%")

    # vim will try extensions from .swp down to .swa if there are multiple
    # instances
    for ch in range(ord('p'), ord('a'), -1):
        candidate = make_path('.sw' + chr(ch))
        if Path(candidate).exists():
            return candidate
    return make_path('.swp')


def get_pid_for_file(p: Path) -> Optional[int]:
    swap_path = swapfile_path(p)
    if not swap_path.exists():
        return None
    rv = subprocess.run(
        ["vim-swapfile-header", str(swap_path)], capture_output=True)
    rv.check_returncode()
    data = json.loads(rv.stdout)
    return data["pid"]


def has_running_instance(pid: int) -> bool:
    return (Path("/proc") / str(pid)).exists()


def main():
    ap = argparse.ArgumentParser(
        description="switches to a nvim if present or opens a new one here")
    print(ap.prog)

    ap.add_argument("fname", help="file name")
    args = ap.parse_args()

    fname = args.fname
    pid = get_pid_for_file(Path(fname))
    if pid and has_running_instance(pid):
        print("raising", pid)
        if Path(sys.argv[0]).name == 'smnvim':
            os.environ['RAISEPID_SUMMON'] = '1'
        os.execlp("raisepid", 'raisepid', str(pid))
    else:
        print("exec nvim")
        visual = os.environ["VISUAL"]
        if visual == 'nvimsplit':
            # hack: nvimsplit should be run in detach mode
            os.execlp(visual, visual, '-d', fname)
        else:
            os.execlp(visual, visual, fname)


if __name__ == "__main__":
    main()
