--- misc/CMake/DocBook.cmake	(revision 68622)
+++ misc/CMake/DocBook.cmake	(revision 68624)
@@ -53,13 +53,15 @@
 
 
 # Handle default exec and sanity checking for XML validation
-if(NOT DEFINED VALIDATE_EXECUTABLE)
-  set(VALIDATE_EXECUTABLE "xmllint")
-else(NOT DEFINED VALIDATE_EXECUTABLE)
-  if(NOT EXISTS "${BRLCAD_SOURCE_DIR}/misc/CMake/${VALIDATE_EXECUTABLE}.cmake.in")
-    message(FATAL_ERROR "Specified ${VALIDATE_EXECUTABLE} for DocBook validation, but \"${BRLCAD_SOURCE_DIR}/misc/CMake/${VALIDATE_EXECUTABLE}.cmake.in\" does not exist.  To use ${VALIDATE_EXECUTABLE} a ${VALIDATE_EXECUTABLE}.cmake.in file must be defined.")
-  endif(NOT EXISTS "${BRLCAD_SOURCE_DIR}/misc/CMake/${VALIDATE_EXECUTABLE}.cmake.in")
-endif(NOT DEFINED VALIDATE_EXECUTABLE)
+if(BRLCAD_ENABLE_STRICT)
+  if(NOT DEFINED VALIDATE_EXECUTABLE)
+    set(VALIDATE_EXECUTABLE "xmllint")
+  else(NOT DEFINED VALIDATE_EXECUTABLE)
+    if(NOT EXISTS "${BRLCAD_SOURCE_DIR}/misc/CMake/${VALIDATE_EXECUTABLE}.cmake.in")
+      message(FATAL_ERROR "Specified ${VALIDATE_EXECUTABLE} for DocBook validation, but \"${BRLCAD_SOURCE_DIR}/misc/CMake/${VALIDATE_EXECUTABLE}.cmake.in\" does not exist.  To use ${VALIDATE_EXECUTABLE} a ${VALIDATE_EXECUTABLE}.cmake.in file must be defined.")
+    endif(NOT EXISTS "${BRLCAD_SOURCE_DIR}/misc/CMake/${VALIDATE_EXECUTABLE}.cmake.in")
+  endif(NOT DEFINED VALIDATE_EXECUTABLE)
+endif(BRLCAD_ENABLE_STRICT)
 
 # Handle default exec and sanity checking for XSLT
 if(NOT DEFINED XSLT_EXECUTABLE)
--- misc/CMake/FindXMLLINT.cmake	(revision 68622)
+++ misc/CMake/FindXMLLINT.cmake	(revision 68624)
@@ -36,12 +36,18 @@
 # - Find xmllint executable
 #
 #  The module defines the following variables:
-#  XSLTPROC_FOUND - true is xsltproc executable is found
-#  XSLTPROC_EXECUTABLE - the path to the xsltproc executable
+#  XMLLINT_FOUND - true is xmllint executable is found
+#  XMLLINT_EXECUTABLE - the path to the xmllint executable
 
 find_program(XMLLINT_EXECUTABLE xmllint DOC "path to the xmllint executable")
 mark_as_advanced(XMLLINT_EXECUTABLE)
 
+if(NOT XMLLINT_EXECUTABLE)
+  set(XMLLINT_FOUND 0)
+else(NOT XMLLINT_EXECUTABLE)
+  set(XMLLINT_FOUND 1)
+endif(NOT XMLLINT_EXECUTABLE)
+
 include(FindPackageHandleStandardArgs)
 FIND_PACKAGE_HANDLE_STANDARD_ARGS(XMLLINT DEFAULT_MSG XMLLINT_EXECUTABLE)
 
--- misc/CMake/docbook.cmake.in	(revision 68622)
+++ misc/CMake/docbook.cmake.in	(revision 68624)
@@ -49,6 +49,12 @@
 set(XMLLINT_EXECUTABLE "@XMLLINT_EXEC@")
 
 macro(XSLTPROC stylesheet filename outfile extras)
+
+  # If we're trying to do this but XSLTPROC_EXECUTABLE was unset somehow, fatal error
+  if ("${XSLTPROC_EXECUTABLE}" STREQUAL "")
+    message(FATAL_ERROR "xsltproc processing requested, but XSLTPROC_EXECUTABLE is not set.")
+  endif ("${XSLTPROC_EXECUTABLE}" STREQUAL "")
+
   set(ENV{XML_DEBUG_CATALOG} 1)
   # It is necessary to ensure that the target directory exists *before* calling xsltproc
   # when building in parallel, due to a bug/limitation in xsltproc
@@ -89,32 +95,39 @@
 set(VE "@VALIDATE_EXECUTABLE@")
 set(SCHEMA_DIR "@BRLCAD_BINARY_DIR@/doc/docbook/resources/other/docbook-schema")
 
-if ("xmllint" MATCHES "${VE}")
+if (NOT "${VE}" STREQUAL "")
+  if ("xmllint" MATCHES "${VE}")
 
-  execute_process(COMMAND "${XMLLINT_EXECUTABLE}" --xinclude --schema "${SCHEMA_DIR}/xsd/docbook.xsd" --noout --nonet "${filename}"
-    RESULT_VARIABLE CMDRESULT OUTPUT_VARIABLE CMDOUT ERROR_VARIABLE CMDERR)
+    if ("${XMLLINT_EXECUTABLE}" STREQUAL "")
+      message(FATAL_ERROR "Validation failure: xmllint validation requested, but XMLLINT_EXECUTABLE is not set.")
+    endif ("${XMLLINT_EXECUTABLE}" STREQUAL "")
 
-elseif ("rnv" MATCHES "${VE}")
+    execute_process(COMMAND "${XMLLINT_EXECUTABLE}" --xinclude --schema "${SCHEMA_DIR}/xsd/docbook.xsd" --noout --nonet "${filename}"
+      RESULT_VARIABLE CMDRESULT OUTPUT_VARIABLE CMDOUT ERROR_VARIABLE CMDERR)
 
-  execute_process(COMMAND rnv "${SCHEMA_DIR}/rng/docbookxi.rnc" "${filename}"
-    RESULT_VARIABLE CMDRESULT OUTPUT_VARIABLE CMDOUT ERROR_VARIABLE CMDERR)
+  elseif ("rnv" MATCHES "${VE}")
 
-elseif ("msv" MATCHES "${VE}")
+    execute_process(COMMAND rnv "${SCHEMA_DIR}/rng/docbookxi.rnc" "${filename}"
+      RESULT_VARIABLE CMDRESULT OUTPUT_VARIABLE CMDOUT ERROR_VARIABLE CMDERR)
 
-  execute_process(COMMAND msv -warning "${SCHEMA_DIR}/rng/docbookxi.rng" "@filename@"
-    RESULT_VARIABLE CMDRESULT OUTPUT_VARIABLE CMDOUT ERROR_VARIABLE CMDERR)
+  elseif ("msv" MATCHES "${VE}")
 
-else ("xmllint" MATCHES "${VE}")
+    execute_process(COMMAND msv -warning "${SCHEMA_DIR}/rng/docbookxi.rng" "@filename@"
+      RESULT_VARIABLE CMDRESULT OUTPUT_VARIABLE CMDOUT ERROR_VARIABLE CMDERR)
 
-  message(FATAL_ERROR "Unsupported XML validator specified: ${VE}")
+  else ("xmllint" MATCHES "${VE}")
 
-endif("xmllint" MATCHES "${VE}")
+    message(FATAL_ERROR "Unsupported XML validator specified: ${VE}")
 
-# If we're not valid, we're done.
-if(CMDRESULT)
-  message(FATAL_ERROR "${VE} validation failure on file ${filename}: ${CMDRESULT}\n${CMDOUT}\n${CMDERR}")
-endif(CMDRESULT)
+  endif("xmllint" MATCHES "${VE}")
 
+  # If we're not valid, we're done.
+  if(CMDRESULT)
+    message(FATAL_ERROR "${VE} validation failure on file ${filename}: ${CMDRESULT}\n${CMDOUT}\n${CMDERR}")
+  endif(CMDRESULT)
+
+endif (NOT "${VE}" STREQUAL "")
+
 # Reset result variables.
 set(CMDRESULT)
 set(CMDOUT)
@@ -205,6 +218,11 @@
     get_filename_component(output_dir "${PDF_OUTFILE}" PATH)
     execute_process(COMMAND "@CMAKE_COMMAND@" -E make_directory "${output_dir}")
 
+    # If we're trying to do this but APACHE_FOP was unset somehow, fatal error
+    if ("${APACHE_FOP}" STREQUAL "")
+      message(FATAL_ERROR "Apache FOP processing requested, but APACHE_FOP is not set.")
+    endif ("${APACHE_FOP}" STREQUAL "")
+
     # Run FOP to actually generate the PDF
     execute_process(COMMAND "@APACHE_FOP@" -c "@CMAKE_BINARY_DIR@/doc/docbook/fop.xconf" "${fo_outfile}" -pdf "${PDF_OUTFILE}" RESULT_VARIABLE CMDRESULT)
 
--- db/nist/CMakeLists.txt
+++ db/nist/CMakeLists.txt
@@ -1,11 +1,4 @@
 set(NIST_SAMPLE_STEP_MODELS
-  NIST_MBE_PMI_1.stp
-  NIST_MBE_PMI_2.stp
-  NIST_MBE_PMI_3.stp
-  NIST_MBE_PMI_4.stp
-  NIST_MBE_PMI_5.stp
-  NIST_MBE_PMI_6.stp
-  NIST_MBE_PMI_11.stp
 )
 set(NIST_SAMPLE_3DM_MODELS
   NIST_MBE_PMI_7-10.3dm
